
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00802000  00004934  000049c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000de  008020b4  008020b4  00004a7c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004a7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ad8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000568  00000000  00000000  00004b18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000185c6  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004fcb  00000000  00000000  0001d646  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a31d  00000000  00000000  00022611  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001408  00000000  00000000  0002c930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d6bb  00000000  00000000  0002dd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005681  00000000  00000000  0005b3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e0  00000000  00000000  00060a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003d74  00000000  00000000  00060f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c1       	rjmp	.+754    	; 0x2f4 <__ctors_end>
       2:	00 00       	nop
       4:	9d c1       	rjmp	.+826    	; 0x340 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c1       	rjmp	.+822    	; 0x340 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c1       	rjmp	.+818    	; 0x340 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c1       	rjmp	.+814    	; 0x340 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c1       	rjmp	.+810    	; 0x340 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c1       	rjmp	.+806    	; 0x340 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c1       	rjmp	.+802    	; 0x340 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c1       	rjmp	.+798    	; 0x340 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c1       	rjmp	.+794    	; 0x340 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c1       	rjmp	.+790    	; 0x340 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c1       	rjmp	.+786    	; 0x340 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c1       	rjmp	.+782    	; 0x340 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c1       	rjmp	.+778    	; 0x340 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__vector_14>
      3c:	81 c1       	rjmp	.+770    	; 0x340 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c1       	rjmp	.+766    	; 0x340 <__bad_interrupt>
      42:	00 00       	nop
      44:	7d c1       	rjmp	.+762    	; 0x340 <__bad_interrupt>
      46:	00 00       	nop
      48:	7b c1       	rjmp	.+758    	; 0x340 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c1       	rjmp	.+754    	; 0x340 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c1       	rjmp	.+750    	; 0x340 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c1       	rjmp	.+746    	; 0x340 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c1       	rjmp	.+742    	; 0x340 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c1       	rjmp	.+738    	; 0x340 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c1       	rjmp	.+734    	; 0x340 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c1       	rjmp	.+730    	; 0x340 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c1       	rjmp	.+726    	; 0x340 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c1       	rjmp	.+722    	; 0x340 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c1       	rjmp	.+718    	; 0x340 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c1       	rjmp	.+714    	; 0x340 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c1       	rjmp	.+710    	; 0x340 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c1       	rjmp	.+706    	; 0x340 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c1       	rjmp	.+702    	; 0x340 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c1       	rjmp	.+698    	; 0x340 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c1       	rjmp	.+694    	; 0x340 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c1       	rjmp	.+690    	; 0x340 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c1       	rjmp	.+686    	; 0x340 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c1       	rjmp	.+682    	; 0x340 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c1       	rjmp	.+678    	; 0x340 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c1       	rjmp	.+674    	; 0x340 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c1       	rjmp	.+670    	; 0x340 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c1       	rjmp	.+666    	; 0x340 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c1       	rjmp	.+662    	; 0x340 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c1       	rjmp	.+658    	; 0x340 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c1       	rjmp	.+654    	; 0x340 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c1       	rjmp	.+650    	; 0x340 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c1       	rjmp	.+646    	; 0x340 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__vector_47>
      c0:	3f c1       	rjmp	.+638    	; 0x340 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c1       	rjmp	.+634    	; 0x340 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c1       	rjmp	.+630    	; 0x340 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c1       	rjmp	.+626    	; 0x340 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c1       	rjmp	.+622    	; 0x340 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c1       	rjmp	.+618    	; 0x340 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c1       	rjmp	.+614    	; 0x340 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c1       	rjmp	.+610    	; 0x340 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c1       	rjmp	.+606    	; 0x340 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2d c1       	rjmp	.+602    	; 0x340 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__vector_58>
      ec:	29 c1       	rjmp	.+594    	; 0x340 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	27 c1       	rjmp	.+590    	; 0x340 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	25 c1       	rjmp	.+586    	; 0x340 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	23 c1       	rjmp	.+582    	; 0x340 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	21 c1       	rjmp	.+578    	; 0x340 <__bad_interrupt>
      fe:	00 00       	nop
     100:	1f c1       	rjmp	.+574    	; 0x340 <__bad_interrupt>
     102:	00 00       	nop
     104:	1d c1       	rjmp	.+570    	; 0x340 <__bad_interrupt>
     106:	00 00       	nop
     108:	1b c1       	rjmp	.+566    	; 0x340 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	19 c1       	rjmp	.+562    	; 0x340 <__bad_interrupt>
     10e:	00 00       	nop
     110:	17 c1       	rjmp	.+558    	; 0x340 <__bad_interrupt>
     112:	00 00       	nop
     114:	15 c1       	rjmp	.+554    	; 0x340 <__bad_interrupt>
     116:	00 00       	nop
     118:	13 c1       	rjmp	.+550    	; 0x340 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	3d c1       	rjmp	.+634    	; 0x398 <__vector_71>
     11e:	00 00       	nop
     120:	78 c1       	rjmp	.+752    	; 0x412 <__vector_72>
     122:	00 00       	nop
     124:	b3 c1       	rjmp	.+870    	; 0x48c <__vector_73>
     126:	00 00       	nop
     128:	ee c1       	rjmp	.+988    	; 0x506 <__vector_74>
     12a:	00 00       	nop
     12c:	09 c1       	rjmp	.+530    	; 0x340 <__bad_interrupt>
     12e:	00 00       	nop
     130:	07 c1       	rjmp	.+526    	; 0x340 <__bad_interrupt>
     132:	00 00       	nop
     134:	05 c1       	rjmp	.+522    	; 0x340 <__bad_interrupt>
     136:	00 00       	nop
     138:	03 c1       	rjmp	.+518    	; 0x340 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	01 c1       	rjmp	.+514    	; 0x340 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ff c0       	rjmp	.+510    	; 0x340 <__bad_interrupt>
     142:	00 00       	nop
     144:	fd c0       	rjmp	.+506    	; 0x340 <__bad_interrupt>
     146:	00 00       	nop
     148:	fb c0       	rjmp	.+502    	; 0x340 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f9 c0       	rjmp	.+498    	; 0x340 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f7 c0       	rjmp	.+494    	; 0x340 <__bad_interrupt>
     152:	00 00       	nop
     154:	f5 c0       	rjmp	.+490    	; 0x340 <__bad_interrupt>
     156:	00 00       	nop
     158:	f3 c0       	rjmp	.+486    	; 0x340 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f1 c0       	rjmp	.+482    	; 0x340 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ef c0       	rjmp	.+478    	; 0x340 <__bad_interrupt>
     162:	00 00       	nop
     164:	ed c0       	rjmp	.+474    	; 0x340 <__bad_interrupt>
     166:	00 00       	nop
     168:	eb c0       	rjmp	.+470    	; 0x340 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__vector_91>
     170:	e7 c0       	rjmp	.+462    	; 0x340 <__bad_interrupt>
     172:	00 00       	nop
     174:	e5 c0       	rjmp	.+458    	; 0x340 <__bad_interrupt>
     176:	00 00       	nop
     178:	e3 c0       	rjmp	.+454    	; 0x340 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e1 c0       	rjmp	.+450    	; 0x340 <__bad_interrupt>
     17e:	00 00       	nop
     180:	df c0       	rjmp	.+446    	; 0x340 <__bad_interrupt>
     182:	00 00       	nop
     184:	dd c0       	rjmp	.+442    	; 0x340 <__bad_interrupt>
     186:	00 00       	nop
     188:	db c0       	rjmp	.+438    	; 0x340 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d9 c0       	rjmp	.+434    	; 0x340 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d7 c0       	rjmp	.+430    	; 0x340 <__bad_interrupt>
     192:	00 00       	nop
     194:	d5 c0       	rjmp	.+426    	; 0x340 <__bad_interrupt>
     196:	00 00       	nop
     198:	d3 c0       	rjmp	.+422    	; 0x340 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d1 c0       	rjmp	.+418    	; 0x340 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	cf c0       	rjmp	.+414    	; 0x340 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	cd c0       	rjmp	.+410    	; 0x340 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	cb c0       	rjmp	.+406    	; 0x340 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c9 c0       	rjmp	.+402    	; 0x340 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c7 c0       	rjmp	.+398    	; 0x340 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c5 c0       	rjmp	.+394    	; 0x340 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c3 c0       	rjmp	.+390    	; 0x340 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c1 c0       	rjmp	.+386    	; 0x340 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	bf c0       	rjmp	.+382    	; 0x340 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	bd c0       	rjmp	.+378    	; 0x340 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	bb c0       	rjmp	.+374    	; 0x340 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b9 c0       	rjmp	.+370    	; 0x340 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b7 c0       	rjmp	.+366    	; 0x340 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b5 c0       	rjmp	.+362    	; 0x340 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b3 c0       	rjmp	.+358    	; 0x340 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b1 c0       	rjmp	.+354    	; 0x340 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	af c0       	rjmp	.+350    	; 0x340 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	ad c0       	rjmp	.+346    	; 0x340 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ab c0       	rjmp	.+342    	; 0x340 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a9 c0       	rjmp	.+338    	; 0x340 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a7 c0       	rjmp	.+334    	; 0x340 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a5 c0       	rjmp	.+330    	; 0x340 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a3 c0       	rjmp	.+326    	; 0x340 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	03 6e       	ori	r16, 0xE3	; 227
     1fe:	db 36       	cpi	r29, 0x6B	; 107
     200:	3d 9a       	sbi	0x07, 5	; 7
     202:	99 99       	sbic	0x13, 1	; 19
     204:	99 3d       	cpi	r25, 0xD9	; 217
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	3e 00       	.word	0x003e	; ????
     20c:	00 00       	nop
     20e:	80 3f       	cpi	r24, 0xF0	; 240
     210:	08 4a       	sbci	r16, 0xA8	; 168
     212:	d7 3b       	cpi	r29, 0xB7	; 183
     214:	3b ce       	rjmp	.-906    	; 0xfffffe8c <__eeprom_end+0xff7efe8c>
     216:	01 6e       	ori	r16, 0xE1	; 225
     218:	84 bc       	out	0x24, r8	; 36
     21a:	bf fd       	.word	0xfdbf	; ????
     21c:	c1 2f       	mov	r28, r17
     21e:	3d 6c       	ori	r19, 0xCD	; 205
     220:	74 31       	cpi	r23, 0x14	; 20
     222:	9a bd       	out	0x2a, r25	; 42
     224:	56 83       	std	Z+6, r21	; 0x06
     226:	3d da       	rcall	.-2950   	; 0xfffff6a2 <__eeprom_end+0xff7ef6a2>
     228:	3d 00       	.word	0x003d	; ????
     22a:	c7 7f       	andi	r28, 0xF7	; 247
     22c:	11 be       	out	0x31, r1	; 49
     22e:	d9 e4       	ldi	r29, 0x49	; 73
     230:	bb 4c       	sbci	r27, 0xCB	; 203
     232:	3e 91       	ld	r19, -X
     234:	6b aa       	std	Y+51, r6	; 0x33
     236:	aa be       	out	0x3a, r10	; 58
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	3f 07       	cpc	r19, r31
     23e:	2c 7a       	andi	r18, 0xAC	; 172
     240:	a5 ba       	out	0x15, r10	; 21
     242:	6c c5       	rjmp	.+2776   	; 0xd1c <rb16_write+0x2>
     244:	90 da       	rcall	.-2784   	; 0xfffff766 <__eeprom_end+0xff7ef766>
     246:	3b 93       	.word	0x933b	; ????
     248:	65 fc       	sbrc	r6, 5
     24a:	8b bc       	out	0x2b, r8	; 43
     24c:	53 f8       	bld	r5, 3
     24e:	10 fd       	sbrc	r17, 0
     250:	3c 56       	subi	r19, 0x6C	; 108
     252:	92 83       	std	Z+2, r25	; 0x02
     254:	4d bd       	out	0x2d, r20	; 45
     256:	87 9d       	mul	r24, r7
     258:	3a b6       	in	r3, 0x3a	; 58
     25a:	3d cb       	rjmp	.-2438   	; 0xfffff8d6 <__eeprom_end+0xff7ef8d6>
     25c:	c9 bf       	out	0x39, r28	; 57
     25e:	5b be       	out	0x3b, r5	; 59
     260:	73 da       	rcall	.-2842   	; 0xfffff748 <__eeprom_end+0xff7ef748>
     262:	0f c9       	rjmp	.-3554   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     264:	3f 08       	sbc	r3, r15
     266:	00 00       	nop
     268:	00 be       	out	0x30, r0	; 48
     26a:	92 24       	eor	r9, r2
     26c:	49 12       	cpse	r4, r25
     26e:	3e ab       	std	Y+54, r19	; 0x36
     270:	aa aa       	std	Y+50, r10	; 0x32
     272:	2a be       	out	0x3a, r2	; 58
     274:	cd cc       	rjmp	.-1638   	; 0xfffffc10 <__eeprom_end+0xff7efc10>
     276:	cc 4c       	sbci	r28, 0xCC	; 204
     278:	3e 00       	.word	0x003e	; ????
     27a:	00 00       	nop
     27c:	80 be       	out	0x30, r8	; 48
     27e:	ab aa       	std	Y+51, r10	; 0x33
     280:	aa aa       	std	Y+50, r10	; 0x32
     282:	3e 00       	.word	0x003e	; ????
     284:	00 00       	nop
     286:	00 bf       	out	0x30, r16	; 48
     288:	00 00       	nop
     28a:	00 80       	ld	r0, Z
     28c:	3f 00       	.word	0x003f	; ????
     28e:	00 00       	nop
     290:	00 00       	nop
     292:	08 41       	sbci	r16, 0x18	; 24
     294:	78 d3       	rcall	.+1776   	; 0x986 <usart_init_rs232+0x1c4>
     296:	bb 43       	sbci	r27, 0x3B	; 59
     298:	87 d1       	rcall	.+782    	; 0x5a8 <usart_set_baudrate+0xc>
     29a:	13 3d       	cpi	r17, 0xD3	; 211
     29c:	19 0e       	add	r1, r25
     29e:	3c c3       	rjmp	.+1656   	; 0x918 <usart_init_rs232+0x156>
     2a0:	bd 42       	sbci	r27, 0x2D	; 45
     2a2:	82 ad       	ldd	r24, Z+58	; 0x3a
     2a4:	2b 3e       	cpi	r18, 0xEB	; 235
     2a6:	68 ec       	ldi	r22, 0xC8	; 200
     2a8:	82 76       	andi	r24, 0x62	; 98
     2aa:	be d9       	rcall	.-3204   	; 0xfffff628 <__eeprom_end+0xff7ef628>
     2ac:	8f e1       	ldi	r24, 0x1F	; 31
     2ae:	a9 3e       	cpi	r26, 0xE9	; 233
     2b0:	4c 80       	ldd	r4, Y+4	; 0x04
     2b2:	ef ff       	.word	0xffef	; ????
     2b4:	be 01       	movw	r22, r28
     2b6:	c4 ff       	sbrs	r28, 4
     2b8:	7f 3f       	cpi	r23, 0xFF	; 255
     2ba:	00 00       	nop
     2bc:	00 00       	nop
     2be:	00 07       	cpc	r16, r16
     2c0:	63 42       	sbci	r22, 0x23	; 35
     2c2:	36 b7       	in	r19, 0x36	; 54
     2c4:	9b d8       	rcall	.-3786   	; 0xfffff3fc <__eeprom_end+0xff7ef3fc>
     2c6:	a7 1a       	sub	r10, r23
     2c8:	39 68       	ori	r19, 0x89	; 137
     2ca:	56 18       	sub	r5, r6
     2cc:	ae ba       	out	0x1e, r10	; 30
     2ce:	ab 55       	subi	r26, 0x5B	; 91
     2d0:	8c 1d       	adc	r24, r12
     2d2:	3c b7       	in	r19, 0x3c	; 60
     2d4:	cc 57       	subi	r28, 0x7C	; 124
     2d6:	63 bd       	out	0x23, r22	; 35
     2d8:	6d ed       	ldi	r22, 0xDD	; 221
     2da:	fd 75       	andi	r31, 0x5D	; 93
     2dc:	3e f6       	brtc	.-114    	; 0x26c <__SREG__+0x22d>
     2de:	17 72       	andi	r17, 0x27	; 39
     2e0:	31 bf       	out	0x31, r19	; 49
     2e2:	00 00       	nop
     2e4:	00 80       	ld	r0, Z
     2e6:	3f 00       	.word	0x003f	; ????

000002e8 <__trampolines_end>:
     2e8:	63 64       	ori	r22, 0x43	; 67
     2ea:	69 6e       	ori	r22, 0xE9	; 233
     2ec:	6f 70       	andi	r22, 0x0F	; 15
     2ee:	73 75       	andi	r23, 0x53	; 83
     2f0:	78 58       	subi	r23, 0x88	; 136
     2f2:	5b 00       	.word	0x005b	; ????

000002f4 <__ctors_end>:
     2f4:	11 24       	eor	r1, r1
     2f6:	1f be       	out	0x3f, r1	; 63
     2f8:	cf ef       	ldi	r28, 0xFF	; 255
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	df e3       	ldi	r29, 0x3F	; 63
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	00 e0       	ldi	r16, 0x00	; 0
     302:	0c bf       	out	0x3c, r16	; 60
     304:	18 be       	out	0x38, r1	; 56
     306:	19 be       	out	0x39, r1	; 57
     308:	1a be       	out	0x3a, r1	; 58
     30a:	1b be       	out	0x3b, r1	; 59

0000030c <__do_copy_data>:
     30c:	10 e2       	ldi	r17, 0x20	; 32
     30e:	a0 e0       	ldi	r26, 0x00	; 0
     310:	b0 e2       	ldi	r27, 0x20	; 32
     312:	e4 e3       	ldi	r30, 0x34	; 52
     314:	f9 e4       	ldi	r31, 0x49	; 73
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	0b bf       	out	0x3b, r16	; 59
     31a:	02 c0       	rjmp	.+4      	; 0x320 <__do_copy_data+0x14>
     31c:	07 90       	elpm	r0, Z+
     31e:	0d 92       	st	X+, r0
     320:	a4 3b       	cpi	r26, 0xB4	; 180
     322:	b1 07       	cpc	r27, r17
     324:	d9 f7       	brne	.-10     	; 0x31c <__do_copy_data+0x10>
     326:	1b be       	out	0x3b, r1	; 59

00000328 <__do_clear_bss>:
     328:	21 e2       	ldi	r18, 0x21	; 33
     32a:	a4 eb       	ldi	r26, 0xB4	; 180
     32c:	b0 e2       	ldi	r27, 0x20	; 32
     32e:	01 c0       	rjmp	.+2      	; 0x332 <.do_clear_bss_start>

00000330 <.do_clear_bss_loop>:
     330:	1d 92       	st	X+, r1

00000332 <.do_clear_bss_start>:
     332:	a2 39       	cpi	r26, 0x92	; 146
     334:	b2 07       	cpc	r27, r18
     336:	e1 f7       	brne	.-8      	; 0x330 <.do_clear_bss_loop>
     338:	0e 94 15 12 	call	0x242a	; 0x242a <main>
     33c:	0c 94 98 24 	jmp	0x4930	; 0x4930 <_exit>

00000340 <__bad_interrupt>:
     340:	5f ce       	rjmp	.-834    	; 0x0 <__vectors>

00000342 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	1f 92       	push	r1
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     34c:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <stdio_base>
     350:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <stdio_base+0x1>
     354:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <ptr_get>
     358:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <ptr_get+0x1>
     35c:	be 01       	movw	r22, r28
     35e:	6f 5f       	subi	r22, 0xFF	; 255
     360:	7f 4f       	sbci	r23, 0xFF	; 255
     362:	19 95       	eicall
	return c;
     364:	89 81       	ldd	r24, Y+1	; 0x01
}
     366:	08 2e       	mov	r0, r24
     368:	00 0c       	add	r0, r0
     36a:	99 0b       	sbc	r25, r25
     36c:	0f 90       	pop	r0
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     374:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     376:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <stdio_base>
     37a:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <stdio_base+0x1>
     37e:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <ptr_put>
     382:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <ptr_put+0x1>
     386:	19 95       	eicall
     388:	99 23       	and	r25, r25
     38a:	1c f0       	brlt	.+6      	; 0x392 <_write+0x1e>
		return -1;
	}
	return 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     396:	08 95       	ret

00000398 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	08 b6       	in	r0, 0x38	; 56
     3a4:	0f 92       	push	r0
     3a6:	18 be       	out	0x38, r1	; 56
     3a8:	09 b6       	in	r0, 0x39	; 57
     3aa:	0f 92       	push	r0
     3ac:	19 be       	out	0x39, r1	; 57
     3ae:	0b b6       	in	r0, 0x3b	; 59
     3b0:	0f 92       	push	r0
     3b2:	1b be       	out	0x3b, r1	; 59
     3b4:	2f 93       	push	r18
     3b6:	3f 93       	push	r19
     3b8:	4f 93       	push	r20
     3ba:	5f 93       	push	r21
     3bc:	6f 93       	push	r22
     3be:	7f 93       	push	r23
     3c0:	8f 93       	push	r24
     3c2:	9f 93       	push	r25
     3c4:	af 93       	push	r26
     3c6:	bf 93       	push	r27
     3c8:	ef 93       	push	r30
     3ca:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     3cc:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     3d0:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     3d4:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <adca_callback>
     3d8:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <adca_callback+0x1>
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	19 95       	eicall
}
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	bf 91       	pop	r27
     3ea:	af 91       	pop	r26
     3ec:	9f 91       	pop	r25
     3ee:	8f 91       	pop	r24
     3f0:	7f 91       	pop	r23
     3f2:	6f 91       	pop	r22
     3f4:	5f 91       	pop	r21
     3f6:	4f 91       	pop	r20
     3f8:	3f 91       	pop	r19
     3fa:	2f 91       	pop	r18
     3fc:	0f 90       	pop	r0
     3fe:	0b be       	out	0x3b, r0	; 59
     400:	0f 90       	pop	r0
     402:	09 be       	out	0x39, r0	; 57
     404:	0f 90       	pop	r0
     406:	08 be       	out	0x38, r0	; 56
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	08 b6       	in	r0, 0x38	; 56
     41e:	0f 92       	push	r0
     420:	18 be       	out	0x38, r1	; 56
     422:	09 b6       	in	r0, 0x39	; 57
     424:	0f 92       	push	r0
     426:	19 be       	out	0x39, r1	; 57
     428:	0b b6       	in	r0, 0x3b	; 59
     42a:	0f 92       	push	r0
     42c:	1b be       	out	0x3b, r1	; 59
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	4f 93       	push	r20
     434:	5f 93       	push	r21
     436:	6f 93       	push	r22
     438:	7f 93       	push	r23
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	af 93       	push	r26
     440:	bf 93       	push	r27
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     446:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     44a:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     44e:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <adca_callback>
     452:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <adca_callback+0x1>
     456:	62 e0       	ldi	r22, 0x02	; 2
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	19 95       	eicall
}
     45e:	ff 91       	pop	r31
     460:	ef 91       	pop	r30
     462:	bf 91       	pop	r27
     464:	af 91       	pop	r26
     466:	9f 91       	pop	r25
     468:	8f 91       	pop	r24
     46a:	7f 91       	pop	r23
     46c:	6f 91       	pop	r22
     46e:	5f 91       	pop	r21
     470:	4f 91       	pop	r20
     472:	3f 91       	pop	r19
     474:	2f 91       	pop	r18
     476:	0f 90       	pop	r0
     478:	0b be       	out	0x3b, r0	; 59
     47a:	0f 90       	pop	r0
     47c:	09 be       	out	0x39, r0	; 57
     47e:	0f 90       	pop	r0
     480:	08 be       	out	0x38, r0	; 56
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     48c:	1f 92       	push	r1
     48e:	0f 92       	push	r0
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	0f 92       	push	r0
     494:	11 24       	eor	r1, r1
     496:	08 b6       	in	r0, 0x38	; 56
     498:	0f 92       	push	r0
     49a:	18 be       	out	0x38, r1	; 56
     49c:	09 b6       	in	r0, 0x39	; 57
     49e:	0f 92       	push	r0
     4a0:	19 be       	out	0x39, r1	; 57
     4a2:	0b b6       	in	r0, 0x3b	; 59
     4a4:	0f 92       	push	r0
     4a6:	1b be       	out	0x3b, r1	; 59
     4a8:	2f 93       	push	r18
     4aa:	3f 93       	push	r19
     4ac:	4f 93       	push	r20
     4ae:	5f 93       	push	r21
     4b0:	6f 93       	push	r22
     4b2:	7f 93       	push	r23
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
     4b8:	af 93       	push	r26
     4ba:	bf 93       	push	r27
     4bc:	ef 93       	push	r30
     4be:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     4c0:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     4c4:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     4c8:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <adca_callback>
     4cc:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <adca_callback+0x1>
     4d0:	64 e0       	ldi	r22, 0x04	; 4
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	19 95       	eicall
}
     4d8:	ff 91       	pop	r31
     4da:	ef 91       	pop	r30
     4dc:	bf 91       	pop	r27
     4de:	af 91       	pop	r26
     4e0:	9f 91       	pop	r25
     4e2:	8f 91       	pop	r24
     4e4:	7f 91       	pop	r23
     4e6:	6f 91       	pop	r22
     4e8:	5f 91       	pop	r21
     4ea:	4f 91       	pop	r20
     4ec:	3f 91       	pop	r19
     4ee:	2f 91       	pop	r18
     4f0:	0f 90       	pop	r0
     4f2:	0b be       	out	0x3b, r0	; 59
     4f4:	0f 90       	pop	r0
     4f6:	09 be       	out	0x39, r0	; 57
     4f8:	0f 90       	pop	r0
     4fa:	08 be       	out	0x38, r0	; 56
     4fc:	0f 90       	pop	r0
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	0f 90       	pop	r0
     502:	1f 90       	pop	r1
     504:	18 95       	reti

00000506 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     506:	1f 92       	push	r1
     508:	0f 92       	push	r0
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	0f 92       	push	r0
     50e:	11 24       	eor	r1, r1
     510:	08 b6       	in	r0, 0x38	; 56
     512:	0f 92       	push	r0
     514:	18 be       	out	0x38, r1	; 56
     516:	09 b6       	in	r0, 0x39	; 57
     518:	0f 92       	push	r0
     51a:	19 be       	out	0x39, r1	; 57
     51c:	0b b6       	in	r0, 0x3b	; 59
     51e:	0f 92       	push	r0
     520:	1b be       	out	0x3b, r1	; 59
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     53a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     53e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     542:	e0 91 0e 21 	lds	r30, 0x210E	; 0x80210e <adca_callback>
     546:	f0 91 0f 21 	lds	r31, 0x210F	; 0x80210f <adca_callback+0x1>
     54a:	68 e0       	ldi	r22, 0x08	; 8
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	19 95       	eicall
}
     552:	ff 91       	pop	r31
     554:	ef 91       	pop	r30
     556:	bf 91       	pop	r27
     558:	af 91       	pop	r26
     55a:	9f 91       	pop	r25
     55c:	8f 91       	pop	r24
     55e:	7f 91       	pop	r23
     560:	6f 91       	pop	r22
     562:	5f 91       	pop	r21
     564:	4f 91       	pop	r20
     566:	3f 91       	pop	r19
     568:	2f 91       	pop	r18
     56a:	0f 90       	pop	r0
     56c:	0b be       	out	0x3b, r0	; 59
     56e:	0f 90       	pop	r0
     570:	09 be       	out	0x39, r0	; 57
     572:	0f 90       	pop	r0
     574:	08 be       	out	0x38, r0	; 56
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     580:	fc 01       	movw	r30, r24
     582:	91 81       	ldd	r25, Z+1	; 0x01
     584:	95 ff       	sbrs	r25, 5
     586:	fd cf       	rjmp	.-6      	; 0x582 <usart_putchar+0x2>
     588:	60 83       	st	Z, r22
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	08 95       	ret

00000590 <usart_getchar>:
     590:	fc 01       	movw	r30, r24
     592:	91 81       	ldd	r25, Z+1	; 0x01
     594:	99 23       	and	r25, r25
     596:	ec f7       	brge	.-6      	; 0x592 <usart_getchar+0x2>
     598:	80 81       	ld	r24, Z
     59a:	08 95       	ret

0000059c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     59c:	4f 92       	push	r4
     59e:	5f 92       	push	r5
     5a0:	6f 92       	push	r6
     5a2:	7f 92       	push	r7
     5a4:	8f 92       	push	r8
     5a6:	9f 92       	push	r9
     5a8:	af 92       	push	r10
     5aa:	bf 92       	push	r11
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	7c 01       	movw	r14, r24
     5b8:	4a 01       	movw	r8, r20
     5ba:	5b 01       	movw	r10, r22
     5bc:	28 01       	movw	r4, r16
     5be:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     5c0:	fc 01       	movw	r30, r24
     5c2:	84 81       	ldd	r24, Z+4	; 0x04
     5c4:	82 ff       	sbrs	r24, 2
     5c6:	16 c0       	rjmp	.+44     	; 0x5f4 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     5c8:	d9 01       	movw	r26, r18
     5ca:	c8 01       	movw	r24, r16
     5cc:	68 94       	set
     5ce:	12 f8       	bld	r1, 2
     5d0:	b6 95       	lsr	r27
     5d2:	a7 95       	ror	r26
     5d4:	97 95       	ror	r25
     5d6:	87 95       	ror	r24
     5d8:	16 94       	lsr	r1
     5da:	d1 f7       	brne	.-12     	; 0x5d0 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     5dc:	b9 01       	movw	r22, r18
     5de:	a8 01       	movw	r20, r16
     5e0:	03 2e       	mov	r0, r19
     5e2:	36 e1       	ldi	r19, 0x16	; 22
     5e4:	76 95       	lsr	r23
     5e6:	67 95       	ror	r22
     5e8:	57 95       	ror	r21
     5ea:	47 95       	ror	r20
     5ec:	3a 95       	dec	r19
     5ee:	d1 f7       	brne	.-12     	; 0x5e4 <usart_set_baudrate+0x48>
     5f0:	30 2d       	mov	r19, r0
     5f2:	15 c0       	rjmp	.+42     	; 0x61e <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     5f4:	d9 01       	movw	r26, r18
     5f6:	c8 01       	movw	r24, r16
     5f8:	68 94       	set
     5fa:	13 f8       	bld	r1, 3
     5fc:	b6 95       	lsr	r27
     5fe:	a7 95       	ror	r26
     600:	97 95       	ror	r25
     602:	87 95       	ror	r24
     604:	16 94       	lsr	r1
     606:	d1 f7       	brne	.-12     	; 0x5fc <usart_set_baudrate+0x60>
		min_rate /= 2;
     608:	b9 01       	movw	r22, r18
     60a:	a8 01       	movw	r20, r16
     60c:	03 2e       	mov	r0, r19
     60e:	37 e1       	ldi	r19, 0x17	; 23
     610:	76 95       	lsr	r23
     612:	67 95       	ror	r22
     614:	57 95       	ror	r21
     616:	47 95       	ror	r20
     618:	3a 95       	dec	r19
     61a:	d1 f7       	brne	.-12     	; 0x610 <usart_set_baudrate+0x74>
     61c:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     61e:	88 15       	cp	r24, r8
     620:	99 05       	cpc	r25, r9
     622:	aa 05       	cpc	r26, r10
     624:	bb 05       	cpc	r27, r11
     626:	08 f4       	brcc	.+2      	; 0x62a <usart_set_baudrate+0x8e>
     628:	a6 c0       	rjmp	.+332    	; 0x776 <usart_set_baudrate+0x1da>
     62a:	84 16       	cp	r8, r20
     62c:	95 06       	cpc	r9, r21
     62e:	a6 06       	cpc	r10, r22
     630:	b7 06       	cpc	r11, r23
     632:	08 f4       	brcc	.+2      	; 0x636 <usart_set_baudrate+0x9a>
     634:	a2 c0       	rjmp	.+324    	; 0x77a <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     636:	f7 01       	movw	r30, r14
     638:	84 81       	ldd	r24, Z+4	; 0x04
     63a:	82 fd       	sbrc	r24, 2
     63c:	04 c0       	rjmp	.+8      	; 0x646 <usart_set_baudrate+0xaa>
		baud *= 2;
     63e:	88 0c       	add	r8, r8
     640:	99 1c       	adc	r9, r9
     642:	aa 1c       	adc	r10, r10
     644:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     646:	c3 01       	movw	r24, r6
     648:	b2 01       	movw	r22, r4
     64a:	a5 01       	movw	r20, r10
     64c:	94 01       	movw	r18, r8
     64e:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     652:	2f 3f       	cpi	r18, 0xFF	; 255
     654:	31 05       	cpc	r19, r1
     656:	41 05       	cpc	r20, r1
     658:	51 05       	cpc	r21, r1
     65a:	08 f4       	brcc	.+2      	; 0x65e <usart_set_baudrate+0xc2>
     65c:	90 c0       	rjmp	.+288    	; 0x77e <usart_set_baudrate+0x1e2>
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	a0 e0       	ldi	r26, 0x00	; 0
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	c9 ef       	ldi	r28, 0xF9	; 249
     668:	05 c0       	rjmp	.+10     	; 0x674 <usart_set_baudrate+0xd8>
     66a:	28 17       	cp	r18, r24
     66c:	39 07       	cpc	r19, r25
     66e:	4a 07       	cpc	r20, r26
     670:	5b 07       	cpc	r21, r27
     672:	58 f0       	brcs	.+22     	; 0x68a <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	aa 1f       	adc	r26, r26
     67a:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     67c:	cd 3f       	cpi	r28, 0xFD	; 253
     67e:	0c f4       	brge	.+2      	; 0x682 <usart_set_baudrate+0xe6>
			limit |= 1;
     680:	81 60       	ori	r24, 0x01	; 1
     682:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     684:	c7 30       	cpi	r28, 0x07	; 7
     686:	89 f7       	brne	.-30     	; 0x66a <usart_set_baudrate+0xce>
     688:	4f c0       	rjmp	.+158    	; 0x728 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     68a:	cc 23       	and	r28, r28
     68c:	0c f0       	brlt	.+2      	; 0x690 <usart_set_baudrate+0xf4>
     68e:	4c c0       	rjmp	.+152    	; 0x728 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     690:	d5 01       	movw	r26, r10
     692:	c4 01       	movw	r24, r8
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	aa 1f       	adc	r26, r26
     69a:	bb 1f       	adc	r27, r27
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	aa 1f       	adc	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	aa 1f       	adc	r26, r26
     6aa:	bb 1f       	adc	r27, r27
     6ac:	48 1a       	sub	r4, r24
     6ae:	59 0a       	sbc	r5, r25
     6b0:	6a 0a       	sbc	r6, r26
     6b2:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     6b4:	ce 3f       	cpi	r28, 0xFE	; 254
     6b6:	f4 f4       	brge	.+60     	; 0x6f4 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     6b8:	8d ef       	ldi	r24, 0xFD	; 253
     6ba:	9f ef       	ldi	r25, 0xFF	; 255
     6bc:	8c 1b       	sub	r24, r28
     6be:	91 09       	sbc	r25, r1
     6c0:	c7 fd       	sbrc	r28, 7
     6c2:	93 95       	inc	r25
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <usart_set_baudrate+0x132>
     6c6:	44 0c       	add	r4, r4
     6c8:	55 1c       	adc	r5, r5
     6ca:	66 1c       	adc	r6, r6
     6cc:	77 1c       	adc	r7, r7
     6ce:	8a 95       	dec	r24
     6d0:	d2 f7       	brpl	.-12     	; 0x6c6 <usart_set_baudrate+0x12a>
     6d2:	d5 01       	movw	r26, r10
     6d4:	c4 01       	movw	r24, r8
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	bc 01       	movw	r22, r24
     6e0:	cd 01       	movw	r24, r26
     6e2:	64 0d       	add	r22, r4
     6e4:	75 1d       	adc	r23, r5
     6e6:	86 1d       	adc	r24, r6
     6e8:	97 1d       	adc	r25, r7
     6ea:	a5 01       	movw	r20, r10
     6ec:	94 01       	movw	r18, r8
     6ee:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <__udivmodsi4>
     6f2:	37 c0       	rjmp	.+110    	; 0x762 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	8c 0f       	add	r24, r28
     6f8:	a5 01       	movw	r20, r10
     6fa:	94 01       	movw	r18, r8
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <usart_set_baudrate+0x16a>
     6fe:	22 0f       	add	r18, r18
     700:	33 1f       	adc	r19, r19
     702:	44 1f       	adc	r20, r20
     704:	55 1f       	adc	r21, r21
     706:	8a 95       	dec	r24
     708:	d2 f7       	brpl	.-12     	; 0x6fe <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     70a:	da 01       	movw	r26, r20
     70c:	c9 01       	movw	r24, r18
     70e:	b6 95       	lsr	r27
     710:	a7 95       	ror	r26
     712:	97 95       	ror	r25
     714:	87 95       	ror	r24
     716:	bc 01       	movw	r22, r24
     718:	cd 01       	movw	r24, r26
     71a:	64 0d       	add	r22, r4
     71c:	75 1d       	adc	r23, r5
     71e:	86 1d       	adc	r24, r6
     720:	97 1d       	adc	r25, r7
     722:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <__udivmodsi4>
     726:	1d c0       	rjmp	.+58     	; 0x762 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	8c 0f       	add	r24, r28
     72c:	a5 01       	movw	r20, r10
     72e:	94 01       	movw	r18, r8
     730:	04 c0       	rjmp	.+8      	; 0x73a <usart_set_baudrate+0x19e>
     732:	22 0f       	add	r18, r18
     734:	33 1f       	adc	r19, r19
     736:	44 1f       	adc	r20, r20
     738:	55 1f       	adc	r21, r21
     73a:	8a 95       	dec	r24
     73c:	d2 f7       	brpl	.-12     	; 0x732 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     73e:	da 01       	movw	r26, r20
     740:	c9 01       	movw	r24, r18
     742:	b6 95       	lsr	r27
     744:	a7 95       	ror	r26
     746:	97 95       	ror	r25
     748:	87 95       	ror	r24
     74a:	bc 01       	movw	r22, r24
     74c:	cd 01       	movw	r24, r26
     74e:	64 0d       	add	r22, r4
     750:	75 1d       	adc	r23, r5
     752:	86 1d       	adc	r24, r6
     754:	97 1d       	adc	r25, r7
     756:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <__udivmodsi4>
     75a:	21 50       	subi	r18, 0x01	; 1
     75c:	31 09       	sbc	r19, r1
     75e:	41 09       	sbc	r20, r1
     760:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     762:	83 2f       	mov	r24, r19
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	c2 95       	swap	r28
     768:	c0 7f       	andi	r28, 0xF0	; 240
     76a:	c8 2b       	or	r28, r24
     76c:	f7 01       	movw	r30, r14
     76e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     770:	26 83       	std	Z+6, r18	; 0x06

	return true;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	18 c0       	rjmp	.+48     	; 0x7a6 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	16 c0       	rjmp	.+44     	; 0x7a6 <usart_set_baudrate+0x20a>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	14 c0       	rjmp	.+40     	; 0x7a6 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     77e:	d5 01       	movw	r26, r10
     780:	c4 01       	movw	r24, r8
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	aa 1f       	adc	r26, r26
     788:	bb 1f       	adc	r27, r27
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	aa 1f       	adc	r26, r26
     790:	bb 1f       	adc	r27, r27
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	aa 1f       	adc	r26, r26
     798:	bb 1f       	adc	r27, r27
     79a:	48 1a       	sub	r4, r24
     79c:	59 0a       	sbc	r5, r25
     79e:	6a 0a       	sbc	r6, r26
     7a0:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7a2:	c9 ef       	ldi	r28, 0xF9	; 249
     7a4:	89 cf       	rjmp	.-238    	; 0x6b8 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	9f 90       	pop	r9
     7b6:	8f 90       	pop	r8
     7b8:	7f 90       	pop	r7
     7ba:	6f 90       	pop	r6
     7bc:	5f 90       	pop	r5
     7be:	4f 90       	pop	r4
     7c0:	08 95       	ret

000007c2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	ec 01       	movw	r28, r24
     7cc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <usart_init_rs232+0x12>
     7d2:	be c0       	rjmp	.+380    	; 0x950 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     7d4:	80 3c       	cpi	r24, 0xC0	; 192
     7d6:	91 05       	cpc	r25, r1
     7d8:	21 f4       	brne	.+8      	; 0x7e2 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     7da:	60 e1       	ldi	r22, 0x10	; 16
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	d8 d3       	rcall	.+1968   	; 0xf90 <sysclk_enable_module>
     7e0:	b7 c0       	rjmp	.+366    	; 0x950 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     7e2:	c1 15       	cp	r28, r1
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	d8 07       	cpc	r29, r24
     7e8:	21 f4       	brne	.+8      	; 0x7f2 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     7ea:	64 e0       	ldi	r22, 0x04	; 4
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	d0 d3       	rcall	.+1952   	; 0xf90 <sysclk_enable_module>
     7f0:	af c0       	rjmp	.+350    	; 0x950 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     7f2:	c0 38       	cpi	r28, 0x80	; 128
     7f4:	e1 e0       	ldi	r30, 0x01	; 1
     7f6:	de 07       	cpc	r29, r30
     7f8:	21 f4       	brne	.+8      	; 0x802 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     7fa:	62 e0       	ldi	r22, 0x02	; 2
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	c8 d3       	rcall	.+1936   	; 0xf90 <sysclk_enable_module>
     800:	a7 c0       	rjmp	.+334    	; 0x950 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     802:	c1 15       	cp	r28, r1
     804:	f1 e0       	ldi	r31, 0x01	; 1
     806:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     808:	21 f4       	brne	.+8      	; 0x812 <usart_init_rs232+0x50>
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	c0 d3       	rcall	.+1920   	; 0xf90 <sysclk_enable_module>
     810:	9f c0       	rjmp	.+318    	; 0x950 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     812:	c0 38       	cpi	r28, 0x80	; 128
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     818:	21 f4       	brne	.+8      	; 0x822 <usart_init_rs232+0x60>
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	b8 d3       	rcall	.+1904   	; 0xf90 <sysclk_enable_module>
     820:	97 c0       	rjmp	.+302    	; 0x950 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     822:	c1 15       	cp	r28, r1
     824:	e2 e0       	ldi	r30, 0x02	; 2
     826:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     828:	21 f4       	brne	.+8      	; 0x832 <usart_init_rs232+0x70>
     82a:	62 e0       	ldi	r22, 0x02	; 2
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	b0 d3       	rcall	.+1888   	; 0xf90 <sysclk_enable_module>
     830:	8f c0       	rjmp	.+286    	; 0x950 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     832:	c0 32       	cpi	r28, 0x20	; 32
     834:	f3 e0       	ldi	r31, 0x03	; 3
     836:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     838:	21 f4       	brne	.+8      	; 0x842 <usart_init_rs232+0x80>
     83a:	64 e0       	ldi	r22, 0x04	; 4
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	a8 d3       	rcall	.+1872   	; 0xf90 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     840:	87 c0       	rjmp	.+270    	; 0x950 <usart_init_rs232+0x18e>
     842:	c1 15       	cp	r28, r1
     844:	88 e0       	ldi	r24, 0x08	; 8
     846:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     848:	21 f4       	brne	.+8      	; 0x852 <usart_init_rs232+0x90>
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	a0 d3       	rcall	.+1856   	; 0xf90 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     850:	7f c0       	rjmp	.+254    	; 0x950 <usart_init_rs232+0x18e>
     852:	c1 15       	cp	r28, r1
     854:	e9 e0       	ldi	r30, 0x09	; 9
     856:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     858:	21 f4       	brne	.+8      	; 0x862 <usart_init_rs232+0xa0>
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	84 e0       	ldi	r24, 0x04	; 4
     85e:	98 d3       	rcall	.+1840   	; 0xf90 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     860:	77 c0       	rjmp	.+238    	; 0x950 <usart_init_rs232+0x18e>
     862:	c1 15       	cp	r28, r1
     864:	fa e0       	ldi	r31, 0x0A	; 10
     866:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     868:	21 f4       	brne	.+8      	; 0x872 <usart_init_rs232+0xb0>
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	85 e0       	ldi	r24, 0x05	; 5
     86e:	90 d3       	rcall	.+1824   	; 0xf90 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     870:	6f c0       	rjmp	.+222    	; 0x950 <usart_init_rs232+0x18e>
     872:	c0 34       	cpi	r28, 0x40	; 64
     874:	88 e0       	ldi	r24, 0x08	; 8
     876:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     878:	21 f4       	brne	.+8      	; 0x882 <usart_init_rs232+0xc0>
     87a:	62 e0       	ldi	r22, 0x02	; 2
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	88 d3       	rcall	.+1808   	; 0xf90 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     880:	67 c0       	rjmp	.+206    	; 0x950 <usart_init_rs232+0x18e>
     882:	c0 34       	cpi	r28, 0x40	; 64
     884:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     886:	de 07       	cpc	r29, r30
     888:	21 f4       	brne	.+8      	; 0x892 <usart_init_rs232+0xd0>
     88a:	62 e0       	ldi	r22, 0x02	; 2
     88c:	84 e0       	ldi	r24, 0x04	; 4
     88e:	80 d3       	rcall	.+1792   	; 0xf90 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     890:	5f c0       	rjmp	.+190    	; 0x950 <usart_init_rs232+0x18e>
     892:	c0 39       	cpi	r28, 0x90	; 144
     894:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     896:	df 07       	cpc	r29, r31
     898:	21 f4       	brne	.+8      	; 0x8a2 <usart_init_rs232+0xe0>
     89a:	64 e0       	ldi	r22, 0x04	; 4
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	78 d3       	rcall	.+1776   	; 0xf90 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     8a0:	57 c0       	rjmp	.+174    	; 0x950 <usart_init_rs232+0x18e>
     8a2:	c0 39       	cpi	r28, 0x90	; 144
     8a4:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     8a6:	d8 07       	cpc	r29, r24
     8a8:	21 f4       	brne	.+8      	; 0x8b2 <usart_init_rs232+0xf0>
     8aa:	64 e0       	ldi	r22, 0x04	; 4
     8ac:	84 e0       	ldi	r24, 0x04	; 4
     8ae:	70 d3       	rcall	.+1760   	; 0xf90 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     8b0:	4f c0       	rjmp	.+158    	; 0x950 <usart_init_rs232+0x18e>
     8b2:	c0 39       	cpi	r28, 0x90	; 144
     8b4:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     8b6:	de 07       	cpc	r29, r30
     8b8:	21 f4       	brne	.+8      	; 0x8c2 <usart_init_rs232+0x100>
     8ba:	64 e0       	ldi	r22, 0x04	; 4
     8bc:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     8be:	68 d3       	rcall	.+1744   	; 0xf90 <sysclk_enable_module>
     8c0:	47 c0       	rjmp	.+142    	; 0x950 <usart_init_rs232+0x18e>
     8c2:	c0 3c       	cpi	r28, 0xC0	; 192
     8c4:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     8c6:	df 07       	cpc	r29, r31
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <usart_init_rs232+0x110>
     8ca:	68 e0       	ldi	r22, 0x08	; 8
     8cc:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     8ce:	60 d3       	rcall	.+1728   	; 0xf90 <sysclk_enable_module>
     8d0:	3f c0       	rjmp	.+126    	; 0x950 <usart_init_rs232+0x18e>
     8d2:	c0 3c       	cpi	r28, 0xC0	; 192
     8d4:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     8d6:	d8 07       	cpc	r29, r24
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <usart_init_rs232+0x120>
     8da:	68 e0       	ldi	r22, 0x08	; 8
     8dc:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     8de:	58 d3       	rcall	.+1712   	; 0xf90 <sysclk_enable_module>
     8e0:	37 c0       	rjmp	.+110    	; 0x950 <usart_init_rs232+0x18e>
     8e2:	c0 3a       	cpi	r28, 0xA0	; 160
     8e4:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     8e6:	de 07       	cpc	r29, r30
     8e8:	21 f4       	brne	.+8      	; 0x8f2 <usart_init_rs232+0x130>
     8ea:	60 e1       	ldi	r22, 0x10	; 16
     8ec:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     8ee:	50 d3       	rcall	.+1696   	; 0xf90 <sysclk_enable_module>
     8f0:	2f c0       	rjmp	.+94     	; 0x950 <usart_init_rs232+0x18e>
     8f2:	c0 3a       	cpi	r28, 0xA0	; 160
     8f4:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     8f6:	df 07       	cpc	r29, r31
     8f8:	21 f4       	brne	.+8      	; 0x902 <usart_init_rs232+0x140>
     8fa:	60 e1       	ldi	r22, 0x10	; 16
     8fc:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     8fe:	48 d3       	rcall	.+1680   	; 0xf90 <sysclk_enable_module>
     900:	27 c0       	rjmp	.+78     	; 0x950 <usart_init_rs232+0x18e>
     902:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     904:	8a e0       	ldi	r24, 0x0A	; 10
     906:	d8 07       	cpc	r29, r24
     908:	21 f4       	brne	.+8      	; 0x912 <usart_init_rs232+0x150>
     90a:	60 e1       	ldi	r22, 0x10	; 16
     90c:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     90e:	40 d3       	rcall	.+1664   	; 0xf90 <sysclk_enable_module>
     910:	1f c0       	rjmp	.+62     	; 0x950 <usart_init_rs232+0x18e>
     912:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     914:	e8 e0       	ldi	r30, 0x08	; 8
     916:	de 07       	cpc	r29, r30
     918:	21 f4       	brne	.+8      	; 0x922 <usart_init_rs232+0x160>
     91a:	60 e2       	ldi	r22, 0x20	; 32
     91c:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     91e:	38 d3       	rcall	.+1648   	; 0xf90 <sysclk_enable_module>
     920:	17 c0       	rjmp	.+46     	; 0x950 <usart_init_rs232+0x18e>
     922:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     924:	f9 e0       	ldi	r31, 0x09	; 9
     926:	df 07       	cpc	r29, r31
     928:	21 f4       	brne	.+8      	; 0x932 <usart_init_rs232+0x170>
     92a:	60 e2       	ldi	r22, 0x20	; 32
     92c:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     92e:	30 d3       	rcall	.+1632   	; 0xf90 <sysclk_enable_module>
     930:	0f c0       	rjmp	.+30     	; 0x950 <usart_init_rs232+0x18e>
     932:	c0 38       	cpi	r28, 0x80	; 128
     934:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     936:	d8 07       	cpc	r29, r24
     938:	21 f4       	brne	.+8      	; 0x942 <usart_init_rs232+0x180>
     93a:	60 e4       	ldi	r22, 0x40	; 64
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	28 d3       	rcall	.+1616   	; 0xf90 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     940:	07 c0       	rjmp	.+14     	; 0x950 <usart_init_rs232+0x18e>
     942:	c0 3a       	cpi	r28, 0xA0	; 160
     944:	e4 e0       	ldi	r30, 0x04	; 4
     946:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     948:	19 f4       	brne	.+6      	; 0x950 <usart_init_rs232+0x18e>
     94a:	60 e4       	ldi	r22, 0x40	; 64
     94c:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     94e:	20 d3       	rcall	.+1600   	; 0xf90 <sysclk_enable_module>
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     954:	8d 83       	std	Y+5, r24	; 0x05
     956:	f8 01       	movw	r30, r16
     958:	95 81       	ldd	r25, Z+5	; 0x05
     95a:	84 81       	ldd	r24, Z+4	; 0x04
     95c:	89 2b       	or	r24, r25
     95e:	96 81       	ldd	r25, Z+6	; 0x06
     960:	91 11       	cpse	r25, r1
     962:	98 e0       	ldi	r25, 0x08	; 8
     964:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     966:	8d 83       	std	Y+5, r24	; 0x05
     968:	f8 01       	movw	r30, r16
     96a:	40 81       	ld	r20, Z
     96c:	51 81       	ldd	r21, Z+1	; 0x01
     96e:	62 81       	ldd	r22, Z+2	; 0x02
     970:	73 81       	ldd	r23, Z+3	; 0x03
     972:	00 e0       	ldi	r16, 0x00	; 0
     974:	18 e4       	ldi	r17, 0x48	; 72
     976:	28 ee       	ldi	r18, 0xE8	; 232
     978:	31 e0       	ldi	r19, 0x01	; 1
     97a:	ce 01       	movw	r24, r28
     97c:	0f de       	rcall	.-994    	; 0x59c <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	98 60       	ori	r25, 0x08	; 8
     982:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     984:	9c 81       	ldd	r25, Y+4	; 0x04
     986:	90 61       	ori	r25, 0x10	; 16
     988:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <bno085_read>:
	TCC0.CTRLA = 0x05; // divisor set to 64
	TCC0.PER = 25000; // 20 Hz
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

void bno085_read(uint8_t* data){
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	8c 01       	movw	r16, r24
	spi_select(BNO085_SS_PIN);
     99e:	88 e0       	ldi	r24, 0x08	; 8
     9a0:	1d d1       	rcall	.+570    	; 0xbdc <spi_select>
     9a2:	e8 01       	movw	r28, r16
     9a4:	0e 5e       	subi	r16, 0xEE	; 238
     9a6:	1f 4f       	sbci	r17, 0xFF	; 255
	for(uint8_t i = 0; i < 18; i++){
		data[i] = spi_read();
     9a8:	1f d1       	rcall	.+574    	; 0xbe8 <spi_read>
     9aa:	89 93       	st	Y+, r24
     9ac:	c0 17       	cp	r28, r16
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

void bno085_read(uint8_t* data){
	spi_select(BNO085_SS_PIN);
	for(uint8_t i = 0; i < 18; i++){
     9ae:	d1 07       	cpc	r29, r17
     9b0:	d9 f7       	brne	.-10     	; 0x9a8 <bno085_read+0x14>
		data[i] = spi_read();
	}
	spi_select(BNO085_SS_PIN);
     9b2:	88 e0       	ldi	r24, 0x08	; 8
     9b4:	13 d1       	rcall	.+550    	; 0xbdc <spi_select>
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	08 95       	ret

000009c0 <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     9c0:	08 95       	ret

000009c2 <cam_switch>:
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
	cam_switch();
}

void cam_switch(void){
	PORTA.OUT ^= PIN3_bm; // Changes A3 from high to low or vice-versa
     9c2:	e0 e0       	ldi	r30, 0x00	; 0
     9c4:	f6 e0       	ldi	r31, 0x06	; 6
     9c6:	94 81       	ldd	r25, Z+4	; 0x04
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	89 27       	eor	r24, r25
     9cc:	84 83       	std	Z+4, r24	; 0x04
     9ce:	08 95       	ret

000009d0 <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= PIN3_bm; // Sets A3 to output
     9d0:	e0 e0       	ldi	r30, 0x00	; 0
     9d2:	f6 e0       	ldi	r31, 0x06	; 6
     9d4:	80 81       	ld	r24, Z
     9d6:	88 60       	ori	r24, 0x08	; 8
     9d8:	80 83       	st	Z, r24
	cam_switch();
     9da:	f3 cf       	rjmp	.-26     	; 0x9c2 <cam_switch>
     9dc:	08 95       	ret

000009de <thermistor_init>:

#include <asf.h>
#include "thermistor.h"

void thermistor_init(void)
{
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9e8:	62 e0       	ldi	r22, 0x02	; 2
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	d1 d2       	rcall	.+1442   	; 0xf90 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&THERMISTOR_SERIAL);
	THERMISTOR_SERIAL.CTRLA = 0x01; // enable the ADC
     9ee:	c0 e0       	ldi	r28, 0x00	; 0
     9f0:	d2 e0       	ldi	r29, 0x02	; 2
     9f2:	ff 24       	eor	r15, r15
     9f4:	f3 94       	inc	r15
     9f6:	f8 82       	st	Y, r15
	THERMISTOR_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
     9f8:	19 82       	std	Y+1, r1	; 0x01
	THERMISTOR_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
     9fa:	80 e1       	ldi	r24, 0x10	; 16
     9fc:	8a 83       	std	Y+2, r24	; 0x02
	THERMISTOR_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
     9fe:	85 e0       	ldi	r24, 0x05	; 5
     a00:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     a02:	61 e2       	ldi	r22, 0x21	; 33
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	d9 d2       	rcall	.+1458   	; 0xfbc <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     a0a:	08 2f       	mov	r16, r24
     a0c:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
     a0e:	10 2f       	mov	r17, r16
     a10:	00 27       	eor	r16, r16
     a12:	60 e2       	ldi	r22, 0x20	; 32
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	d1 d2       	rcall	.+1442   	; 0xfbc <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
     a1a:	08 2b       	or	r16, r24
	THERMISTOR_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
     a1c:	0c 87       	std	Y+12, r16	; 0x0c
     a1e:	1d 87       	std	Y+13, r17	; 0x0d
	
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL = 0x01; // single ended input
     a20:	f8 a2       	std	Y+32, r15	; 0x20
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.MUXCTRL = THERMISTOR_PIN; // reading ADCA pin 0	
     a22:	19 a2       	std	Y+33, r1	; 0x21
}
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	ff 90       	pop	r15
     a2e:	08 95       	ret

00000a30 <thermistor_read>:

uint16_t thermistor_read(void)
{
	THERMISTOR_SERIAL.THERMISTOR_CHANNEL.CTRL |= 0x80; // start the conversion
     a30:	e0 e0       	ldi	r30, 0x00	; 0
     a32:	f2 e0       	ldi	r31, 0x02	; 2
     a34:	80 a1       	ldd	r24, Z+32	; 0x20
     a36:	80 68       	ori	r24, 0x80	; 128
     a38:	80 a3       	std	Z+32, r24	; 0x20
	while(!(THERMISTOR_SERIAL.THERMISTOR_CHANNEL.INTFLAGS)); // wait until the conversion is done
     a3a:	83 a1       	ldd	r24, Z+35	; 0x23
     a3c:	88 23       	and	r24, r24
     a3e:	e9 f3       	breq	.-6      	; 0xa3a <thermistor_read+0xa>
	return THERMISTOR_SERIAL.THERMISTOR_CHANNEL.RES; // return the 12-bit result as a uint16_t
     a40:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     a44:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     a48:	08 95       	ret

00000a4a <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	27 97       	sbiw	r28, 0x07	; 7
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     a58:	60 e2       	ldi	r22, 0x20	; 32
     a5a:	84 e0       	ldi	r24, 0x04	; 4
     a5c:	99 d2       	rcall	.+1330   	; 0xf90 <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     a5e:	e0 e6       	ldi	r30, 0x60	; 96
     a60:	f6 e0       	ldi	r31, 0x06	; 6
     a62:	80 81       	ld	r24, Z
     a64:	80 68       	ori	r24, 0x80	; 128
     a66:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     a68:	e6 e0       	ldi	r30, 0x06	; 6
     a6a:	f0 e2       	ldi	r31, 0x20	; 32
     a6c:	84 81       	ldd	r24, Z+4	; 0x04
     a6e:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     a70:	85 81       	ldd	r24, Z+5	; 0x05
     a72:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     a74:	86 81       	ldd	r24, Z+6	; 0x06
     a76:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     a78:	80 81       	ld	r24, Z
     a7a:	91 81       	ldd	r25, Z+1	; 0x01
     a7c:	a2 81       	ldd	r26, Z+2	; 0x02
     a7e:	b3 81       	ldd	r27, Z+3	; 0x03
     a80:	89 83       	std	Y+1, r24	; 0x01
     a82:	9a 83       	std	Y+2, r25	; 0x02
     a84:	ab 83       	std	Y+3, r26	; 0x03
     a86:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     a88:	60 e2       	ldi	r22, 0x20	; 32
     a8a:	84 e0       	ldi	r24, 0x04	; 4
     a8c:	81 d2       	rcall	.+1282   	; 0xf90 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     a8e:	be 01       	movw	r22, r28
     a90:	6f 5f       	subi	r22, 0xFF	; 255
     a92:	7f 4f       	sbci	r23, 0xFF	; 255
     a94:	80 eb       	ldi	r24, 0xB0	; 176
     a96:	99 e0       	ldi	r25, 0x09	; 9
     a98:	94 de       	rcall	.-728    	; 0x7c2 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     a9a:	27 96       	adiw	r28, 0x07	; 7
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     aa8:	61 50       	subi	r22, 0x01	; 1
     aaa:	71 09       	sbc	r23, r1
     aac:	81 09       	sbc	r24, r1
     aae:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     ab0:	61 15       	cp	r22, r1
     ab2:	71 05       	cpc	r23, r1
     ab4:	81 05       	cpc	r24, r1
     ab6:	91 05       	cpc	r25, r1
     ab8:	b9 f7       	brne	.-18     	; 0xaa8 <__portable_avr_delay_cycles+0x2>
     aba:	08 95       	ret

00000abc <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     abc:	e0 e4       	ldi	r30, 0x40	; 64
     abe:	f6 e0       	ldi	r31, 0x06	; 6
     ac0:	94 81       	ldd	r25, Z+4	; 0x04
     ac2:	80 e1       	ldi	r24, 0x10	; 16
     ac4:	89 27       	eor	r24, r25
     ac6:	84 83       	std	Z+4, r24	; 0x04
     ac8:	08 95       	ret

00000aca <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
     aca:	e0 e4       	ldi	r30, 0x40	; 64
     acc:	f6 e0       	ldi	r31, 0x06	; 6
     ace:	84 81       	ldd	r24, Z+4	; 0x04
     ad0:	80 61       	ori	r24, 0x10	; 16
     ad2:	84 83       	std	Z+4, r24	; 0x04
	delay_ms(5);
     ad4:	6b e2       	ldi	r22, 0x2B	; 43
     ad6:	78 e6       	ldi	r23, 0x68	; 104
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	e4 df       	rcall	.-56     	; 0xaa6 <__portable_avr_delay_cycles>
	
	// Resets the ms5607
	flip_ms5607();
     ade:	ee df       	rcall	.-36     	; 0xabc <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     ae0:	8e e1       	ldi	r24, 0x1E	; 30
     ae2:	8d d0       	rcall	.+282    	; 0xbfe <spi_write>
     ae4:	60 e8       	ldi	r22, 0x80	; 128
	delay_ms(3);
     ae6:	7e e3       	ldi	r23, 0x3E	; 62
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	dc df       	rcall	.-72     	; 0xaa6 <__portable_avr_delay_cycles>
	flip_ms5607();
     aee:	e6 df       	rcall	.-52     	; 0xabc <flip_ms5607>
	delay_ms(2);
     af0:	6b ea       	ldi	r22, 0xAB	; 171
     af2:	79 e2       	ldi	r23, 0x29	; 41
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	d6 cf       	rjmp	.-84     	; 0xaa6 <__portable_avr_delay_cycles>
     afa:	08 95       	ret

00000afc <ms5607_read>:
     afc:	cf 93       	push	r28
}

uint16_t ms5607_read(uint16_t comm)
{
     afe:	df 93       	push	r29
     b00:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     b02:	dc df       	rcall	.-72     	; 0xabc <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     b04:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     b06:	7b d0       	rcall	.+246    	; 0xbfe <spi_write>
     b08:	6f d0       	rcall	.+222    	; 0xbe8 <spi_read>
     b0a:	c8 2f       	mov	r28, r24
     b0c:	d0 e0       	ldi	r29, 0x00	; 0
     b0e:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     b10:	cc 27       	eor	r28, r28
     b12:	6a d0       	rcall	.+212    	; 0xbe8 <spi_read>
     b14:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     b16:	d2 df       	rcall	.-92     	; 0xabc <flip_ms5607>
     b18:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <ms5607_convert_d1>:
     b20:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     b28:	c9 df       	rcall	.-110    	; 0xabc <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     b2a:	88 e4       	ldi	r24, 0x48	; 72
     b2c:	68 d0       	rcall	.+208    	; 0xbfe <spi_write>
	delay_ms(10);
     b2e:	66 e5       	ldi	r22, 0x56	; 86
     b30:	70 ed       	ldi	r23, 0xD0	; 208
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     b36:	b7 df       	rcall	.-146    	; 0xaa6 <__portable_avr_delay_cycles>
     b38:	c1 df       	rcall	.-126    	; 0xabc <flip_ms5607>
	delay_ms(2);
     b3a:	6b ea       	ldi	r22, 0xAB	; 171
     b3c:	79 e2       	ldi	r23, 0x29	; 41
     b3e:	80 e0       	ldi	r24, 0x00	; 0
	flip_ms5607();
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	b1 df       	rcall	.-158    	; 0xaa6 <__portable_avr_delay_cycles>
	spi_write(CMD_MS5607_READ_ADC);
     b44:	bb df       	rcall	.-138    	; 0xabc <flip_ms5607>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	5a d0       	rcall	.+180    	; 0xbfe <spi_write>
	rx_data  = (uint32_t) spi_read()<<16;
     b4a:	4e d0       	rcall	.+156    	; 0xbe8 <spi_read>
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	e1 2c       	mov	r14, r1
     b52:	f1 2c       	mov	r15, r1
     b54:	76 01       	movw	r14, r12
	rx_data |= (uint32_t) spi_read()<<8;
     b56:	dd 24       	eor	r13, r13
     b58:	cc 24       	eor	r12, r12
     b5a:	46 d0       	rcall	.+140    	; 0xbe8 <spi_read>
	rx_data |= spi_read();
     b5c:	d8 2a       	or	r13, r24
     b5e:	44 d0       	rcall	.+136    	; 0xbe8 <spi_read>
     b60:	c8 2a       	or	r12, r24
	flip_ms5607();
     b62:	ac df       	rcall	.-168    	; 0xabc <flip_ms5607>
     b64:	c7 01       	movw	r24, r14
	
	return rx_data;
}
     b66:	b6 01       	movw	r22, r12
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	08 95       	ret

00000b72 <ms5607_convert_d2>:
     b72:	cf 92       	push	r12

uint32_t ms5607_convert_d2(void)
{
     b74:	df 92       	push	r13
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     b7a:	a0 df       	rcall	.-192    	; 0xabc <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     b7c:	88 e5       	ldi	r24, 0x58	; 88
     b7e:	3f d0       	rcall	.+126    	; 0xbfe <spi_write>
	delay_ms(10);
     b80:	66 e5       	ldi	r22, 0x56	; 86
     b82:	70 ed       	ldi	r23, 0xD0	; 208
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     b88:	8e df       	rcall	.-228    	; 0xaa6 <__portable_avr_delay_cycles>
     b8a:	98 df       	rcall	.-208    	; 0xabc <flip_ms5607>
	delay_ms(2);
     b8c:	6b ea       	ldi	r22, 0xAB	; 171
     b8e:	79 e2       	ldi	r23, 0x29	; 41
     b90:	80 e0       	ldi	r24, 0x00	; 0
	flip_ms5607();
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	88 df       	rcall	.-240    	; 0xaa6 <__portable_avr_delay_cycles>
	spi_write(CMD_MS5607_READ_ADC);
     b96:	92 df       	rcall	.-220    	; 0xabc <flip_ms5607>
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	31 d0       	rcall	.+98     	; 0xbfe <spi_write>
	rx_data  = (uint32_t) spi_read()<<16;
     b9c:	25 d0       	rcall	.+74     	; 0xbe8 <spi_read>
     b9e:	c8 2e       	mov	r12, r24
     ba0:	d1 2c       	mov	r13, r1
     ba2:	e1 2c       	mov	r14, r1
     ba4:	f1 2c       	mov	r15, r1
     ba6:	76 01       	movw	r14, r12
	rx_data |= (uint32_t) spi_read()<<8;
     ba8:	dd 24       	eor	r13, r13
     baa:	cc 24       	eor	r12, r12
     bac:	1d d0       	rcall	.+58     	; 0xbe8 <spi_read>
	rx_data |= spi_read();
     bae:	d8 2a       	or	r13, r24
     bb0:	1b d0       	rcall	.+54     	; 0xbe8 <spi_read>
     bb2:	c8 2a       	or	r12, r24
	flip_ms5607();
     bb4:	83 df       	rcall	.-250    	; 0xabc <flip_ms5607>
     bb6:	c7 01       	movw	r24, r14
	
	return rx_data;
}
     bb8:	b6 01       	movw	r22, r12
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	df 90       	pop	r13
     bc0:	cf 90       	pop	r12
     bc2:	08 95       	ret

00000bc4 <spi_init>:
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     bc4:	68 e0       	ldi	r22, 0x08	; 8
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	e3 d1       	rcall	.+966    	; 0xf90 <sysclk_enable_module>
#include "spi_controller.h"

void spi_init(void)
{
	sysclk_enable_peripheral_clock(&SPIC);
	SPIC.CTRL = 0x5C; //enables SPI and puts a prescaler of 16 idling high and transmitting MSB first on rising signal
     bca:	8c e5       	ldi	r24, 0x5C	; 92
     bcc:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
	PORTC.DIR |= 0b10110000; 
     bd0:	e0 e4       	ldi	r30, 0x40	; 64
     bd2:	f6 e0       	ldi	r31, 0x06	; 6
     bd4:	80 81       	ld	r24, Z
     bd6:	80 6b       	ori	r24, 0xB0	; 176
     bd8:	80 83       	st	Z, r24
     bda:	08 95       	ret

00000bdc <spi_select>:
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     bdc:	e0 e4       	ldi	r30, 0x40	; 64
     bde:	f6 e0       	ldi	r31, 0x06	; 6
     be0:	94 81       	ldd	r25, Z+4	; 0x04
     be2:	89 27       	eor	r24, r25
     be4:	84 83       	std	Z+4, r24	; 0x04
     be6:	08 95       	ret

00000be8 <spi_read>:

uint8_t spi_read(void)
{
	uint8_t count = 0;
	uint8_t counter = 100;
	SPIC.DATA = 0xFF; // make the DATA register something we know
     be8:	8f ef       	ldi	r24, 0xFF	; 255
     bea:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7) & (count < counter)){
     bee:	e0 ec       	ldi	r30, 0xC0	; 192
     bf0:	f8 e0       	ldi	r31, 0x08	; 8
     bf2:	82 81       	ldd	r24, Z+2	; 0x02
     bf4:	88 23       	and	r24, r24
     bf6:	ec f7       	brge	.-6      	; 0xbf2 <spi_read+0xa>
		//count++;
	}
	
	return SPIC.DATA; // return the data from this function
     bf8:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     bfc:	08 95       	ret

00000bfe <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     bfe:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     c02:	e0 ec       	ldi	r30, 0xC0	; 192
     c04:	f8 e0       	ldi	r31, 0x08	; 8
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	88 23       	and	r24, r24
     c0a:	ec f7       	brge	.-6      	; 0xc06 <spi_write+0x8>
     c0c:	08 95       	ret

00000c0e <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     c14:	bd dc       	rcall	.-1670   	; 0x590 <usart_getchar>
     c16:	88 83       	st	Y, r24
}
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     c1e:	b0 cc       	rjmp	.-1696   	; 0x580 <usart_putchar>
}
     c20:	08 95       	ret

00000c22 <data_terminal_init>:
#include <asf.h>
#include <string.h>
#include "data_logger.h"

void data_terminal_init()
{
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	27 97       	sbiw	r28, 0x07	; 7
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     c30:	60 e1       	ldi	r22, 0x10	; 16
     c32:	85 e0       	ldi	r24, 0x05	; 5
     c34:	ad d1       	rcall	.+858    	; 0xf90 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     c36:	e0 e8       	ldi	r30, 0x80	; 128
     c38:	f6 e0       	ldi	r31, 0x06	; 6
     c3a:	80 81       	ld	r24, Z
     c3c:	88 60       	ori	r24, 0x08	; 8
     c3e:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     c40:	80 ea       	ldi	r24, 0xA0	; 160
     c42:	9a e0       	ldi	r25, 0x0A	; 10
     c44:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <stdio_base>
     c48:	90 93 0d 21 	sts	0x210D, r25	; 0x80210d <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     c4c:	8f e0       	ldi	r24, 0x0F	; 15
     c4e:	96 e0       	ldi	r25, 0x06	; 6
     c50:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <ptr_put>
     c54:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     c58:	87 e0       	ldi	r24, 0x07	; 7
     c5a:	96 e0       	ldi	r25, 0x06	; 6
     c5c:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <ptr_get>
     c60:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c64:	ed e0       	ldi	r30, 0x0D	; 13
     c66:	f0 e2       	ldi	r31, 0x20	; 32
     c68:	84 81       	ldd	r24, Z+4	; 0x04
     c6a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     c6c:	85 81       	ldd	r24, Z+5	; 0x05
     c6e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     c70:	86 81       	ldd	r24, Z+6	; 0x06
     c72:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	a2 81       	ldd	r26, Z+2	; 0x02
     c7a:	b3 81       	ldd	r27, Z+3	; 0x03
     c7c:	89 83       	std	Y+1, r24	; 0x01
     c7e:	9a 83       	std	Y+2, r25	; 0x02
     c80:	ab 83       	std	Y+3, r26	; 0x03
     c82:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     c84:	60 e1       	ldi	r22, 0x10	; 16
     c86:	85 e0       	ldi	r24, 0x05	; 5
     c88:	83 d1       	rcall	.+774    	; 0xf90 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     c8a:	be 01       	movw	r22, r28
     c8c:	6f 5f       	subi	r22, 0xFF	; 255
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	80 ea       	ldi	r24, 0xA0	; 160
     c92:	9a e0       	ldi	r25, 0x0A	; 10
     c94:	96 dd       	rcall	.-1236   	; 0x7c2 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     c96:	61 ea       	ldi	r22, 0xA1	; 161
     c98:	71 e0       	ldi	r23, 0x01	; 1
     c9a:	8a eb       	ldi	r24, 0xBA	; 186
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	0e 94 df 1c 	call	0x39be	; 0x39be <fdevopen>
	
	//usart_serial_init(UART_TERMINAL_SERIAL, &usart_config);
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
}
     ca2:	27 96       	adiw	r28, 0x07	; 7
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <voltage_init>:
#include "voltage.h"
#include <asf.h>


void voltage_init(void)
{
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     cb8:	62 e0       	ldi	r22, 0x02	; 2
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	69 d1       	rcall	.+722    	; 0xf90 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&VOLTAGE_SERIAL);
	VOLTAGE_SERIAL.CTRLA = 0x01; // enable the ADC
     cbe:	c0 e0       	ldi	r28, 0x00	; 0
     cc0:	d2 e0       	ldi	r29, 0x02	; 2
     cc2:	ff 24       	eor	r15, r15
     cc4:	f3 94       	inc	r15
     cc6:	f8 82       	st	Y, r15
	VOLTAGE_SERIAL.CTRLB = 0x00; // unsigned 12 bit mode
     cc8:	19 82       	std	Y+1, r1	; 0x01
	VOLTAGE_SERIAL.REFCTRL = 0x10; // voltage Reference of Vcc/1.6V
     cca:	80 e1       	ldi	r24, 0x10	; 16
     ccc:	8a 83       	std	Y+2, r24	; 0x02
	VOLTAGE_SERIAL.PRESCALER = 0x05; // prescaler of DIV128 on the clock
     cce:	85 e0       	ldi	r24, 0x05	; 5
     cd0:	8c 83       	std	Y+4, r24	; 0x04
     cd2:	61 e2       	ldi	r22, 0x21	; 33
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	71 d1       	rcall	.+738    	; 0xfbc <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     cda:	08 2f       	mov	r16, r24
     cdc:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
     cde:	10 2f       	mov	r17, r16
     ce0:	00 27       	eor	r16, r16
     ce2:	60 e2       	ldi	r22, 0x20	; 32
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	69 d1       	rcall	.+722    	; 0xfbc <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
     cea:	08 2b       	or	r16, r24
	VOLTAGE_SERIAL.CAL = adc_get_calibration_data(ADC_CAL_ADCA); // retrieve stored calibration data about the ADC
     cec:	0c 87       	std	Y+12, r16	; 0x0c
     cee:	1d 87       	std	Y+13, r17	; 0x0d
	
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL = 0x01; // single ended input
     cf0:	f8 a6       	std	Y+40, r15	; 0x28
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.MUXCTRL = VOLTAGE_PIN; // reading ADCA pin 0
     cf2:	19 a6       	std	Y+41, r1	; 0x29
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	08 95       	ret

00000d00 <voltage_read>:

uint16_t voltage_read(void)
{
	VOLTAGE_SERIAL.VOLTAGE_CHANNEL.CTRL |= 0x80; // start the conversion
     d00:	e0 e0       	ldi	r30, 0x00	; 0
     d02:	f2 e0       	ldi	r31, 0x02	; 2
     d04:	80 a5       	ldd	r24, Z+40	; 0x28
     d06:	80 68       	ori	r24, 0x80	; 128
     d08:	80 a7       	std	Z+40, r24	; 0x28
	while(!(VOLTAGE_SERIAL.VOLTAGE_CHANNEL.INTFLAGS)); // wait until the conversion is done
     d0a:	83 a5       	ldd	r24, Z+43	; 0x2b
     d0c:	88 23       	and	r24, r24
     d0e:	e9 f3       	breq	.-6      	; 0xd0a <voltage_read+0xa>
	return VOLTAGE_SERIAL.VOLTAGE_CHANNEL.RES; // return the 12-bit result as a uint16_t
     d10:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     d14:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     d18:	08 95       	ret

00000d1a <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	fc 01       	movw	r30, r24
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	b1 f1       	breq	.+108    	; 0xd92 <rb16_write+0x78>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	db 01       	movw	r26, r22
     d32:	a8 0f       	add	r26, r24
     d34:	b9 1f       	adc	r27, r25
     d36:	8d 91       	ld	r24, X+
     d38:	9c 91       	ld	r25, X
     d3a:	a2 81       	ldd	r26, Z+2	; 0x02
     d3c:	b3 81       	ldd	r27, Z+3	; 0x03
     d3e:	aa 0f       	add	r26, r26
     d40:	bb 1f       	adc	r27, r27
     d42:	c6 81       	ldd	r28, Z+6	; 0x06
     d44:	d7 81       	ldd	r29, Z+7	; 0x07
     d46:	ac 0f       	add	r26, r28
     d48:	bd 1f       	adc	r27, r29
     d4a:	8d 93       	st	X+, r24
     d4c:	9c 93       	st	X, r25
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	82 83       	std	Z+2, r24	; 0x02
     d56:	93 83       	std	Z+3, r25	; 0x03
     d58:	a0 81       	ld	r26, Z
     d5a:	b1 81       	ldd	r27, Z+1	; 0x01
     d5c:	8a 17       	cp	r24, r26
     d5e:	9b 07       	cpc	r25, r27
     d60:	11 f4       	brne	.+4      	; 0xd66 <rb16_write+0x4c>
     d62:	12 82       	std	Z+2, r1	; 0x02
     d64:	13 82       	std	Z+3, r1	; 0x03
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	c4 81       	ldd	r28, Z+4	; 0x04
     d6c:	d5 81       	ldd	r29, Z+5	; 0x05
     d6e:	8c 17       	cp	r24, r28
     d70:	9d 07       	cpc	r25, r29
     d72:	49 f4       	brne	.+18     	; 0xd86 <rb16_write+0x6c>
     d74:	01 96       	adiw	r24, 0x01	; 1
     d76:	a8 17       	cp	r26, r24
     d78:	b9 07       	cpc	r27, r25
     d7a:	19 f0       	breq	.+6      	; 0xd82 <rb16_write+0x68>
     d7c:	84 83       	std	Z+4, r24	; 0x04
     d7e:	95 83       	std	Z+5, r25	; 0x05
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <rb16_write+0x6c>
     d82:	14 82       	std	Z+4, r1	; 0x04
     d84:	15 82       	std	Z+5, r1	; 0x05
     d86:	2f 5f       	subi	r18, 0xFF	; 255
     d88:	82 2f       	mov	r24, r18
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	84 17       	cp	r24, r20
     d8e:	95 07       	cpc	r25, r21
     d90:	68 f2       	brcs	.-102    	; 0xd2c <rb16_write+0x12>
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <rb16_init>:
     d98:	fc 01       	movw	r30, r24
     d9a:	12 82       	std	Z+2, r1	; 0x02
     d9c:	13 82       	std	Z+3, r1	; 0x03
     d9e:	14 82       	std	Z+4, r1	; 0x04
     da0:	15 82       	std	Z+5, r1	; 0x05
     da2:	66 83       	std	Z+6, r22	; 0x06
     da4:	77 83       	std	Z+7, r23	; 0x07
     da6:	40 83       	st	Z, r20
     da8:	51 83       	std	Z+1, r21	; 0x01
     daa:	08 95       	ret

00000dac <rb16_get_nth>:
     dac:	dc 01       	movw	r26, r24
     dae:	12 96       	adiw	r26, 0x02	; 2
     db0:	ed 91       	ld	r30, X+
     db2:	fc 91       	ld	r31, X
     db4:	13 97       	sbiw	r26, 0x03	; 3
     db6:	cb 01       	movw	r24, r22
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	e8 17       	cp	r30, r24
     dbc:	f9 07       	cpc	r31, r25
     dbe:	78 f0       	brcs	.+30     	; 0xdde <rb16_get_nth+0x32>
     dc0:	e1 50       	subi	r30, 0x01	; 1
     dc2:	f0 48       	sbci	r31, 0x80	; 128
     dc4:	e6 1b       	sub	r30, r22
     dc6:	f7 0b       	sbc	r31, r23
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	16 96       	adiw	r26, 0x06	; 6
     dce:	8d 91       	ld	r24, X+
     dd0:	9c 91       	ld	r25, X
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	e8 0f       	add	r30, r24
     dd6:	f9 1f       	adc	r31, r25
     dd8:	80 81       	ld	r24, Z
     dda:	91 81       	ldd	r25, Z+1	; 0x01
     ddc:	08 95       	ret
     dde:	2d 91       	ld	r18, X+
     de0:	3c 91       	ld	r19, X
     de2:	11 97       	sbiw	r26, 0x01	; 1
     de4:	e2 0f       	add	r30, r18
     de6:	f3 1f       	adc	r31, r19
     de8:	e1 50       	subi	r30, 0x01	; 1
     dea:	f0 48       	sbci	r31, 0x80	; 128
     dec:	e6 1b       	sub	r30, r22
     dee:	f7 0b       	sbc	r31, r23
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	16 96       	adiw	r26, 0x06	; 6
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	17 97       	sbiw	r26, 0x07	; 7
     dfc:	e8 0f       	add	r30, r24
     dfe:	f9 1f       	adc	r31, r25
     e00:	80 81       	ld	r24, Z
     e02:	91 81       	ldd	r25, Z+1	; 0x01
     e04:	08 95       	ret

00000e06 <rb32_write>:
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	fc 01       	movw	r30, r24
     e14:	41 15       	cp	r20, r1
     e16:	51 05       	cpc	r21, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <rb32_write+0x16>
     e1a:	3f c0       	rjmp	.+126    	; 0xe9a <rb32_write+0x94>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	db 01       	movw	r26, r22
     e2c:	a8 0f       	add	r26, r24
     e2e:	b9 1f       	adc	r27, r25
     e30:	cd 90       	ld	r12, X+
     e32:	dd 90       	ld	r13, X+
     e34:	ed 90       	ld	r14, X+
     e36:	fc 90       	ld	r15, X
     e38:	a2 81       	ldd	r26, Z+2	; 0x02
     e3a:	b3 81       	ldd	r27, Z+3	; 0x03
     e3c:	aa 0f       	add	r26, r26
     e3e:	bb 1f       	adc	r27, r27
     e40:	aa 0f       	add	r26, r26
     e42:	bb 1f       	adc	r27, r27
     e44:	86 81       	ldd	r24, Z+6	; 0x06
     e46:	97 81       	ldd	r25, Z+7	; 0x07
     e48:	a8 0f       	add	r26, r24
     e4a:	b9 1f       	adc	r27, r25
     e4c:	cd 92       	st	X+, r12
     e4e:	dd 92       	st	X+, r13
     e50:	ed 92       	st	X+, r14
     e52:	fc 92       	st	X, r15
     e54:	13 97       	sbiw	r26, 0x03	; 3
     e56:	82 81       	ldd	r24, Z+2	; 0x02
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	82 83       	std	Z+2, r24	; 0x02
     e5e:	93 83       	std	Z+3, r25	; 0x03
     e60:	a0 81       	ld	r26, Z
     e62:	b1 81       	ldd	r27, Z+1	; 0x01
     e64:	8a 17       	cp	r24, r26
     e66:	9b 07       	cpc	r25, r27
     e68:	11 f4       	brne	.+4      	; 0xe6e <rb32_write+0x68>
     e6a:	12 82       	std	Z+2, r1	; 0x02
     e6c:	13 82       	std	Z+3, r1	; 0x03
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	93 81       	ldd	r25, Z+3	; 0x03
     e72:	c4 81       	ldd	r28, Z+4	; 0x04
     e74:	d5 81       	ldd	r29, Z+5	; 0x05
     e76:	8c 17       	cp	r24, r28
     e78:	9d 07       	cpc	r25, r29
     e7a:	49 f4       	brne	.+18     	; 0xe8e <rb32_write+0x88>
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	a8 17       	cp	r26, r24
     e80:	b9 07       	cpc	r27, r25
     e82:	19 f0       	breq	.+6      	; 0xe8a <rb32_write+0x84>
     e84:	84 83       	std	Z+4, r24	; 0x04
     e86:	95 83       	std	Z+5, r25	; 0x05
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <rb32_write+0x88>
     e8a:	14 82       	std	Z+4, r1	; 0x04
     e8c:	15 82       	std	Z+5, r1	; 0x05
     e8e:	2f 5f       	subi	r18, 0xFF	; 255
     e90:	82 2f       	mov	r24, r18
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	84 17       	cp	r24, r20
     e96:	95 07       	cpc	r25, r21
     e98:	20 f2       	brcs	.-120    	; 0xe22 <rb32_write+0x1c>
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	08 95       	ret

00000ea8 <rb32_init>:
     ea8:	fc 01       	movw	r30, r24
     eaa:	12 82       	std	Z+2, r1	; 0x02
     eac:	13 82       	std	Z+3, r1	; 0x03
     eae:	14 82       	std	Z+4, r1	; 0x04
     eb0:	15 82       	std	Z+5, r1	; 0x05
     eb2:	66 83       	std	Z+6, r22	; 0x06
     eb4:	77 83       	std	Z+7, r23	; 0x07
     eb6:	40 83       	st	Z, r20
     eb8:	51 83       	std	Z+1, r21	; 0x01
     eba:	08 95       	ret

00000ebc <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     ebc:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     ebe:	12 96       	adiw	r26, 0x02	; 2
     ec0:	ed 91       	ld	r30, X+
     ec2:	fc 91       	ld	r31, X
     ec4:	13 97       	sbiw	r26, 0x03	; 3
     ec6:	cb 01       	movw	r24, r22
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	e8 17       	cp	r30, r24
     ecc:	f9 07       	cpc	r31, r25
     ece:	98 f0       	brcs	.+38     	; 0xef6 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     ed0:	e1 50       	subi	r30, 0x01	; 1
     ed2:	f0 4c       	sbci	r31, 0xC0	; 192
     ed4:	e6 1b       	sub	r30, r22
     ed6:	f7 0b       	sbc	r31, r23
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	ee 0f       	add	r30, r30
     ede:	ff 1f       	adc	r31, r31
     ee0:	16 96       	adiw	r26, 0x06	; 6
     ee2:	8d 91       	ld	r24, X+
     ee4:	9c 91       	ld	r25, X
     ee6:	17 97       	sbiw	r26, 0x07	; 7
     ee8:	e8 0f       	add	r30, r24
     eea:	f9 1f       	adc	r31, r25
     eec:	60 81       	ld	r22, Z
     eee:	71 81       	ldd	r23, Z+1	; 0x01
     ef0:	82 81       	ldd	r24, Z+2	; 0x02
     ef2:	93 81       	ldd	r25, Z+3	; 0x03
     ef4:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     ef6:	2d 91       	ld	r18, X+
     ef8:	3c 91       	ld	r19, X
     efa:	11 97       	sbiw	r26, 0x01	; 1
     efc:	e2 0f       	add	r30, r18
     efe:	f3 1f       	adc	r31, r19
     f00:	e1 50       	subi	r30, 0x01	; 1
     f02:	f0 4c       	sbci	r31, 0xC0	; 192
     f04:	e6 1b       	sub	r30, r22
     f06:	f7 0b       	sbc	r31, r23
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	16 96       	adiw	r26, 0x06	; 6
     f12:	8d 91       	ld	r24, X+
     f14:	9c 91       	ld	r25, X
     f16:	17 97       	sbiw	r26, 0x07	; 7
     f18:	e8 0f       	add	r30, r24
     f1a:	f9 1f       	adc	r31, r25
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
}
     f24:	08 95       	ret

00000f26 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	1f 92       	push	r1
     f2c:	1f 92       	push	r1
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     f38:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     f3c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     f40:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     f44:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     f48:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     f4c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f50:	8f b7       	in	r24, 0x3f	; 63
     f52:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     f54:	f8 94       	cli
	return flags;
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f58:	e0 e5       	ldi	r30, 0x50	; 80
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	82 60       	ori	r24, 0x02	; 2
     f60:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f62:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f64:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f66:	81 ff       	sbrs	r24, 1
     f68:	fd cf       	rjmp	.-6      	; 0xf64 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	80 e4       	ldi	r24, 0x40	; 64
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	2f d0       	rcall	.+94     	; 0xfd0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f72:	8f b7       	in	r24, 0x3f	; 63
     f74:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f76:	f8 94       	cli
	return flags;
     f78:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     f7a:	e0 e5       	ldi	r30, 0x50	; 80
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8e 7f       	andi	r24, 0xFE	; 254
     f82:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f84:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	1f 92       	push	r1
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f9a:	9f b7       	in	r25, 0x3f	; 63
     f9c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     f9e:	f8 94       	cli
	return flags;
     fa0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     fa2:	e8 2f       	mov	r30, r24
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	e0 59       	subi	r30, 0x90	; 144
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	60 95       	com	r22
     fac:	80 81       	ld	r24, Z
     fae:	68 23       	and	r22, r24
     fb0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fb2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     fb4:	0f 90       	pop	r0
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     fbc:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     fc0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     fc2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     fc4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     fc8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     fca:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     fce:	08 95       	ret

00000fd0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     fd0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     fd2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     fd4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     fd6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     fd8:	60 83       	st	Z, r22
	ret                             // Return to caller
     fda:	08 95       	ret

00000fdc <__portable_avr_delay_cycles>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	delay_ms(1);
	uint8_t byte = NVM.DATA0;
	return byte;
}
     fdc:	04 c0       	rjmp	.+8      	; 0xfe6 <__portable_avr_delay_cycles+0xa>
     fde:	61 50       	subi	r22, 0x01	; 1
     fe0:	71 09       	sbc	r23, r1
     fe2:	81 09       	sbc	r24, r1
     fe4:	91 09       	sbc	r25, r1
     fe6:	61 15       	cp	r22, r1
     fe8:	71 05       	cpc	r23, r1
     fea:	81 05       	cpc	r24, r1
     fec:	91 05       	cpc	r25, r1
     fee:	b9 f7       	brne	.-18     	; 0xfde <__portable_avr_delay_cycles+0x2>
     ff0:	08 95       	ret

00000ff2 <pressure_init>:
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	69 dd       	rcall	.-1326   	; 0xaca <ms5607_init>
     ff8:	82 ea       	ldi	r24, 0xA2	; 162
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	7f dd       	rcall	.-1282   	; 0xafc <ms5607_read>
     ffe:	c5 ef       	ldi	r28, 0xF5	; 245
    1000:	d0 e2       	ldi	r29, 0x20	; 32
    1002:	88 83       	st	Y, r24
    1004:	99 83       	std	Y+1, r25	; 0x01
    1006:	84 ea       	ldi	r24, 0xA4	; 164
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	78 dd       	rcall	.-1296   	; 0xafc <ms5607_read>
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	9b 83       	std	Y+3, r25	; 0x03
    1010:	86 ea       	ldi	r24, 0xA6	; 166
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	73 dd       	rcall	.-1306   	; 0xafc <ms5607_read>
    1016:	8c 83       	std	Y+4, r24	; 0x04
    1018:	9d 83       	std	Y+5, r25	; 0x05
    101a:	88 ea       	ldi	r24, 0xA8	; 168
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	6e dd       	rcall	.-1316   	; 0xafc <ms5607_read>
    1020:	8e 83       	std	Y+6, r24	; 0x06
    1022:	9f 83       	std	Y+7, r25	; 0x07
    1024:	8a ea       	ldi	r24, 0xAA	; 170
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	69 dd       	rcall	.-1326   	; 0xafc <ms5607_read>
    102a:	88 87       	std	Y+8, r24	; 0x08
    102c:	99 87       	std	Y+9, r25	; 0x09
    102e:	8c ea       	ldi	r24, 0xAC	; 172
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	64 dd       	rcall	.-1336   	; 0xafc <ms5607_read>
    1034:	8a 87       	std	Y+10, r24	; 0x0a
    1036:	9b 87       	std	Y+11, r25	; 0x0b
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <gps_init>:
    103e:	05 dd       	rcall	.-1526   	; 0xa4a <gps_uart_init>
    1040:	6b ea       	ldi	r22, 0xAB	; 171
    1042:	79 e2       	ldi	r23, 0x29	; 41
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	c9 df       	rcall	.-110    	; 0xfdc <__portable_avr_delay_cycles>
    104a:	80 e3       	ldi	r24, 0x30	; 48
    104c:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    1050:	08 95       	ret

00001052 <release>:
    1052:	80 eb       	ldi	r24, 0xB0	; 176
    1054:	94 e0       	ldi	r25, 0x04	; 4
    1056:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    105a:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <released>
    1064:	08 95       	ret

00001066 <get_pressure>:
    1066:	4f 92       	push	r4
    1068:	5f 92       	push	r5
    106a:	6f 92       	push	r6
    106c:	7f 92       	push	r7
    106e:	8f 92       	push	r8
    1070:	9f 92       	push	r9
    1072:	af 92       	push	r10
    1074:	bf 92       	push	r11
    1076:	cf 92       	push	r12
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	6b ea       	ldi	r22, 0xAB	; 171
    1084:	76 ea       	ldi	r23, 0xA6	; 166
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a8 df       	rcall	.-176    	; 0xfdc <__portable_avr_delay_cycles>
    108c:	49 dd       	rcall	.-1390   	; 0xb20 <ms5607_convert_d1>
    108e:	6b 01       	movw	r12, r22
    1090:	7c 01       	movw	r14, r24
    1092:	6b ea       	ldi	r22, 0xAB	; 171
    1094:	76 ea       	ldi	r23, 0xA6	; 166
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 df       	rcall	.-192    	; 0xfdc <__portable_avr_delay_cycles>
    109c:	6a dd       	rcall	.-1324   	; 0xb72 <ms5607_convert_d2>
    109e:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatunsisf>
    10a2:	4b 01       	movw	r8, r22
    10a4:	5c 01       	movw	r10, r24
    10a6:	c5 ef       	ldi	r28, 0xF5	; 245
    10a8:	d0 e2       	ldi	r29, 0x20	; 32
    10aa:	68 85       	ldd	r22, Y+8	; 0x08
    10ac:	79 85       	ldd	r23, Y+9	; 0x09
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatunsisf>
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e8       	ldi	r20, 0x80	; 128
    10bc:	53 e4       	ldi	r21, 0x43	; 67
    10be:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	c5 01       	movw	r24, r10
    10c8:	b4 01       	movw	r22, r8
    10ca:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    10ce:	4b 01       	movw	r8, r22
    10d0:	5c 01       	movw	r10, r24
    10d2:	6c 81       	ldd	r22, Y+4	; 0x04
    10d4:	7d 81       	ldd	r23, Y+5	; 0x05
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatunsisf>
    10de:	a5 01       	movw	r20, r10
    10e0:	94 01       	movw	r18, r8
    10e2:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	5c e3       	ldi	r21, 0x3C	; 60
    10ee:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    10f2:	2b 01       	movw	r4, r22
    10f4:	3c 01       	movw	r6, r24
    10f6:	68 81       	ld	r22, Y
    10f8:	79 81       	ldd	r23, Y+1	; 0x01
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatunsisf>
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e8       	ldi	r20, 0x80	; 128
    1108:	57 e4       	ldi	r21, 0x47	; 71
    110a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    110e:	9b 01       	movw	r18, r22
    1110:	ac 01       	movw	r20, r24
    1112:	c3 01       	movw	r24, r6
    1114:	b2 01       	movw	r22, r4
    1116:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    111a:	2b 01       	movw	r4, r22
    111c:	3c 01       	movw	r6, r24
    111e:	c7 01       	movw	r24, r14
    1120:	b6 01       	movw	r22, r12
    1122:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatunsisf>
    1126:	9b 01       	movw	r18, r22
    1128:	ac 01       	movw	r20, r24
    112a:	c3 01       	movw	r24, r6
    112c:	b2 01       	movw	r22, r4
    112e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	55 e3       	ldi	r21, 0x35	; 53
    113a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    113e:	6b 01       	movw	r12, r22
    1140:	7c 01       	movw	r14, r24
    1142:	6e 81       	ldd	r22, Y+6	; 0x06
    1144:	7f 81       	ldd	r23, Y+7	; 0x07
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatunsisf>
    114e:	a5 01       	movw	r20, r10
    1150:	94 01       	movw	r18, r8
    1152:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e8       	ldi	r20, 0x80	; 128
    115c:	5c e3       	ldi	r21, 0x3C	; 60
    115e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1162:	4b 01       	movw	r8, r22
    1164:	5c 01       	movw	r10, r24
    1166:	6a 81       	ldd	r22, Y+2	; 0x02
    1168:	7b 81       	ldd	r23, Y+3	; 0x03
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatunsisf>
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	58 e4       	ldi	r21, 0x48	; 72
    117a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    117e:	9b 01       	movw	r18, r22
    1180:	ac 01       	movw	r20, r24
    1182:	c5 01       	movw	r24, r10
    1184:	b4 01       	movw	r22, r8
    1186:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    118a:	9b 01       	movw	r18, r22
    118c:	ac 01       	movw	r20, r24
    118e:	c7 01       	movw	r24, r14
    1190:	b6 01       	movw	r22, r12
    1192:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	58 e3       	ldi	r21, 0x38	; 56
    119e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	9f 90       	pop	r9
    11b4:	8f 90       	pop	r8
    11b6:	7f 90       	pop	r7
    11b8:	6f 90       	pop	r6
    11ba:	5f 90       	pop	r5
    11bc:	4f 90       	pop	r4
    11be:	08 95       	ret

000011c0 <get_temperature>:
    11c0:	4f 92       	push	r4
    11c2:	5f 92       	push	r5
    11c4:	6f 92       	push	r6
    11c6:	7f 92       	push	r7
    11c8:	8f 92       	push	r8
    11ca:	9f 92       	push	r9
    11cc:	af 92       	push	r10
    11ce:	bf 92       	push	r11
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	2b dc       	rcall	.-1962   	; 0xa30 <thermistor_read>
    11da:	bc 01       	movw	r22, r24
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatunsisf>
    11e4:	22 e5       	ldi	r18, 0x52	; 82
    11e6:	37 e3       	ldi	r19, 0x37	; 55
    11e8:	42 e0       	ldi	r20, 0x02	; 2
    11ea:	5a e3       	ldi	r21, 0x3A	; 58
    11ec:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    11f0:	2a e3       	ldi	r18, 0x3A	; 58
    11f2:	31 e7       	ldi	r19, 0x71	; 113
    11f4:	43 ec       	ldi	r20, 0xC3	; 195
    11f6:	5d e3       	ldi	r21, 0x3D	; 61
    11f8:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    11fc:	6b 01       	movw	r12, r22
    11fe:	7c 01       	movw	r14, r24
    1200:	9b 01       	movw	r18, r22
    1202:	ac 01       	movw	r20, r24
    1204:	6e ea       	ldi	r22, 0xAE	; 174
    1206:	77 e4       	ldi	r23, 0x47	; 71
    1208:	81 e5       	ldi	r24, 0x51	; 81
    120a:	90 e4       	ldi	r25, 0x40	; 64
    120c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	38 e1       	ldi	r19, 0x18	; 24
    1214:	4c e1       	ldi	r20, 0x1C	; 28
    1216:	56 e4       	ldi	r21, 0x46	; 70
    1218:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    121c:	a7 01       	movw	r20, r14
    121e:	96 01       	movw	r18, r12
    1220:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e4       	ldi	r19, 0x40	; 64
    1228:	4c e1       	ldi	r20, 0x1C	; 28
    122a:	56 e4       	ldi	r21, 0x46	; 70
    122c:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    1230:	0e 94 4b 1a 	call	0x3496	; 0x3496 <log>
    1234:	6b 01       	movw	r12, r22
    1236:	7c 01       	movw	r14, r24
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e4       	ldi	r20, 0x40	; 64
    123e:	50 e4       	ldi	r21, 0x40	; 64
    1240:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <pow>
    1244:	4b 01       	movw	r8, r22
    1246:	5c 01       	movw	r10, r24
    1248:	21 ef       	ldi	r18, 0xF1	; 241
    124a:	3b eb       	ldi	r19, 0xBB	; 187
    124c:	46 e8       	ldi	r20, 0x86	; 134
    124e:	59 e3       	ldi	r21, 0x39	; 57
    1250:	c7 01       	movw	r24, r14
    1252:	b6 01       	movw	r22, r12
    1254:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1258:	2d e0       	ldi	r18, 0x0D	; 13
    125a:	3f ec       	ldi	r19, 0xCF	; 207
    125c:	4b e5       	ldi	r20, 0x5B	; 91
    125e:	5b e3       	ldi	r21, 0x3B	; 59
    1260:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1264:	2b 01       	movw	r4, r22
    1266:	3c 01       	movw	r6, r24
    1268:	a7 01       	movw	r20, r14
    126a:	96 01       	movw	r18, r12
    126c:	c7 01       	movw	r24, r14
    126e:	b6 01       	movw	r22, r12
    1270:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1274:	22 e8       	ldi	r18, 0x82	; 130
    1276:	35 ed       	ldi	r19, 0xD5	; 213
    1278:	4f e2       	ldi	r20, 0x2F	; 47
    127a:	56 e3       	ldi	r21, 0x36	; 54
    127c:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1280:	9b 01       	movw	r18, r22
    1282:	ac 01       	movw	r20, r24
    1284:	c3 01       	movw	r24, r6
    1286:	b2 01       	movw	r22, r4
    1288:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    128c:	6b 01       	movw	r12, r22
    128e:	7c 01       	movw	r14, r24
    1290:	2a e6       	ldi	r18, 0x6A	; 106
    1292:	33 e1       	ldi	r19, 0x13	; 19
    1294:	49 e8       	ldi	r20, 0x89	; 137
    1296:	53 e3       	ldi	r21, 0x33	; 51
    1298:	c5 01       	movw	r24, r10
    129a:	b4 01       	movw	r22, r8
    129c:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    12a0:	9b 01       	movw	r18, r22
    12a2:	ac 01       	movw	r20, r24
    12a4:	c7 01       	movw	r24, r14
    12a6:	b6 01       	movw	r22, r12
    12a8:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    12ac:	9b 01       	movw	r18, r22
    12ae:	ac 01       	movw	r20, r24
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	88 ec       	ldi	r24, 0xC8	; 200
    12b6:	92 e4       	ldi	r25, 0x42	; 66
    12b8:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	df 90       	pop	r13
    12c2:	cf 90       	pop	r12
    12c4:	bf 90       	pop	r11
    12c6:	af 90       	pop	r10
    12c8:	9f 90       	pop	r9
    12ca:	8f 90       	pop	r8
    12cc:	7f 90       	pop	r7
    12ce:	6f 90       	pop	r6
    12d0:	5f 90       	pop	r5
    12d2:	4f 90       	pop	r4
    12d4:	08 95       	ret

000012d6 <get_altitude>:
    12d6:	4f 92       	push	r4
    12d8:	5f 92       	push	r5
    12da:	6f 92       	push	r6
    12dc:	7f 92       	push	r7
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	2b 01       	movw	r4, r22
    12f0:	3c 01       	movw	r6, r24
    12f2:	c0 90 21 20 	lds	r12, 0x2021	; 0x802021 <L>
    12f6:	d0 90 22 20 	lds	r13, 0x2022	; 0x802022 <L+0x1>
    12fa:	e0 90 23 20 	lds	r14, 0x2023	; 0x802023 <L+0x2>
    12fe:	f0 90 24 20 	lds	r15, 0x2024	; 0x802024 <L+0x3>
    1302:	20 91 25 20 	lds	r18, 0x2025	; 0x802025 <R>
    1306:	30 91 26 20 	lds	r19, 0x2026	; 0x802026 <R+0x1>
    130a:	40 91 27 20 	lds	r20, 0x2027	; 0x802027 <R+0x2>
    130e:	50 91 28 20 	lds	r21, 0x2028	; 0x802028 <R+0x3>
    1312:	c7 01       	movw	r24, r14
    1314:	b6 01       	movw	r22, r12
    1316:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    131a:	20 91 1d 20 	lds	r18, 0x201D	; 0x80201d <g_0>
    131e:	30 91 1e 20 	lds	r19, 0x201E	; 0x80201e <g_0+0x1>
    1322:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <g_0+0x2>
    1326:	50 91 20 20 	lds	r21, 0x2020	; 0x802020 <g_0+0x3>
    132a:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    132e:	4b 01       	movw	r8, r22
    1330:	5c 01       	movw	r10, r24
    1332:	a3 01       	movw	r20, r6
    1334:	92 01       	movw	r18, r4
    1336:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    133a:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    133e:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    1342:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    1346:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    134a:	a5 01       	movw	r20, r10
    134c:	94 01       	movw	r18, r8
    134e:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <pow>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	5f e3       	ldi	r21, 0x3F	; 63
    135a:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    135e:	20 91 29 20 	lds	r18, 0x2029	; 0x802029 <ground_t>
    1362:	30 91 2a 20 	lds	r19, 0x202A	; 0x80202a <ground_t+0x1>
    1366:	40 91 2b 20 	lds	r20, 0x202B	; 0x80202b <ground_t+0x2>
    136a:	50 91 2c 20 	lds	r21, 0x202C	; 0x80202c <ground_t+0x3>
    136e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1372:	a7 01       	movw	r20, r14
    1374:	96 01       	movw	r18, r12
    1376:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    137a:	20 91 01 21 	lds	r18, 0x2101	; 0x802101 <ground_a>
    137e:	30 91 02 21 	lds	r19, 0x2102	; 0x802102 <ground_a+0x1>
    1382:	40 91 03 21 	lds	r20, 0x2103	; 0x802103 <ground_a+0x2>
    1386:	50 91 04 21 	lds	r21, 0x2104	; 0x802104 <ground_a+0x3>
    138a:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	bf 90       	pop	r11
    1398:	af 90       	pop	r10
    139a:	9f 90       	pop	r9
    139c:	8f 90       	pop	r8
    139e:	7f 90       	pop	r7
    13a0:	6f 90       	pop	r6
    13a2:	5f 90       	pop	r5
    13a4:	4f 90       	pop	r4
    13a6:	08 95       	ret

000013a8 <get_voltage>:
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	a5 dc       	rcall	.-1718   	; 0xd00 <voltage_read>
    13b6:	ec 01       	movw	r28, r24
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	89 ea       	ldi	r24, 0xA9	; 169
    13be:	90 e2       	ldi	r25, 0x20	; 32
    13c0:	9f 93       	push	r25
    13c2:	8f 93       	push	r24
    13c4:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <printf>
    13c8:	be 01       	movw	r22, r28
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatunsisf>
    13d2:	23 e4       	ldi	r18, 0x43	; 67
    13d4:	3e e2       	ldi	r19, 0x2E	; 46
    13d6:	42 e0       	ldi	r20, 0x02	; 2
    13d8:	5a e3       	ldi	r21, 0x3A	; 58
    13da:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    13de:	24 ee       	ldi	r18, 0xE4	; 228
    13e0:	3a e5       	ldi	r19, 0x5A	; 90
    13e2:	45 ec       	ldi	r20, 0xC5	; 197
    13e4:	5d e3       	ldi	r21, 0x3D	; 61
    13e6:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    13ea:	6b 01       	movw	r12, r22
    13ec:	7c 01       	movw	r14, r24
    13ee:	2b e2       	ldi	r18, 0x2B	; 43
    13f0:	35 eb       	ldi	r19, 0xB5	; 181
    13f2:	42 e1       	ldi	r20, 0x12	; 18
    13f4:	50 e4       	ldi	r21, 0x40	; 64
    13f6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    13fa:	9b 01       	movw	r18, r22
    13fc:	ac 01       	movw	r20, r24
    13fe:	c7 01       	movw	r24, r14
    1400:	b6 01       	movw	r22, r12
    1402:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	df 90       	pop	r13
    1418:	cf 90       	pop	r12
    141a:	08 95       	ret

0000141c <diff>:
    141c:	2f 92       	push	r2
    141e:	3f 92       	push	r3
    1420:	4f 92       	push	r4
    1422:	5f 92       	push	r5
    1424:	6f 92       	push	r6
    1426:	7f 92       	push	r7
    1428:	8f 92       	push	r8
    142a:	9f 92       	push	r9
    142c:	af 92       	push	r10
    142e:	bf 92       	push	r11
    1430:	cf 92       	push	r12
    1432:	df 92       	push	r13
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	00 d0       	rcall	.+0      	; 0x1442 <diff+0x26>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <diff+0x28>
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	6c 01       	movw	r12, r24
    144a:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    144e:	88 23       	and	r24, r24
    1450:	09 f4       	brne	.+2      	; 0x1454 <diff+0x38>
    1452:	6c c0       	rjmp	.+216    	; 0x152c <diff+0x110>
    1454:	00 e0       	ldi	r16, 0x00	; 0
    1456:	10 e0       	ldi	r17, 0x00	; 0
    1458:	41 2c       	mov	r4, r1
    145a:	51 2c       	mov	r5, r1
    145c:	32 01       	movw	r6, r4
    145e:	86 2e       	mov	r8, r22
    1460:	91 2c       	mov	r9, r1
    1462:	a1 2c       	mov	r10, r1
    1464:	b1 2c       	mov	r11, r1
    1466:	89 82       	std	Y+1, r8	; 0x01
    1468:	9a 82       	std	Y+2, r9	; 0x02
    146a:	ab 82       	std	Y+3, r10	; 0x03
    146c:	bc 82       	std	Y+4, r11	; 0x04
    146e:	b8 01       	movw	r22, r16
    1470:	c6 01       	movw	r24, r12
    1472:	9c dc       	rcall	.-1736   	; 0xdac <rb16_get_nth>
    1474:	5c 01       	movw	r10, r24
    1476:	18 01       	movw	r2, r16
    1478:	2f ef       	ldi	r18, 0xFF	; 255
    147a:	22 1a       	sub	r2, r18
    147c:	32 0a       	sbc	r3, r18
    147e:	b1 01       	movw	r22, r2
    1480:	c6 01       	movw	r24, r12
    1482:	94 dc       	rcall	.-1752   	; 0xdac <rb16_get_nth>
    1484:	7c 01       	movw	r14, r24
    1486:	b8 01       	movw	r22, r16
    1488:	6e 5f       	subi	r22, 0xFE	; 254
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	c6 01       	movw	r24, r12
    148e:	8e dc       	rcall	.-1764   	; 0xdac <rb16_get_nth>
    1490:	a5 01       	movw	r20, r10
    1492:	bb 0c       	add	r11, r11
    1494:	66 0b       	sbc	r22, r22
    1496:	77 0b       	sbc	r23, r23
    1498:	8a 01       	movw	r16, r20
    149a:	9b 01       	movw	r18, r22
    149c:	00 0f       	add	r16, r16
    149e:	11 1f       	adc	r17, r17
    14a0:	22 1f       	adc	r18, r18
    14a2:	33 1f       	adc	r19, r19
    14a4:	40 0f       	add	r20, r16
    14a6:	51 1f       	adc	r21, r17
    14a8:	62 1f       	adc	r22, r18
    14aa:	73 1f       	adc	r23, r19
    14ac:	87 01       	movw	r16, r14
    14ae:	ff 0c       	add	r15, r15
    14b0:	22 0b       	sbc	r18, r18
    14b2:	33 0b       	sbc	r19, r19
    14b4:	78 01       	movw	r14, r16
    14b6:	89 01       	movw	r16, r18
    14b8:	ee 0c       	add	r14, r14
    14ba:	ff 1c       	adc	r15, r15
    14bc:	00 1f       	adc	r16, r16
    14be:	11 1f       	adc	r17, r17
    14c0:	ee 0c       	add	r14, r14
    14c2:	ff 1c       	adc	r15, r15
    14c4:	00 1f       	adc	r16, r16
    14c6:	11 1f       	adc	r17, r17
    14c8:	4a 01       	movw	r8, r20
    14ca:	5b 01       	movw	r10, r22
    14cc:	8e 18       	sub	r8, r14
    14ce:	9f 08       	sbc	r9, r15
    14d0:	a0 0a       	sbc	r10, r16
    14d2:	b1 0a       	sbc	r11, r17
    14d4:	ac 01       	movw	r20, r24
    14d6:	99 0f       	add	r25, r25
    14d8:	66 0b       	sbc	r22, r22
    14da:	77 0b       	sbc	r23, r23
    14dc:	d5 01       	movw	r26, r10
    14de:	c4 01       	movw	r24, r8
    14e0:	84 0f       	add	r24, r20
    14e2:	95 1f       	adc	r25, r21
    14e4:	a6 1f       	adc	r26, r22
    14e6:	b7 1f       	adc	r27, r23
    14e8:	9c 01       	movw	r18, r24
    14ea:	ad 01       	movw	r20, r26
    14ec:	69 81       	ldd	r22, Y+1	; 0x01
    14ee:	7a 81       	ldd	r23, Y+2	; 0x02
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	0e 94 2e 1c 	call	0x385c	; 0x385c <__mulsi3>
    14f8:	0e 94 2a 19 	call	0x3254	; 0x3254 <__floatsisf>
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1508:	9b 01       	movw	r18, r22
    150a:	ac 01       	movw	r20, r24
    150c:	c3 01       	movw	r24, r6
    150e:	b2 01       	movw	r22, r4
    1510:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1514:	2b 01       	movw	r4, r22
    1516:	3c 01       	movw	r6, r24
    1518:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    151c:	81 01       	movw	r16, r2
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	22 16       	cp	r2, r18
    1524:	33 06       	cpc	r3, r19
    1526:	08 f4       	brcc	.+2      	; 0x152a <diff+0x10e>
    1528:	a2 cf       	rjmp	.-188    	; 0x146e <diff+0x52>
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <diff+0x116>
    152c:	41 2c       	mov	r4, r1
    152e:	51 2c       	mov	r5, r1
    1530:	32 01       	movw	r6, r4
    1532:	68 2f       	mov	r22, r24
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 2a 19 	call	0x3254	; 0x3254 <__floatsisf>
    153e:	9b 01       	movw	r18, r22
    1540:	ac 01       	movw	r20, r24
    1542:	c3 01       	movw	r24, r6
    1544:	b2 01       	movw	r22, r4
    1546:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	48 ec       	ldi	r20, 0xC8	; 200
    1550:	52 e4       	ldi	r21, 0x42	; 66
    1552:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    1556:	26 96       	adiw	r28, 0x06	; 6
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	df 90       	pop	r13
    156a:	cf 90       	pop	r12
    156c:	bf 90       	pop	r11
    156e:	af 90       	pop	r10
    1570:	9f 90       	pop	r9
    1572:	8f 90       	pop	r8
    1574:	7f 90       	pop	r7
    1576:	6f 90       	pop	r6
    1578:	5f 90       	pop	r5
    157a:	4f 90       	pop	r4
    157c:	3f 90       	pop	r3
    157e:	2f 90       	pop	r2
    1580:	08 95       	ret

00001582 <data_check>:
    1582:	3f 92       	push	r3
    1584:	4f 92       	push	r4
    1586:	5f 92       	push	r5
    1588:	6f 92       	push	r6
    158a:	7f 92       	push	r7
    158c:	8f 92       	push	r8
    158e:	9f 92       	push	r9
    1590:	af 92       	push	r10
    1592:	bf 92       	push	r11
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <data_check+0x24>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <data_check+0x26>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	8c 01       	movw	r16, r24
    15ae:	19 82       	std	Y+1, r1	; 0x01
    15b0:	1a 82       	std	Y+2, r1	; 0x02
    15b2:	c1 2c       	mov	r12, r1
    15b4:	d1 2c       	mov	r13, r1
    15b6:	76 01       	movw	r14, r12
    15b8:	69 81       	ldd	r22, Y+1	; 0x01
    15ba:	7a 81       	ldd	r23, Y+2	; 0x02
    15bc:	c8 01       	movw	r24, r16
    15be:	7e dc       	rcall	.-1796   	; 0xebc <rb32_get_nth>
    15c0:	4b 01       	movw	r8, r22
    15c2:	5c 01       	movw	r10, r24
    15c4:	21 ea       	ldi	r18, 0xA1	; 161
    15c6:	82 1a       	sub	r8, r18
    15c8:	26 e8       	ldi	r18, 0x86	; 134
    15ca:	92 0a       	sbc	r9, r18
    15cc:	21 e0       	ldi	r18, 0x01	; 1
    15ce:	a2 0a       	sbc	r10, r18
    15d0:	b1 08       	sbc	r11, r1
    15d2:	2f ed       	ldi	r18, 0xDF	; 223
    15d4:	82 16       	cp	r8, r18
    15d6:	2f e0       	ldi	r18, 0x0F	; 15
    15d8:	92 06       	cpc	r9, r18
    15da:	27 e9       	ldi	r18, 0x97	; 151
    15dc:	a2 06       	cpc	r10, r18
    15de:	b1 04       	cpc	r11, r1
    15e0:	80 f4       	brcc	.+32     	; 0x1602 <data_check+0x80>
    15e2:	0e 94 2a 19 	call	0x3254	; 0x3254 <__floatsisf>
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 ea       	ldi	r20, 0xA0	; 160
    15ec:	50 e4       	ldi	r21, 0x40	; 64
    15ee:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    15f2:	9b 01       	movw	r18, r22
    15f4:	ac 01       	movw	r20, r24
    15f6:	c7 01       	movw	r24, r14
    15f8:	b6 01       	movw	r22, r12
    15fa:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    15fe:	6b 01       	movw	r12, r22
    1600:	7c 01       	movw	r14, r24
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	05 97       	sbiw	r24, 0x05	; 5
    160e:	a1 f6       	brne	.-88     	; 0x15b8 <data_check+0x36>
    1610:	19 82       	std	Y+1, r1	; 0x01
    1612:	1a 82       	std	Y+2, r1	; 0x02
    1614:	81 2c       	mov	r8, r1
    1616:	91 2c       	mov	r9, r1
    1618:	54 01       	movw	r10, r8
    161a:	69 81       	ldd	r22, Y+1	; 0x01
    161c:	7a 81       	ldd	r23, Y+2	; 0x02
    161e:	c8 01       	movw	r24, r16
    1620:	4d dc       	rcall	.-1894   	; 0xebc <rb32_get_nth>
    1622:	2b 01       	movw	r4, r22
    1624:	3c 01       	movw	r6, r24
    1626:	21 ea       	ldi	r18, 0xA1	; 161
    1628:	42 1a       	sub	r4, r18
    162a:	26 e8       	ldi	r18, 0x86	; 134
    162c:	52 0a       	sbc	r5, r18
    162e:	21 e0       	ldi	r18, 0x01	; 1
    1630:	62 0a       	sbc	r6, r18
    1632:	71 08       	sbc	r7, r1
    1634:	2f ed       	ldi	r18, 0xDF	; 223
    1636:	42 16       	cp	r4, r18
    1638:	2f e0       	ldi	r18, 0x0F	; 15
    163a:	52 06       	cpc	r5, r18
    163c:	27 e9       	ldi	r18, 0x97	; 151
    163e:	62 06       	cpc	r6, r18
    1640:	71 04       	cpc	r7, r1
    1642:	90 f4       	brcc	.+36     	; 0x1668 <data_check+0xe6>
    1644:	0e 94 2a 19 	call	0x3254	; 0x3254 <__floatsisf>
    1648:	a7 01       	movw	r20, r14
    164a:	96 01       	movw	r18, r12
    164c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    1650:	9b 01       	movw	r18, r22
    1652:	ac 01       	movw	r20, r24
    1654:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1658:	9b 01       	movw	r18, r22
    165a:	ac 01       	movw	r20, r24
    165c:	c5 01       	movw	r24, r10
    165e:	b4 01       	movw	r22, r8
    1660:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1664:	4b 01       	movw	r8, r22
    1666:	5c 01       	movw	r10, r24
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	9a 83       	std	Y+2, r25	; 0x02
    1672:	05 97       	sbiw	r24, 0x05	; 5
    1674:	91 f6       	brne	.-92     	; 0x161a <data_check+0x98>
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5e e3       	ldi	r21, 0x3E	; 62
    167e:	c5 01       	movw	r24, r10
    1680:	b4 01       	movw	r22, r8
    1682:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1686:	69 83       	std	Y+1, r22	; 0x01
    1688:	7a 83       	std	Y+2, r23	; 0x02
    168a:	8b 83       	std	Y+3, r24	; 0x03
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	1d 82       	std	Y+5, r1	; 0x05
    1690:	1e 82       	std	Y+6, r1	; 0x06
    1692:	31 2c       	mov	r3, r1
    1694:	41 2c       	mov	r4, r1
    1696:	51 2c       	mov	r5, r1
    1698:	32 01       	movw	r6, r4
    169a:	6d 81       	ldd	r22, Y+5	; 0x05
    169c:	7e 81       	ldd	r23, Y+6	; 0x06
    169e:	c8 01       	movw	r24, r16
    16a0:	0d dc       	rcall	.-2022   	; 0xebc <rb32_get_nth>
    16a2:	4b 01       	movw	r8, r22
    16a4:	5c 01       	movw	r10, r24
    16a6:	21 ea       	ldi	r18, 0xA1	; 161
    16a8:	82 1a       	sub	r8, r18
    16aa:	26 e8       	ldi	r18, 0x86	; 134
    16ac:	92 0a       	sbc	r9, r18
    16ae:	21 e0       	ldi	r18, 0x01	; 1
    16b0:	a2 0a       	sbc	r10, r18
    16b2:	b1 08       	sbc	r11, r1
    16b4:	2f ed       	ldi	r18, 0xDF	; 223
    16b6:	82 16       	cp	r8, r18
    16b8:	2f e0       	ldi	r18, 0x0F	; 15
    16ba:	92 06       	cpc	r9, r18
    16bc:	27 e9       	ldi	r18, 0x97	; 151
    16be:	a2 06       	cpc	r10, r18
    16c0:	b1 04       	cpc	r11, r1
    16c2:	50 f5       	brcc	.+84     	; 0x1718 <data_check+0x196>
    16c4:	0e 94 2a 19 	call	0x3254	; 0x3254 <__floatsisf>
    16c8:	4b 01       	movw	r8, r22
    16ca:	5c 01       	movw	r10, r24
    16cc:	a7 01       	movw	r20, r14
    16ce:	96 01       	movw	r18, r12
    16d0:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    16d4:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    16d8:	9b 01       	movw	r18, r22
    16da:	77 23       	and	r23, r23
    16dc:	24 f4       	brge	.+8      	; 0x16e6 <data_check+0x164>
    16de:	22 27       	eor	r18, r18
    16e0:	33 27       	eor	r19, r19
    16e2:	26 1b       	sub	r18, r22
    16e4:	37 0b       	sbc	r19, r23
    16e6:	b9 01       	movw	r22, r18
    16e8:	33 0f       	add	r19, r19
    16ea:	88 0b       	sbc	r24, r24
    16ec:	99 0b       	sbc	r25, r25
    16ee:	0e 94 2a 19 	call	0x3254	; 0x3254 <__floatsisf>
    16f2:	9b 01       	movw	r18, r22
    16f4:	ac 01       	movw	r20, r24
    16f6:	69 81       	ldd	r22, Y+1	; 0x01
    16f8:	7a 81       	ldd	r23, Y+2	; 0x02
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__gesf2>
    1702:	88 23       	and	r24, r24
    1704:	4c f0       	brlt	.+18     	; 0x1718 <data_check+0x196>
    1706:	a5 01       	movw	r20, r10
    1708:	94 01       	movw	r18, r8
    170a:	c3 01       	movw	r24, r6
    170c:	b2 01       	movw	r22, r4
    170e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1712:	2b 01       	movw	r4, r22
    1714:	3c 01       	movw	r6, r24
    1716:	33 94       	inc	r3
    1718:	8d 81       	ldd	r24, Y+5	; 0x05
    171a:	9e 81       	ldd	r25, Y+6	; 0x06
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	05 97       	sbiw	r24, 0x05	; 5
    1724:	09 f0       	breq	.+2      	; 0x1728 <data_check+0x1a6>
    1726:	b9 cf       	rjmp	.-142    	; 0x169a <data_check+0x118>
    1728:	33 20       	and	r3, r3
    172a:	69 f0       	breq	.+26     	; 0x1746 <data_check+0x1c4>
    172c:	63 2d       	mov	r22, r3
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatunsisf>
    1738:	9b 01       	movw	r18, r22
    173a:	ac 01       	movw	r20, r24
    173c:	c3 01       	movw	r24, r6
    173e:	b2 01       	movw	r22, r4
    1740:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    1744:	04 c0       	rjmp	.+8      	; 0x174e <data_check+0x1cc>
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	80 e8       	ldi	r24, 0x80	; 128
    174c:	9f eb       	ldi	r25, 0xBF	; 191
    174e:	26 96       	adiw	r28, 0x06	; 6
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	df 90       	pop	r13
    1762:	cf 90       	pop	r12
    1764:	bf 90       	pop	r11
    1766:	af 90       	pop	r10
    1768:	9f 90       	pop	r9
    176a:	8f 90       	pop	r8
    176c:	7f 90       	pop	r7
    176e:	6f 90       	pop	r6
    1770:	5f 90       	pop	r5
    1772:	4f 90       	pop	r4
    1774:	3f 90       	pop	r3
    1776:	08 95       	ret

00001778 <data_collect>:
    1778:	af 92       	push	r10
    177a:	bf 92       	push	r11
    177c:	cf 92       	push	r12
    177e:	df 92       	push	r13
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	00 d0       	rcall	.+0      	; 0x178e <data_collect+0x16>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <data_collect+0x18>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	5c 01       	movw	r10, r24
    1796:	8b 01       	movw	r16, r22
    1798:	66 dc       	rcall	.-1844   	; 0x1066 <get_pressure>
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    17a6:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    17aa:	69 83       	std	Y+1, r22	; 0x01
    17ac:	7a 83       	std	Y+2, r23	; 0x02
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	9c 83       	std	Y+4, r25	; 0x04
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	be 01       	movw	r22, r28
    17b8:	6f 5f       	subi	r22, 0xFF	; 255
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	c8 01       	movw	r24, r16
    17be:	23 db       	rcall	.-2490   	; 0xe06 <rb32_write>
    17c0:	c8 01       	movw	r24, r16
    17c2:	df de       	rcall	.-578    	; 0x1582 <data_check>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	51 e4       	ldi	r21, 0x41	; 65
    17cc:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    17d0:	6b 01       	movw	r12, r22
    17d2:	7c 01       	movw	r14, r24
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e8       	ldi	r20, 0x80	; 128
    17da:	5f eb       	ldi	r21, 0xBF	; 191
    17dc:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__cmpsf2>
    17e0:	88 23       	and	r24, r24
    17e2:	81 f1       	breq	.+96     	; 0x1844 <data_collect+0xcc>
    17e4:	c0 92 e6 20 	sts	0x20E6, r12	; 0x8020e6 <press>
    17e8:	d0 92 e7 20 	sts	0x20E7, r13	; 0x8020e7 <press+0x1>
    17ec:	e0 92 e8 20 	sts	0x20E8, r14	; 0x8020e8 <press+0x2>
    17f0:	f0 92 e9 20 	sts	0x20E9, r15	; 0x8020e9 <press+0x3>
    17f4:	c7 01       	movw	r24, r14
    17f6:	b6 01       	movw	r22, r12
    17f8:	6e dd       	rcall	.-1316   	; 0x12d6 <get_altitude>
    17fa:	60 93 de 20 	sts	0x20DE, r22	; 0x8020de <alt>
    17fe:	70 93 df 20 	sts	0x20DF, r23	; 0x8020df <alt+0x1>
    1802:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <alt+0x2>
    1806:	90 93 e1 20 	sts	0x20E1, r25	; 0x8020e1 <alt+0x3>
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	48 ec       	ldi	r20, 0xC8	; 200
    1810:	52 e4       	ldi	r21, 0x42	; 66
    1812:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1816:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    181a:	6d 83       	std	Y+5, r22	; 0x05
    181c:	7e 83       	std	Y+6, r23	; 0x06
    181e:	41 e0       	ldi	r20, 0x01	; 1
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	be 01       	movw	r22, r28
    1824:	6b 5f       	subi	r22, 0xFB	; 251
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	c5 01       	movw	r24, r10
    182a:	77 da       	rcall	.-2834   	; 0xd1a <rb16_write>
    182c:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    1830:	c5 01       	movw	r24, r10
    1832:	f4 dd       	rcall	.-1048   	; 0x141c <diff>
    1834:	60 93 d6 20 	sts	0x20D6, r22	; 0x8020d6 <velocity>
    1838:	70 93 d7 20 	sts	0x20D7, r23	; 0x8020d7 <velocity+0x1>
    183c:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <velocity+0x2>
    1840:	90 93 d9 20 	sts	0x20D9, r25	; 0x8020d9 <velocity+0x3>
    1844:	bd dc       	rcall	.-1670   	; 0x11c0 <get_temperature>
    1846:	60 93 e2 20 	sts	0x20E2, r22	; 0x8020e2 <temp>
    184a:	70 93 e3 20 	sts	0x20E3, r23	; 0x8020e3 <temp+0x1>
    184e:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <temp+0x2>
    1852:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <temp+0x3>
    1856:	a8 dd       	rcall	.-1200   	; 0x13a8 <get_voltage>
    1858:	60 93 da 20 	sts	0x20DA, r22	; 0x8020da <volt>
    185c:	70 93 db 20 	sts	0x20DB, r23	; 0x8020db <volt+0x1>
    1860:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <volt+0x2>
    1864:	90 93 dd 20 	sts	0x20DD, r25	; 0x8020dd <volt+0x3>
    1868:	26 96       	adiw	r28, 0x06	; 6
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	df 90       	pop	r13
    187c:	cf 90       	pop	r12
    187e:	bf 90       	pop	r11
    1880:	af 90       	pop	r10
    1882:	08 95       	ret

00001884 <quaternion2euler>:
    1884:	4f 92       	push	r4
    1886:	5f 92       	push	r5
    1888:	6f 92       	push	r6
    188a:	7f 92       	push	r7
    188c:	8f 92       	push	r8
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	68 97       	sbiw	r28, 0x18	; 24
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	6d 8b       	std	Y+21, r22	; 0x15
    18b0:	7e 8b       	std	Y+22, r23	; 0x16
    18b2:	8f 8b       	std	Y+23, r24	; 0x17
    18b4:	98 8f       	std	Y+24, r25	; 0x18
    18b6:	2d 83       	std	Y+5, r18	; 0x05
    18b8:	3e 83       	std	Y+6, r19	; 0x06
    18ba:	4f 83       	std	Y+7, r20	; 0x07
    18bc:	58 87       	std	Y+8, r21	; 0x08
    18be:	e9 86       	std	Y+9, r14	; 0x09
    18c0:	fa 86       	std	Y+10, r15	; 0x0a
    18c2:	0b 87       	std	Y+11, r16	; 0x0b
    18c4:	1c 87       	std	Y+12, r17	; 0x0c
    18c6:	a8 01       	movw	r20, r16
    18c8:	97 01       	movw	r18, r14
    18ca:	c8 01       	movw	r24, r16
    18cc:	b7 01       	movw	r22, r14
    18ce:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    18d2:	69 8b       	std	Y+17, r22	; 0x11
    18d4:	7a 8b       	std	Y+18, r23	; 0x12
    18d6:	8b 8b       	std	Y+19, r24	; 0x13
    18d8:	9c 8b       	std	Y+20, r25	; 0x14
    18da:	2d 81       	ldd	r18, Y+5	; 0x05
    18dc:	3e 81       	ldd	r19, Y+6	; 0x06
    18de:	4f 81       	ldd	r20, Y+7	; 0x07
    18e0:	58 85       	ldd	r21, Y+8	; 0x08
    18e2:	ca 01       	movw	r24, r20
    18e4:	b9 01       	movw	r22, r18
    18e6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    18ea:	29 89       	ldd	r18, Y+17	; 0x11
    18ec:	3a 89       	ldd	r19, Y+18	; 0x12
    18ee:	4b 89       	ldd	r20, Y+19	; 0x13
    18f0:	5c 89       	ldd	r21, Y+20	; 0x14
    18f2:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    18f6:	9b 01       	movw	r18, r22
    18f8:	ac 01       	movw	r20, r24
    18fa:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    18fe:	9b 01       	movw	r18, r22
    1900:	ac 01       	movw	r20, r24
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	80 e8       	ldi	r24, 0x80	; 128
    1908:	9f e3       	ldi	r25, 0x3F	; 63
    190a:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    190e:	2b 01       	movw	r4, r22
    1910:	3c 01       	movw	r6, r24
    1912:	2d 81       	ldd	r18, Y+5	; 0x05
    1914:	3e 81       	ldd	r19, Y+6	; 0x06
    1916:	4f 81       	ldd	r20, Y+7	; 0x07
    1918:	58 85       	ldd	r21, Y+8	; 0x08
    191a:	6d 89       	ldd	r22, Y+21	; 0x15
    191c:	7e 89       	ldd	r23, Y+22	; 0x16
    191e:	8f 89       	ldd	r24, Y+23	; 0x17
    1920:	98 8d       	ldd	r25, Y+24	; 0x18
    1922:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1926:	69 83       	std	Y+1, r22	; 0x01
    1928:	7a 83       	std	Y+2, r23	; 0x02
    192a:	8b 83       	std	Y+3, r24	; 0x03
    192c:	9c 83       	std	Y+4, r25	; 0x04
    192e:	a6 01       	movw	r20, r12
    1930:	95 01       	movw	r18, r10
    1932:	c8 01       	movw	r24, r16
    1934:	b7 01       	movw	r22, r14
    1936:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    193a:	9b 01       	movw	r18, r22
    193c:	ac 01       	movw	r20, r24
    193e:	69 81       	ldd	r22, Y+1	; 0x01
    1940:	7a 81       	ldd	r23, Y+2	; 0x02
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    194a:	9b 01       	movw	r18, r22
    194c:	ac 01       	movw	r20, r24
    194e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1952:	a3 01       	movw	r20, r6
    1954:	92 01       	movw	r18, r4
    1956:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <atan2>
    195a:	6d 87       	std	Y+13, r22	; 0x0d
    195c:	7e 87       	std	Y+14, r23	; 0x0e
    195e:	8f 87       	std	Y+15, r24	; 0x0f
    1960:	98 8b       	std	Y+16, r25	; 0x10
    1962:	a8 01       	movw	r20, r16
    1964:	97 01       	movw	r18, r14
    1966:	6d 89       	ldd	r22, Y+21	; 0x15
    1968:	7e 89       	ldd	r23, Y+22	; 0x16
    196a:	8f 89       	ldd	r24, Y+23	; 0x17
    196c:	98 8d       	ldd	r25, Y+24	; 0x18
    196e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1972:	2b 01       	movw	r4, r22
    1974:	3c 01       	movw	r6, r24
    1976:	a6 01       	movw	r20, r12
    1978:	95 01       	movw	r18, r10
    197a:	6d 81       	ldd	r22, Y+5	; 0x05
    197c:	7e 81       	ldd	r23, Y+6	; 0x06
    197e:	8f 81       	ldd	r24, Y+7	; 0x07
    1980:	98 85       	ldd	r25, Y+8	; 0x08
    1982:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1986:	9b 01       	movw	r18, r22
    1988:	ac 01       	movw	r20, r24
    198a:	c3 01       	movw	r24, r6
    198c:	b2 01       	movw	r22, r4
    198e:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    1992:	9b 01       	movw	r18, r22
    1994:	ac 01       	movw	r20, r24
    1996:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    199a:	2b 01       	movw	r4, r22
    199c:	3c 01       	movw	r6, r24
    199e:	9f 77       	andi	r25, 0x7F	; 127
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e8       	ldi	r20, 0x80	; 128
    19a6:	5f e3       	ldi	r21, 0x3F	; 63
    19a8:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__gesf2>
    19ac:	88 23       	and	r24, r24
    19ae:	5c f0       	brlt	.+22     	; 0x19c6 <quaternion2euler+0x142>
    19b0:	8b ed       	ldi	r24, 0xDB	; 219
    19b2:	9f e0       	ldi	r25, 0x0F	; 15
    19b4:	a9 ec       	ldi	r26, 0xC9	; 201
    19b6:	bf e3       	ldi	r27, 0x3F	; 63
    19b8:	77 fa       	bst	r7, 7
    19ba:	b7 f9       	bld	r27, 7
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	ab 83       	std	Y+3, r26	; 0x03
    19c2:	bc 83       	std	Y+4, r27	; 0x04
    19c4:	08 c0       	rjmp	.+16     	; 0x19d6 <quaternion2euler+0x152>
    19c6:	c3 01       	movw	r24, r6
    19c8:	b2 01       	movw	r22, r4
    19ca:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <asin>
    19ce:	69 83       	std	Y+1, r22	; 0x01
    19d0:	7a 83       	std	Y+2, r23	; 0x02
    19d2:	8b 83       	std	Y+3, r24	; 0x03
    19d4:	9c 83       	std	Y+4, r25	; 0x04
    19d6:	a6 01       	movw	r20, r12
    19d8:	95 01       	movw	r18, r10
    19da:	c6 01       	movw	r24, r12
    19dc:	b5 01       	movw	r22, r10
    19de:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    19e2:	29 89       	ldd	r18, Y+17	; 0x11
    19e4:	3a 89       	ldd	r19, Y+18	; 0x12
    19e6:	4b 89       	ldd	r20, Y+19	; 0x13
    19e8:	5c 89       	ldd	r21, Y+20	; 0x14
    19ea:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    19ee:	9b 01       	movw	r18, r22
    19f0:	ac 01       	movw	r20, r24
    19f2:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    19f6:	9b 01       	movw	r18, r22
    19f8:	ac 01       	movw	r20, r24
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	80 e8       	ldi	r24, 0x80	; 128
    1a00:	9f e3       	ldi	r25, 0x3F	; 63
    1a02:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__subsf3>
    1a06:	69 8b       	std	Y+17, r22	; 0x11
    1a08:	7a 8b       	std	Y+18, r23	; 0x12
    1a0a:	8b 8b       	std	Y+19, r24	; 0x13
    1a0c:	9c 8b       	std	Y+20, r25	; 0x14
    1a0e:	a6 01       	movw	r20, r12
    1a10:	95 01       	movw	r18, r10
    1a12:	6d 89       	ldd	r22, Y+21	; 0x15
    1a14:	7e 89       	ldd	r23, Y+22	; 0x16
    1a16:	8f 89       	ldd	r24, Y+23	; 0x17
    1a18:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1a1e:	2b 01       	movw	r4, r22
    1a20:	3c 01       	movw	r6, r24
    1a22:	29 85       	ldd	r18, Y+9	; 0x09
    1a24:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a26:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a28:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a2a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a2c:	7e 81       	ldd	r23, Y+6	; 0x06
    1a2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a30:	98 85       	ldd	r25, Y+8	; 0x08
    1a32:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1a36:	9b 01       	movw	r18, r22
    1a38:	ac 01       	movw	r20, r24
    1a3a:	c3 01       	movw	r24, r6
    1a3c:	b2 01       	movw	r22, r4
    1a3e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1a42:	9b 01       	movw	r18, r22
    1a44:	ac 01       	movw	r20, r24
    1a46:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1a4a:	29 89       	ldd	r18, Y+17	; 0x11
    1a4c:	3a 89       	ldd	r19, Y+18	; 0x12
    1a4e:	4b 89       	ldd	r20, Y+19	; 0x13
    1a50:	5c 89       	ldd	r21, Y+20	; 0x14
    1a52:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <atan2>
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	44 e3       	ldi	r20, 0x34	; 52
    1a5c:	53 e4       	ldi	r21, 0x43	; 67
    1a5e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1a62:	2b ed       	ldi	r18, 0xDB	; 219
    1a64:	3f e0       	ldi	r19, 0x0F	; 15
    1a66:	49 e4       	ldi	r20, 0x49	; 73
    1a68:	50 e4       	ldi	r21, 0x40	; 64
    1a6a:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    1a6e:	60 93 bc 20 	sts	0x20BC, r22	; 0x8020bc <roll>
    1a72:	70 93 bd 20 	sts	0x20BD, r23	; 0x8020bd <roll+0x1>
    1a76:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <roll+0x2>
    1a7a:	90 93 bf 20 	sts	0x20BF, r25	; 0x8020bf <roll+0x3>
    1a7e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a80:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a82:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a84:	58 89       	ldd	r21, Y+16	; 0x10
    1a86:	ca 01       	movw	r24, r20
    1a88:	b9 01       	movw	r22, r18
    1a8a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1a8e:	4b 01       	movw	r8, r22
    1a90:	5c 01       	movw	r10, r24
    1a92:	29 81       	ldd	r18, Y+1	; 0x01
    1a94:	3a 81       	ldd	r19, Y+2	; 0x02
    1a96:	4b 81       	ldd	r20, Y+3	; 0x03
    1a98:	5c 81       	ldd	r21, Y+4	; 0x04
    1a9a:	ca 01       	movw	r24, r20
    1a9c:	b9 01       	movw	r22, r18
    1a9e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1aa2:	9b 01       	movw	r18, r22
    1aa4:	ac 01       	movw	r20, r24
    1aa6:	c5 01       	movw	r24, r10
    1aa8:	b4 01       	movw	r22, r8
    1aaa:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1aae:	0e 94 3e 1b 	call	0x367c	; 0x367c <sqrt>
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	44 e3       	ldi	r20, 0x34	; 52
    1ab8:	53 e4       	ldi	r21, 0x43	; 67
    1aba:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1abe:	2b ed       	ldi	r18, 0xDB	; 219
    1ac0:	3f e0       	ldi	r19, 0x0F	; 15
    1ac2:	49 e4       	ldi	r20, 0x49	; 73
    1ac4:	50 e4       	ldi	r21, 0x40	; 64
    1ac6:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    1aca:	60 93 c0 20 	sts	0x20C0, r22	; 0x8020c0 <pitch>
    1ace:	70 93 c1 20 	sts	0x20C1, r23	; 0x8020c1 <pitch+0x1>
    1ad2:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <pitch+0x2>
    1ad6:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <pitch+0x3>
    1ada:	68 96       	adiw	r28, 0x18	; 24
    1adc:	cd bf       	out	0x3d, r28	; 61
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	ff 90       	pop	r15
    1aea:	ef 90       	pop	r14
    1aec:	df 90       	pop	r13
    1aee:	cf 90       	pop	r12
    1af0:	bf 90       	pop	r11
    1af2:	af 90       	pop	r10
    1af4:	9f 90       	pop	r9
    1af6:	8f 90       	pop	r8
    1af8:	7f 90       	pop	r7
    1afa:	6f 90       	pop	r6
    1afc:	5f 90       	pop	r5
    1afe:	4f 90       	pop	r4
    1b00:	08 95       	ret

00001b02 <state_check>:
    1b02:	cf 92       	push	r12
    1b04:	df 92       	push	r13
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	c0 90 d6 20 	lds	r12, 0x20D6	; 0x8020d6 <velocity>
    1b0e:	d0 90 d7 20 	lds	r13, 0x20D7	; 0x8020d7 <velocity+0x1>
    1b12:	e0 90 d8 20 	lds	r14, 0x20D8	; 0x8020d8 <velocity+0x2>
    1b16:	f0 90 d9 20 	lds	r15, 0x20D9	; 0x8020d9 <velocity+0x3>
    1b1a:	c7 01       	movw	r24, r14
    1b1c:	b6 01       	movw	r22, r12
    1b1e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1b22:	9b 01       	movw	r18, r22
    1b24:	77 23       	and	r23, r23
    1b26:	24 f4       	brge	.+8      	; 0x1b30 <state_check+0x2e>
    1b28:	22 27       	eor	r18, r18
    1b2a:	33 27       	eor	r19, r19
    1b2c:	26 1b       	sub	r18, r22
    1b2e:	37 0b       	sbc	r19, r23
    1b30:	26 30       	cpi	r18, 0x06	; 6
    1b32:	31 05       	cpc	r19, r1
    1b34:	8c f0       	brlt	.+34     	; 0x1b58 <state_check+0x56>
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	a9 01       	movw	r20, r18
    1b3c:	c7 01       	movw	r24, r14
    1b3e:	b6 01       	movw	r22, r12
    1b40:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__cmpsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	24 f0       	brlt	.+8      	; 0x1b50 <state_check+0x4e>
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <state>
    1b4e:	24 c0       	rjmp	.+72     	; 0x1b98 <state_check+0x96>
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <state>
    1b56:	20 c0       	rjmp	.+64     	; 0x1b98 <state_check+0x96>
    1b58:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <state>
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	48 e4       	ldi	r20, 0x48	; 72
    1b62:	52 e4       	ldi	r21, 0x42	; 66
    1b64:	60 91 de 20 	lds	r22, 0x20DE	; 0x8020de <alt>
    1b68:	70 91 df 20 	lds	r23, 0x20DF	; 0x8020df <alt+0x1>
    1b6c:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <alt+0x2>
    1b70:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <alt+0x3>
    1b74:	0e 94 3b 1a 	call	0x3476	; 0x3476 <__gesf2>
    1b78:	18 16       	cp	r1, r24
    1b7a:	24 f0       	brlt	.+8      	; 0x1b84 <state_check+0x82>
    1b7c:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <reset_received>
    1b80:	88 23       	and	r24, r24
    1b82:	19 f0       	breq	.+6      	; 0x1b8a <state_check+0x88>
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <state>
    1b8a:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <released>
    1b8e:	88 23       	and	r24, r24
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <state_check+0x96>
    1b92:	83 e0       	ldi	r24, 0x03	; 3
    1b94:	80 93 07 21 	sts	0x2107, r24	; 0x802107 <state>
    1b98:	ff 90       	pop	r15
    1b9a:	ef 90       	pop	r14
    1b9c:	df 90       	pop	r13
    1b9e:	cf 90       	pop	r12
    1ba0:	08 95       	ret

00001ba2 <release_servo_init>:
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	84 e0       	ldi	r24, 0x04	; 4
    1ba6:	f4 d9       	rcall	.-3096   	; 0xf90 <sysclk_enable_module>
    1ba8:	64 e0       	ldi	r22, 0x04	; 4
    1baa:	84 e0       	ldi	r24, 0x04	; 4
    1bac:	f1 d9       	rcall	.-3102   	; 0xf90 <sysclk_enable_module>
    1bae:	e0 e0       	ldi	r30, 0x00	; 0
    1bb0:	f6 e0       	ldi	r31, 0x06	; 6
    1bb2:	80 81       	ld	r24, Z
    1bb4:	82 60       	ori	r24, 0x02	; 2
    1bb6:	80 83       	st	Z, r24
    1bb8:	84 81       	ldd	r24, Z+4	; 0x04
    1bba:	82 60       	ori	r24, 0x02	; 2
    1bbc:	84 83       	std	Z+4, r24	; 0x04
    1bbe:	e0 e6       	ldi	r30, 0x60	; 96
    1bc0:	f6 e0       	ldi	r31, 0x06	; 6
    1bc2:	80 81       	ld	r24, Z
    1bc4:	87 60       	ori	r24, 0x07	; 7
    1bc6:	80 83       	st	Z, r24
    1bc8:	e0 e0       	ldi	r30, 0x00	; 0
    1bca:	f9 e0       	ldi	r31, 0x09	; 9
    1bcc:	85 e0       	ldi	r24, 0x05	; 5
    1bce:	80 83       	st	Z, r24
    1bd0:	83 e1       	ldi	r24, 0x13	; 19
    1bd2:	81 83       	std	Z+1, r24	; 0x01
    1bd4:	80 e1       	ldi	r24, 0x10	; 16
    1bd6:	97 e2       	ldi	r25, 0x27	; 39
    1bd8:	86 a3       	std	Z+38, r24	; 0x26
    1bda:	97 a3       	std	Z+39, r25	; 0x27
    1bdc:	80 e2       	ldi	r24, 0x20	; 32
    1bde:	93 e0       	ldi	r25, 0x03	; 3
    1be0:	80 a7       	std	Z+40, r24	; 0x28
    1be2:	91 a7       	std	Z+41, r25	; 0x29
    1be4:	08 95       	ret

00001be6 <servo_pid>:
    1be6:	8f 92       	push	r8
    1be8:	9f 92       	push	r9
    1bea:	af 92       	push	r10
    1bec:	bf 92       	push	r11
    1bee:	cf 92       	push	r12
    1bf0:	df 92       	push	r13
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	7c 01       	movw	r14, r24
    1c00:	c0 e0       	ldi	r28, 0x00	; 0
    1c02:	d0 e0       	ldi	r29, 0x00	; 0
    1c04:	00 e0       	ldi	r16, 0x00	; 0
    1c06:	10 e0       	ldi	r17, 0x00	; 0
    1c08:	be 01       	movw	r22, r28
    1c0a:	c7 01       	movw	r24, r14
    1c0c:	cf d8       	rcall	.-3682   	; 0xdac <rb16_get_nth>
    1c0e:	08 0f       	add	r16, r24
    1c10:	19 1f       	adc	r17, r25
    1c12:	21 96       	adiw	r28, 0x01	; 1
    1c14:	ca 30       	cpi	r28, 0x0A	; 10
    1c16:	d1 05       	cpc	r29, r1
    1c18:	b9 f7       	brne	.-18     	; 0x1c08 <servo_pid+0x22>
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	70 e0       	ldi	r23, 0x00	; 0
    1c1e:	c7 01       	movw	r24, r14
    1c20:	c5 d8       	rcall	.-3702   	; 0xdac <rb16_get_nth>
    1c22:	ec 01       	movw	r28, r24
    1c24:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    1c28:	c7 01       	movw	r24, r14
    1c2a:	f8 db       	rcall	.-2064   	; 0x141c <diff>
    1c2c:	6b 01       	movw	r12, r22
    1c2e:	7c 01       	movw	r14, r24
    1c30:	be 01       	movw	r22, r28
    1c32:	dd 0f       	add	r29, r29
    1c34:	88 0b       	sbc	r24, r24
    1c36:	99 0b       	sbc	r25, r25
    1c38:	0e 94 2a 19 	call	0x3254	; 0x3254 <__floatsisf>
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	a9 01       	movw	r20, r18
    1c42:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	48 ec       	ldi	r20, 0xC8	; 200
    1c4c:	52 e4       	ldi	r21, 0x42	; 66
    1c4e:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    1c52:	4b 01       	movw	r8, r22
    1c54:	5c 01       	movw	r10, r24
    1c56:	b8 01       	movw	r22, r16
    1c58:	11 0f       	add	r17, r17
    1c5a:	88 0b       	sbc	r24, r24
    1c5c:	99 0b       	sbc	r25, r25
    1c5e:	0e 94 2a 19 	call	0x3254	; 0x3254 <__floatsisf>
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	a9 01       	movw	r20, r18
    1c68:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	48 ec       	ldi	r20, 0xC8	; 200
    1c72:	52 e4       	ldi	r21, 0x42	; 66
    1c74:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    1c78:	9b 01       	movw	r18, r22
    1c7a:	ac 01       	movw	r20, r24
    1c7c:	c5 01       	movw	r24, r10
    1c7e:	b4 01       	movw	r22, r8
    1c80:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1c84:	4b 01       	movw	r8, r22
    1c86:	5c 01       	movw	r10, r24
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	a9 01       	movw	r20, r18
    1c8e:	c7 01       	movw	r24, r14
    1c90:	b6 01       	movw	r22, r12
    1c92:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1c96:	9b 01       	movw	r18, r22
    1c98:	ac 01       	movw	r20, r24
    1c9a:	c5 01       	movw	r24, r10
    1c9c:	b4 01       	movw	r22, r8
    1c9e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e8       	ldi	r19, 0x80	; 128
    1ca6:	4b eb       	ldi	r20, 0xBB	; 187
    1ca8:	54 e4       	ldi	r21, 0x44	; 68
    1caa:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__addsf3>
    1cae:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__fixunssfsi>
    1cb2:	60 93 1b 20 	sts	0x201B, r22	; 0x80201b <servo_pulse>
    1cb6:	70 93 1c 20 	sts	0x201C, r23	; 0x80201c <servo_pulse+0x1>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 28 19 	call	0x3250	; 0x3250 <__floatunsisf>
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a e7       	ldi	r20, 0x7A	; 122
    1cc8:	54 e4       	ldi	r21, 0x44	; 68
    1cca:	0e 94 55 18 	call	0x30aa	; 0x30aa <__divsf3>
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a ef       	ldi	r20, 0xFA	; 250
    1cd4:	53 e4       	ldi	r21, 0x43	; 67
    1cd6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1cda:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__fixunssfsi>
    1cde:	60 93 28 09 	sts	0x0928, r22	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
    1ce2:	70 93 29 09 	sts	0x0929, r23	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	df 90       	pop	r13
    1cf4:	cf 90       	pop	r12
    1cf6:	bf 90       	pop	r11
    1cf8:	af 90       	pop	r10
    1cfa:	9f 90       	pop	r9
    1cfc:	8f 90       	pop	r8
    1cfe:	08 95       	ret

00001d00 <clock_init>:
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	85 e0       	ldi	r24, 0x05	; 5
    1d04:	45 d9       	rcall	.-3446   	; 0xf90 <sysclk_enable_module>
    1d06:	e0 e0       	ldi	r30, 0x00	; 0
    1d08:	fa e0       	ldi	r31, 0x0A	; 10
    1d0a:	87 e0       	ldi	r24, 0x07	; 7
    1d0c:	80 83       	st	Z, r24
    1d0e:	84 e3       	ldi	r24, 0x34	; 52
    1d10:	9c e0       	ldi	r25, 0x0C	; 12
    1d12:	86 a3       	std	Z+38, r24	; 0x26
    1d14:	97 a3       	std	Z+39, r25	; 0x27
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	86 83       	std	Z+6, r24	; 0x06
    1d1a:	08 95       	ret

00001d1c <cali_alt>:
    1d1c:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <press>
    1d20:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <press+0x1>
    1d24:	a0 91 e8 20 	lds	r26, 0x20E8	; 0x8020e8 <press+0x2>
    1d28:	b0 91 e9 20 	lds	r27, 0x20E9	; 0x8020e9 <press+0x3>
    1d2c:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p>
    1d30:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x1>
    1d34:	a0 93 2f 20 	sts	0x202F, r26	; 0x80202f <ground_p+0x2>
    1d38:	b0 93 30 20 	sts	0x2030, r27	; 0x802030 <ground_p+0x3>
    1d3c:	41 da       	rcall	.-2942   	; 0x11c0 <get_temperature>
    1d3e:	60 93 29 20 	sts	0x2029, r22	; 0x802029 <ground_t>
    1d42:	70 93 2a 20 	sts	0x202A, r23	; 0x80202a <ground_t+0x1>
    1d46:	80 93 2b 20 	sts	0x202B, r24	; 0x80202b <ground_t+0x2>
    1d4a:	90 93 2c 20 	sts	0x202C, r25	; 0x80202c <ground_t+0x3>
    1d4e:	08 95       	ret

00001d50 <send_gps>:
    1d50:	8f 92       	push	r8
    1d52:	9f 92       	push	r9
    1d54:	af 92       	push	r10
    1d56:	bf 92       	push	r11
    1d58:	cf 92       	push	r12
    1d5a:	df 92       	push	r13
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	c6 54       	subi	r28, 0x46	; 70
    1d6e:	d1 09       	sbc	r29, r1
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	60 91 ca 20 	lds	r22, 0x20CA	; 0x8020ca <gps_long>
    1d78:	70 91 cb 20 	lds	r23, 0x20CB	; 0x8020cb <gps_long+0x1>
    1d7c:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <gps_long+0x2>
    1d80:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <gps_long+0x3>
    1d84:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1d88:	16 2f       	mov	r17, r22
    1d8a:	07 2f       	mov	r16, r23
    1d8c:	c0 90 ce 20 	lds	r12, 0x20CE	; 0x8020ce <gps_lat>
    1d90:	d0 90 cf 20 	lds	r13, 0x20CF	; 0x8020cf <gps_lat+0x1>
    1d94:	e0 90 d0 20 	lds	r14, 0x20D0	; 0x8020d0 <gps_lat+0x2>
    1d98:	f0 90 d1 20 	lds	r15, 0x20D1	; 0x8020d1 <gps_lat+0x3>
    1d9c:	a6 2f       	mov	r26, r22
    1d9e:	b7 2f       	mov	r27, r23
    1da0:	bb 23       	and	r27, r27
    1da2:	1c f4       	brge	.+6      	; 0x1daa <send_gps+0x5a>
    1da4:	b1 95       	neg	r27
    1da6:	a1 95       	neg	r26
    1da8:	b1 09       	sbc	r27, r1
    1daa:	20 e4       	ldi	r18, 0x40	; 64
    1dac:	32 e4       	ldi	r19, 0x42	; 66
    1dae:	4f e0       	ldi	r20, 0x0F	; 15
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	0e 94 bb 1c 	call	0x3976	; 0x3976 <__mulshisi3>
    1db6:	0f 2e       	mov	r0, r31
    1db8:	f0 e4       	ldi	r31, 0x40	; 64
    1dba:	8f 2e       	mov	r8, r31
    1dbc:	f2 e4       	ldi	r31, 0x42	; 66
    1dbe:	9f 2e       	mov	r9, r31
    1dc0:	ff e0       	ldi	r31, 0x0F	; 15
    1dc2:	af 2e       	mov	r10, r31
    1dc4:	b1 2c       	mov	r11, r1
    1dc6:	f0 2d       	mov	r31, r0
    1dc8:	0e 94 86 1c 	call	0x390c	; 0x390c <__divmodsi4>
    1dcc:	9f 93       	push	r25
    1dce:	8f 93       	push	r24
    1dd0:	7f 93       	push	r23
    1dd2:	6f 93       	push	r22
    1dd4:	0f 93       	push	r16
    1dd6:	1f 93       	push	r17
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	34 e2       	ldi	r19, 0x24	; 36
    1ddc:	44 e7       	ldi	r20, 0x74	; 116
    1dde:	59 e4       	ldi	r21, 0x49	; 73
    1de0:	c7 01       	movw	r24, r14
    1de2:	b6 01       	movw	r22, r12
    1de4:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1de8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1dec:	a5 01       	movw	r20, r10
    1dee:	94 01       	movw	r18, r8
    1df0:	0e 94 86 1c 	call	0x390c	; 0x390c <__divmodsi4>
    1df4:	9f 93       	push	r25
    1df6:	8f 93       	push	r24
    1df8:	7f 93       	push	r23
    1dfa:	6f 93       	push	r22
    1dfc:	c7 01       	movw	r24, r14
    1dfe:	b6 01       	movw	r22, r12
    1e00:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1e04:	7f 93       	push	r23
    1e06:	6f 93       	push	r22
    1e08:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <gps_msg+0x1>
    1e0c:	8f 93       	push	r24
    1e0e:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <gps_msg>
    1e12:	8f 93       	push	r24
    1e14:	8e 01       	movw	r16, r28
    1e16:	0f 5f       	subi	r16, 0xFF	; 255
    1e18:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1a:	1f 93       	push	r17
    1e1c:	0f 93       	push	r16
    1e1e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <sprintf>
    1e22:	1f 93       	push	r17
    1e24:	0f 93       	push	r16
    1e26:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <printf>
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	ca 5b       	subi	r28, 0xBA	; 186
    1e30:	df 4f       	sbci	r29, 0xFF	; 255
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	df 90       	pop	r13
    1e44:	cf 90       	pop	r12
    1e46:	bf 90       	pop	r11
    1e48:	af 90       	pop	r10
    1e4a:	9f 90       	pop	r9
    1e4c:	8f 90       	pop	r8
    1e4e:	08 95       	ret

00001e50 <packet>:
    1e50:	2f 92       	push	r2
    1e52:	3f 92       	push	r3
    1e54:	4f 92       	push	r4
    1e56:	5f 92       	push	r5
    1e58:	6f 92       	push	r6
    1e5a:	7f 92       	push	r7
    1e5c:	8f 92       	push	r8
    1e5e:	9f 92       	push	r9
    1e60:	af 92       	push	r10
    1e62:	bf 92       	push	r11
    1e64:	cf 92       	push	r12
    1e66:	df 92       	push	r13
    1e68:	ef 92       	push	r14
    1e6a:	ff 92       	push	r15
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	00 91 ea 20 	lds	r16, 0x20EA	; 0x8020ea <packets>
    1e78:	10 91 eb 20 	lds	r17, 0x20EB	; 0x8020eb <packets+0x1>
    1e7c:	0f 5f       	subi	r16, 0xFF	; 255
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	00 93 ea 20 	sts	0x20EA, r16	; 0x8020ea <packets>
    1e84:	10 93 eb 20 	sts	0x20EB, r17	; 0x8020eb <packets+0x1>
    1e88:	60 91 c6 20 	lds	r22, 0x20C6	; 0x8020c6 <gps_alt>
    1e8c:	70 91 c7 20 	lds	r23, 0x20C7	; 0x8020c7 <gps_alt+0x1>
    1e90:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <gps_alt+0x2>
    1e94:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <gps_alt+0x3>
    1e98:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1e9c:	36 2e       	mov	r3, r22
    1e9e:	27 2e       	mov	r2, r23
    1ea0:	40 90 ca 20 	lds	r4, 0x20CA	; 0x8020ca <gps_long>
    1ea4:	50 90 cb 20 	lds	r5, 0x20CB	; 0x8020cb <gps_long+0x1>
    1ea8:	60 90 cc 20 	lds	r6, 0x20CC	; 0x8020cc <gps_long+0x2>
    1eac:	70 90 cd 20 	lds	r7, 0x20CD	; 0x8020cd <gps_long+0x3>
    1eb0:	80 90 ce 20 	lds	r8, 0x20CE	; 0x8020ce <gps_lat>
    1eb4:	90 90 cf 20 	lds	r9, 0x20CF	; 0x8020cf <gps_lat+0x1>
    1eb8:	a0 90 d0 20 	lds	r10, 0x20D0	; 0x8020d0 <gps_lat+0x2>
    1ebc:	b0 90 d1 20 	lds	r11, 0x20D1	; 0x8020d1 <gps_lat+0x3>
    1ec0:	60 91 d2 20 	lds	r22, 0x20D2	; 0x8020d2 <gps_t>
    1ec4:	70 91 d3 20 	lds	r23, 0x20D3	; 0x8020d3 <gps_t+0x1>
    1ec8:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <gps_t+0x2>
    1ecc:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <gps_t+0x3>
    1ed0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1ed4:	6b 01       	movw	r12, r22
    1ed6:	7c 01       	movw	r14, r24
    1ed8:	c0 91 ee 20 	lds	r28, 0x20EE	; 0x8020ee <timer>
    1edc:	d0 91 ef 20 	lds	r29, 0x20EF	; 0x8020ef <timer+0x1>
    1ee0:	60 91 b4 20 	lds	r22, 0x20B4	; 0x8020b4 <__data_end>
    1ee4:	70 91 b5 20 	lds	r23, 0x20B5	; 0x8020b5 <__data_end+0x1>
    1ee8:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <__data_end+0x2>
    1eec:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <__data_end+0x3>
    1ef0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1ef4:	7f 93       	push	r23
    1ef6:	6f 93       	push	r22
    1ef8:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <state>
    1efc:	1f 92       	push	r1
    1efe:	8f 93       	push	r24
    1f00:	60 91 b8 20 	lds	r22, 0x20B8	; 0x8020b8 <rpm>
    1f04:	70 91 b9 20 	lds	r23, 0x20B9	; 0x8020b9 <rpm+0x1>
    1f08:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <rpm+0x2>
    1f0c:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <rpm+0x3>
    1f10:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1f14:	7f 93       	push	r23
    1f16:	6f 93       	push	r22
    1f18:	60 91 bc 20 	lds	r22, 0x20BC	; 0x8020bc <roll>
    1f1c:	70 91 bd 20 	lds	r23, 0x20BD	; 0x8020bd <roll+0x1>
    1f20:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <roll+0x2>
    1f24:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <roll+0x3>
    1f28:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1f2c:	7f 93       	push	r23
    1f2e:	6f 93       	push	r22
    1f30:	60 91 c0 20 	lds	r22, 0x20C0	; 0x8020c0 <pitch>
    1f34:	70 91 c1 20 	lds	r23, 0x20C1	; 0x8020c1 <pitch+0x1>
    1f38:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <pitch+0x2>
    1f3c:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <pitch+0x3>
    1f40:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1f44:	7f 93       	push	r23
    1f46:	6f 93       	push	r22
    1f48:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <gps_sats+0x1>
    1f4c:	8f 93       	push	r24
    1f4e:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <gps_sats>
    1f52:	8f 93       	push	r24
    1f54:	83 2d       	mov	r24, r3
    1f56:	92 2d       	mov	r25, r2
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	9c 01       	movw	r18, r24
    1f5e:	22 0f       	add	r18, r18
    1f60:	33 1f       	adc	r19, r19
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	82 0f       	add	r24, r18
    1f68:	93 1f       	adc	r25, r19
    1f6a:	6a e0       	ldi	r22, 0x0A	; 10
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <__divmodhi4>
    1f72:	9f 93       	push	r25
    1f74:	8f 93       	push	r24
    1f76:	2f 92       	push	r2
    1f78:	3f 92       	push	r3
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	34 e2       	ldi	r19, 0x24	; 36
    1f7e:	44 e7       	ldi	r20, 0x74	; 116
    1f80:	59 e4       	ldi	r21, 0x49	; 73
    1f82:	c3 01       	movw	r24, r6
    1f84:	b2 01       	movw	r22, r4
    1f86:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1f8a:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1f8e:	20 e4       	ldi	r18, 0x40	; 64
    1f90:	32 e4       	ldi	r19, 0x42	; 66
    1f92:	4f e0       	ldi	r20, 0x0F	; 15
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	0e 94 86 1c 	call	0x390c	; 0x390c <__divmodsi4>
    1f9a:	9b 01       	movw	r18, r22
    1f9c:	77 23       	and	r23, r23
    1f9e:	24 f4       	brge	.+8      	; 0x1fa8 <packet+0x158>
    1fa0:	22 27       	eor	r18, r18
    1fa2:	33 27       	eor	r19, r19
    1fa4:	26 1b       	sub	r18, r22
    1fa6:	37 0b       	sbc	r19, r23
    1fa8:	c9 01       	movw	r24, r18
    1faa:	33 0f       	add	r19, r19
    1fac:	aa 0b       	sbc	r26, r26
    1fae:	bb 0b       	sbc	r27, r27
    1fb0:	bf 93       	push	r27
    1fb2:	af 93       	push	r26
    1fb4:	9f 93       	push	r25
    1fb6:	8f 93       	push	r24
    1fb8:	c3 01       	movw	r24, r6
    1fba:	b2 01       	movw	r22, r4
    1fbc:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1fc0:	7f 93       	push	r23
    1fc2:	6f 93       	push	r22
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	34 e2       	ldi	r19, 0x24	; 36
    1fc8:	44 e7       	ldi	r20, 0x74	; 116
    1fca:	59 e4       	ldi	r21, 0x49	; 73
    1fcc:	c5 01       	movw	r24, r10
    1fce:	b4 01       	movw	r22, r8
    1fd0:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__mulsf3>
    1fd4:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1fd8:	20 e4       	ldi	r18, 0x40	; 64
    1fda:	32 e4       	ldi	r19, 0x42	; 66
    1fdc:	4f e0       	ldi	r20, 0x0F	; 15
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	0e 94 86 1c 	call	0x390c	; 0x390c <__divmodsi4>
    1fe4:	9f 93       	push	r25
    1fe6:	8f 93       	push	r24
    1fe8:	7f 93       	push	r23
    1fea:	6f 93       	push	r22
    1fec:	c5 01       	movw	r24, r10
    1fee:	b4 01       	movw	r22, r8
    1ff0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    1ff4:	7f 93       	push	r23
    1ff6:	6f 93       	push	r22
    1ff8:	0f 2e       	mov	r0, r31
    1ffa:	f4 e6       	ldi	r31, 0x64	; 100
    1ffc:	8f 2e       	mov	r8, r31
    1ffe:	91 2c       	mov	r9, r1
    2000:	a1 2c       	mov	r10, r1
    2002:	b1 2c       	mov	r11, r1
    2004:	f0 2d       	mov	r31, r0
    2006:	c7 01       	movw	r24, r14
    2008:	b6 01       	movw	r22, r12
    200a:	a5 01       	movw	r20, r10
    200c:	94 01       	movw	r18, r8
    200e:	0e 94 86 1c 	call	0x390c	; 0x390c <__divmodsi4>
    2012:	7f 93       	push	r23
    2014:	6f 93       	push	r22
    2016:	c7 01       	movw	r24, r14
    2018:	b6 01       	movw	r22, r12
    201a:	20 e1       	ldi	r18, 0x10	; 16
    201c:	37 e2       	ldi	r19, 0x27	; 39
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	0e 94 86 1c 	call	0x390c	; 0x390c <__divmodsi4>
    2026:	f2 2e       	mov	r15, r18
    2028:	e3 2e       	mov	r14, r19
    202a:	a5 01       	movw	r20, r10
    202c:	94 01       	movw	r18, r8
    202e:	0e 94 86 1c 	call	0x390c	; 0x390c <__divmodsi4>
    2032:	3f 93       	push	r19
    2034:	2f 93       	push	r18
    2036:	ef 92       	push	r14
    2038:	ff 92       	push	r15
    203a:	60 91 da 20 	lds	r22, 0x20DA	; 0x8020da <volt>
    203e:	70 91 db 20 	lds	r23, 0x20DB	; 0x8020db <volt+0x1>
    2042:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <volt+0x2>
    2046:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <volt+0x3>
    204a:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    204e:	7f 93       	push	r23
    2050:	6f 93       	push	r22
    2052:	23 e3       	ldi	r18, 0x33	; 51
    2054:	33 e9       	ldi	r19, 0x93	; 147
    2056:	48 e8       	ldi	r20, 0x88	; 136
    2058:	53 e4       	ldi	r21, 0x43	; 67
    205a:	60 91 e2 20 	lds	r22, 0x20E2	; 0x8020e2 <temp>
    205e:	70 91 e3 20 	lds	r23, 0x20E3	; 0x8020e3 <temp+0x1>
    2062:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <temp+0x2>
    2066:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <temp+0x3>
    206a:	3d d7       	rcall	.+3706   	; 0x2ee6 <__subsf3>
    206c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    2070:	7f 93       	push	r23
    2072:	6f 93       	push	r22
    2074:	60 91 e6 20 	lds	r22, 0x20E6	; 0x8020e6 <press>
    2078:	70 91 e7 20 	lds	r23, 0x20E7	; 0x8020e7 <press+0x1>
    207c:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <press+0x2>
    2080:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <press+0x3>
    2084:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    2088:	9f 93       	push	r25
    208a:	8f 93       	push	r24
    208c:	7f 93       	push	r23
    208e:	6f 93       	push	r22
    2090:	60 91 de 20 	lds	r22, 0x20DE	; 0x8020de <alt>
    2094:	70 91 df 20 	lds	r23, 0x20DF	; 0x8020df <alt+0x1>
    2098:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <alt+0x2>
    209c:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <alt+0x3>
    20a0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fixsfsi>
    20a4:	7f 93       	push	r23
    20a6:	6f 93       	push	r22
    20a8:	1f 93       	push	r17
    20aa:	0f 93       	push	r16
    20ac:	9e 01       	movw	r18, r28
    20ae:	ad ec       	ldi	r26, 0xCD	; 205
    20b0:	bc ec       	ldi	r27, 0xCC	; 204
    20b2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__umulhisi3>
    20b6:	96 95       	lsr	r25
    20b8:	87 95       	ror	r24
    20ba:	96 95       	lsr	r25
    20bc:	87 95       	ror	r24
    20be:	96 95       	lsr	r25
    20c0:	87 95       	ror	r24
    20c2:	9c 01       	movw	r18, r24
    20c4:	22 0f       	add	r18, r18
    20c6:	33 1f       	adc	r19, r19
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	82 0f       	add	r24, r18
    20d6:	93 1f       	adc	r25, r19
    20d8:	9e 01       	movw	r18, r28
    20da:	28 1b       	sub	r18, r24
    20dc:	39 0b       	sbc	r19, r25
    20de:	c9 01       	movw	r24, r18
    20e0:	9f 93       	push	r25
    20e2:	2f 93       	push	r18
    20e4:	9e 01       	movw	r18, r28
    20e6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__umulhisi3>
    20ea:	96 95       	lsr	r25
    20ec:	87 95       	ror	r24
    20ee:	96 95       	lsr	r25
    20f0:	87 95       	ror	r24
    20f2:	96 95       	lsr	r25
    20f4:	87 95       	ror	r24
    20f6:	9f 93       	push	r25
    20f8:	8f 93       	push	r24
    20fa:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    20fe:	8f 93       	push	r24
    2100:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    2104:	8f 93       	push	r24
    2106:	c4 e2       	ldi	r28, 0x24	; 36
    2108:	d1 e2       	ldi	r29, 0x21	; 33
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <sprintf>
    2112:	2d b7       	in	r18, 0x3d	; 61
    2114:	3e b7       	in	r19, 0x3e	; 62
    2116:	2a 5c       	subi	r18, 0xCA	; 202
    2118:	3f 4f       	sbci	r19, 0xFF	; 255
    211a:	2d bf       	out	0x3d, r18	; 61
    211c:	3e bf       	out	0x3e, r19	; 62
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <printf>
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	ff 90       	pop	r15
    2134:	ef 90       	pop	r14
    2136:	df 90       	pop	r13
    2138:	cf 90       	pop	r12
    213a:	bf 90       	pop	r11
    213c:	af 90       	pop	r10
    213e:	9f 90       	pop	r9
    2140:	8f 90       	pop	r8
    2142:	7f 90       	pop	r7
    2144:	6f 90       	pop	r6
    2146:	5f 90       	pop	r5
    2148:	4f 90       	pop	r4
    214a:	3f 90       	pop	r3
    214c:	2f 90       	pop	r2
    214e:	08 95       	ret

00002150 <eeprom_write_const>:
    2150:	5f 92       	push	r5
    2152:	6f 92       	push	r6
    2154:	7f 92       	push	r7
    2156:	8f 92       	push	r8
    2158:	9f 92       	push	r9
    215a:	af 92       	push	r10
    215c:	bf 92       	push	r11
    215e:	cf 92       	push	r12
    2160:	df 92       	push	r13
    2162:	ef 92       	push	r14
    2164:	ff 92       	push	r15
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	a0 97       	sbiw	r28, 0x20	; 32
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    217c:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    2180:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    2184:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    2188:	fd d7       	rcall	.+4090   	; 0x3184 <__fixunssfdi>
    218a:	12 2f       	mov	r17, r18
    218c:	63 2e       	mov	r6, r19
    218e:	74 2e       	mov	r7, r20
    2190:	85 2e       	mov	r8, r21
    2192:	96 2e       	mov	r9, r22
    2194:	a7 2e       	mov	r10, r23
    2196:	b8 2e       	mov	r11, r24
    2198:	c9 2e       	mov	r12, r25
    219a:	60 91 29 20 	lds	r22, 0x2029	; 0x802029 <ground_t>
    219e:	70 91 2a 20 	lds	r23, 0x202A	; 0x80202a <ground_t+0x1>
    21a2:	80 91 2b 20 	lds	r24, 0x202B	; 0x80202b <ground_t+0x2>
    21a6:	90 91 2c 20 	lds	r25, 0x202C	; 0x80202c <ground_t+0x3>
    21aa:	ec d7       	rcall	.+4056   	; 0x3184 <__fixunssfdi>
    21ac:	e2 2f       	mov	r30, r18
    21ae:	53 2e       	mov	r5, r19
    21b0:	d4 2e       	mov	r13, r20
    21b2:	e5 2e       	mov	r14, r21
    21b4:	f6 2e       	mov	r15, r22
    21b6:	b7 2f       	mov	r27, r23
    21b8:	a8 2f       	mov	r26, r24
    21ba:	f9 2f       	mov	r31, r25
    21bc:	19 83       	std	Y+1, r17	; 0x01
    21be:	21 2f       	mov	r18, r17
    21c0:	36 2d       	mov	r19, r6
    21c2:	47 2d       	mov	r20, r7
    21c4:	58 2d       	mov	r21, r8
    21c6:	69 2d       	mov	r22, r9
    21c8:	7a 2d       	mov	r23, r10
    21ca:	8b 2d       	mov	r24, r11
    21cc:	9c 2d       	mov	r25, r12
    21ce:	08 e0       	ldi	r16, 0x08	; 8
    21d0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    21d4:	2a 83       	std	Y+2, r18	; 0x02
    21d6:	21 2f       	mov	r18, r17
    21d8:	36 2d       	mov	r19, r6
    21da:	47 2d       	mov	r20, r7
    21dc:	58 2d       	mov	r21, r8
    21de:	69 2d       	mov	r22, r9
    21e0:	7a 2d       	mov	r23, r10
    21e2:	8b 2d       	mov	r24, r11
    21e4:	9c 2d       	mov	r25, r12
    21e6:	00 e1       	ldi	r16, 0x10	; 16
    21e8:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    21ec:	2b 83       	std	Y+3, r18	; 0x03
    21ee:	21 2f       	mov	r18, r17
    21f0:	36 2d       	mov	r19, r6
    21f2:	47 2d       	mov	r20, r7
    21f4:	58 2d       	mov	r21, r8
    21f6:	69 2d       	mov	r22, r9
    21f8:	7a 2d       	mov	r23, r10
    21fa:	8b 2d       	mov	r24, r11
    21fc:	9c 2d       	mov	r25, r12
    21fe:	08 e1       	ldi	r16, 0x18	; 24
    2200:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    2204:	2c 83       	std	Y+4, r18	; 0x04
    2206:	21 2f       	mov	r18, r17
    2208:	36 2d       	mov	r19, r6
    220a:	47 2d       	mov	r20, r7
    220c:	58 2d       	mov	r21, r8
    220e:	69 2d       	mov	r22, r9
    2210:	7a 2d       	mov	r23, r10
    2212:	8b 2d       	mov	r24, r11
    2214:	9c 2d       	mov	r25, r12
    2216:	00 e2       	ldi	r16, 0x20	; 32
    2218:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    221c:	2d 83       	std	Y+5, r18	; 0x05
    221e:	21 2f       	mov	r18, r17
    2220:	36 2d       	mov	r19, r6
    2222:	47 2d       	mov	r20, r7
    2224:	58 2d       	mov	r21, r8
    2226:	69 2d       	mov	r22, r9
    2228:	7a 2d       	mov	r23, r10
    222a:	8b 2d       	mov	r24, r11
    222c:	9c 2d       	mov	r25, r12
    222e:	08 e2       	ldi	r16, 0x28	; 40
    2230:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    2234:	2e 83       	std	Y+6, r18	; 0x06
    2236:	21 2f       	mov	r18, r17
    2238:	36 2d       	mov	r19, r6
    223a:	47 2d       	mov	r20, r7
    223c:	58 2d       	mov	r21, r8
    223e:	69 2d       	mov	r22, r9
    2240:	7a 2d       	mov	r23, r10
    2242:	8b 2d       	mov	r24, r11
    2244:	9c 2d       	mov	r25, r12
    2246:	00 e3       	ldi	r16, 0x30	; 48
    2248:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    224c:	2f 83       	std	Y+7, r18	; 0x07
    224e:	21 2f       	mov	r18, r17
    2250:	36 2d       	mov	r19, r6
    2252:	47 2d       	mov	r20, r7
    2254:	58 2d       	mov	r21, r8
    2256:	69 2d       	mov	r22, r9
    2258:	7a 2d       	mov	r23, r10
    225a:	8b 2d       	mov	r24, r11
    225c:	9c 2d       	mov	r25, r12
    225e:	08 e3       	ldi	r16, 0x38	; 56
    2260:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    2264:	28 87       	std	Y+8, r18	; 0x08
    2266:	e9 87       	std	Y+9, r30	; 0x09
    2268:	2e 2f       	mov	r18, r30
    226a:	35 2d       	mov	r19, r5
    226c:	4d 2d       	mov	r20, r13
    226e:	5e 2d       	mov	r21, r14
    2270:	6f 2d       	mov	r22, r15
    2272:	7b 2f       	mov	r23, r27
    2274:	8a 2f       	mov	r24, r26
    2276:	9f 2f       	mov	r25, r31
    2278:	08 e0       	ldi	r16, 0x08	; 8
    227a:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    227e:	2a 87       	std	Y+10, r18	; 0x0a
    2280:	2e 2f       	mov	r18, r30
    2282:	35 2d       	mov	r19, r5
    2284:	4d 2d       	mov	r20, r13
    2286:	5e 2d       	mov	r21, r14
    2288:	6f 2d       	mov	r22, r15
    228a:	7b 2f       	mov	r23, r27
    228c:	8a 2f       	mov	r24, r26
    228e:	9f 2f       	mov	r25, r31
    2290:	00 e1       	ldi	r16, 0x10	; 16
    2292:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    2296:	2b 87       	std	Y+11, r18	; 0x0b
    2298:	2e 2f       	mov	r18, r30
    229a:	35 2d       	mov	r19, r5
    229c:	4d 2d       	mov	r20, r13
    229e:	5e 2d       	mov	r21, r14
    22a0:	6f 2d       	mov	r22, r15
    22a2:	7b 2f       	mov	r23, r27
    22a4:	8a 2f       	mov	r24, r26
    22a6:	9f 2f       	mov	r25, r31
    22a8:	08 e1       	ldi	r16, 0x18	; 24
    22aa:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    22ae:	2c 87       	std	Y+12, r18	; 0x0c
    22b0:	2e 2f       	mov	r18, r30
    22b2:	35 2d       	mov	r19, r5
    22b4:	4d 2d       	mov	r20, r13
    22b6:	5e 2d       	mov	r21, r14
    22b8:	6f 2d       	mov	r22, r15
    22ba:	7b 2f       	mov	r23, r27
    22bc:	8a 2f       	mov	r24, r26
    22be:	9f 2f       	mov	r25, r31
    22c0:	00 e2       	ldi	r16, 0x20	; 32
    22c2:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    22c6:	2d 87       	std	Y+13, r18	; 0x0d
    22c8:	2e 2f       	mov	r18, r30
    22ca:	35 2d       	mov	r19, r5
    22cc:	4d 2d       	mov	r20, r13
    22ce:	5e 2d       	mov	r21, r14
    22d0:	6f 2d       	mov	r22, r15
    22d2:	7b 2f       	mov	r23, r27
    22d4:	8a 2f       	mov	r24, r26
    22d6:	9f 2f       	mov	r25, r31
    22d8:	08 e2       	ldi	r16, 0x28	; 40
    22da:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    22de:	2e 87       	std	Y+14, r18	; 0x0e
    22e0:	2e 2f       	mov	r18, r30
    22e2:	35 2d       	mov	r19, r5
    22e4:	4d 2d       	mov	r20, r13
    22e6:	5e 2d       	mov	r21, r14
    22e8:	6f 2d       	mov	r22, r15
    22ea:	7b 2f       	mov	r23, r27
    22ec:	8a 2f       	mov	r24, r26
    22ee:	9f 2f       	mov	r25, r31
    22f0:	00 e3       	ldi	r16, 0x30	; 48
    22f2:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    22f6:	2f 87       	std	Y+15, r18	; 0x0f
    22f8:	2e 2f       	mov	r18, r30
    22fa:	35 2d       	mov	r19, r5
    22fc:	4d 2d       	mov	r20, r13
    22fe:	5e 2d       	mov	r21, r14
    2300:	6f 2d       	mov	r22, r15
    2302:	7b 2f       	mov	r23, r27
    2304:	8a 2f       	mov	r24, r26
    2306:	9f 2f       	mov	r25, r31
    2308:	08 e3       	ldi	r16, 0x38	; 56
    230a:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__lshrdi3>
    230e:	28 8b       	std	Y+16, r18	; 0x10
    2310:	80 e1       	ldi	r24, 0x10	; 16
    2312:	e1 e3       	ldi	r30, 0x31	; 49
    2314:	f0 e2       	ldi	r31, 0x20	; 32
    2316:	de 01       	movw	r26, r28
    2318:	51 96       	adiw	r26, 0x11	; 17
    231a:	01 90       	ld	r0, Z+
    231c:	0d 92       	st	X+, r0
    231e:	8a 95       	dec	r24
    2320:	e1 f7       	brne	.-8      	; 0x231a <eeprom_write_const+0x1ca>
    2322:	83 e3       	ldi	r24, 0x33	; 51
    2324:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    2328:	fe 01       	movw	r30, r28
    232a:	71 96       	adiw	r30, 0x11	; 17
    232c:	ce 01       	movw	r24, r28
    232e:	01 96       	adiw	r24, 0x01	; 1
    2330:	ae 01       	movw	r20, r28
    2332:	4f 5d       	subi	r20, 0xDF	; 223
    2334:	5f 4f       	sbci	r21, 0xFF	; 255
    2336:	60 ec       	ldi	r22, 0xC0	; 192
    2338:	71 e0       	ldi	r23, 0x01	; 1
    233a:	21 91       	ld	r18, Z+
    233c:	db 01       	movw	r26, r22
    233e:	2c 93       	st	X, r18
    2340:	dc 01       	movw	r26, r24
    2342:	2d 91       	ld	r18, X+
    2344:	cd 01       	movw	r24, r26
    2346:	db 01       	movw	r26, r22
    2348:	14 96       	adiw	r26, 0x04	; 4
    234a:	2c 93       	st	X, r18
    234c:	e4 17       	cp	r30, r20
    234e:	f5 07       	cpc	r31, r21
    2350:	a1 f7       	brne	.-24     	; 0x233a <eeprom_write_const+0x1ea>
    2352:	e0 ec       	ldi	r30, 0xC0	; 192
    2354:	f1 e0       	ldi	r31, 0x01	; 1
    2356:	85 e3       	ldi	r24, 0x35	; 53
    2358:	82 87       	std	Z+10, r24	; 0x0a
    235a:	10 82       	st	Z, r1
    235c:	80 e1       	ldi	r24, 0x10	; 16
    235e:	81 83       	std	Z+1, r24	; 0x01
    2360:	88 ed       	ldi	r24, 0xD8	; 216
    2362:	84 bf       	out	0x34, r24	; 52
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	83 87       	std	Z+11, r24	; 0x0b
    2368:	87 85       	ldd	r24, Z+15	; 0x0f
    236a:	88 23       	and	r24, r24
    236c:	ec f3       	brlt	.-6      	; 0x2368 <eeprom_write_const+0x218>
    236e:	a0 96       	adiw	r28, 0x20	; 32
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	de bf       	out	0x3e, r29	; 62
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	ff 90       	pop	r15
    237e:	ef 90       	pop	r14
    2380:	df 90       	pop	r13
    2382:	cf 90       	pop	r12
    2384:	bf 90       	pop	r11
    2386:	af 90       	pop	r10
    2388:	9f 90       	pop	r9
    238a:	8f 90       	pop	r8
    238c:	7f 90       	pop	r7
    238e:	6f 90       	pop	r6
    2390:	5f 90       	pop	r5
    2392:	08 95       	ret

00002394 <system_init>:
    2394:	0e 94 93 07 	call	0xf26	; 0xf26 <sysclk_init>
    2398:	6b ea       	ldi	r22, 0xAB	; 171
    239a:	79 e2       	ldi	r23, 0x29	; 41
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__portable_avr_delay_cycles>
    23a4:	78 94       	sei
    23a6:	8c eb       	ldi	r24, 0xBC	; 188
    23a8:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    23ac:	87 e0       	ldi	r24, 0x07	; 7
    23ae:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    23b2:	0e 94 11 06 	call	0xc22	; 0xc22 <data_terminal_init>
    23b6:	6b ea       	ldi	r22, 0xAB	; 171
    23b8:	70 eb       	ldi	r23, 0xB0	; 176
    23ba:	88 e2       	ldi	r24, 0x28	; 40
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__portable_avr_delay_cycles>
    23c2:	80 e2       	ldi	r24, 0x20	; 32
    23c4:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
    23c8:	0e 94 1f 08 	call	0x103e	; 0x103e <gps_init>
    23cc:	66 e5       	ldi	r22, 0x56	; 86
    23ce:	73 e2       	ldi	r23, 0x23	; 35
    23d0:	88 e0       	ldi	r24, 0x08	; 8
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__portable_avr_delay_cycles>
    23d8:	e4 db       	rcall	.-2104   	; 0x1ba2 <release_servo_init>
    23da:	0e 94 ef 04 	call	0x9de	; 0x9de <thermistor_init>
    23de:	0e 94 57 06 	call	0xcae	; 0xcae <voltage_init>
    23e2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <spi_init>
    23e6:	0e 94 f9 07 	call	0xff2	; 0xff2 <pressure_init>
    23ea:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <cam_init>
    23ee:	88 dc       	rcall	.-1776   	; 0x1d00 <clock_init>
    23f0:	66 e5       	ldi	r22, 0x56	; 86
    23f2:	70 ed       	ldi	r23, 0xD0	; 208
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__portable_avr_delay_cycles>
    23fc:	82 db       	rcall	.-2300   	; 0x1b02 <state_check>
    23fe:	0e 94 33 08 	call	0x1066	; 0x1066 <get_pressure>
    2402:	60 93 2d 20 	sts	0x202D, r22	; 0x80202d <ground_p>
    2406:	70 93 2e 20 	sts	0x202E, r23	; 0x80202e <ground_p+0x1>
    240a:	80 93 2f 20 	sts	0x202F, r24	; 0x80202f <ground_p+0x2>
    240e:	90 93 30 20 	sts	0x2030, r25	; 0x802030 <ground_p+0x3>
    2412:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <get_temperature>
    2416:	60 93 29 20 	sts	0x2029, r22	; 0x802029 <ground_t>
    241a:	70 93 2a 20 	sts	0x202A, r23	; 0x80202a <ground_t+0x1>
    241e:	80 93 2b 20 	sts	0x202B, r24	; 0x80202b <ground_t+0x2>
    2422:	90 93 2c 20 	sts	0x202C, r25	; 0x80202c <ground_t+0x3>
    2426:	94 ce       	rjmp	.-728    	; 0x2150 <eeprom_write_const>
    2428:	08 95       	ret

0000242a <main>:
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	c8 56       	subi	r28, 0x68	; 104
    2434:	d1 09       	sbc	r29, r1
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	ac df       	rcall	.-168    	; 0x2394 <system_init>
    243c:	e0 e6       	ldi	r30, 0x60	; 96
    243e:	f6 e0       	ldi	r31, 0x06	; 6
    2440:	80 81       	ld	r24, Z
    2442:	88 60       	ori	r24, 0x08	; 8
    2444:	80 83       	st	Z, r24
    2446:	84 81       	ldd	r24, Z+4	; 0x04
    2448:	88 60       	ori	r24, 0x08	; 8
    244a:	84 83       	std	Z+4, r24	; 0x04
    244c:	14 e1       	ldi	r17, 0x14	; 20
    244e:	be 01       	movw	r22, r28
    2450:	6f 5f       	subi	r22, 0xFF	; 255
    2452:	7f 4f       	sbci	r23, 0xFF	; 255
    2454:	fb 01       	movw	r30, r22
    2456:	81 2f       	mov	r24, r17
    2458:	11 92       	st	Z+, r1
    245a:	8a 95       	dec	r24
    245c:	e9 f7       	brne	.-6      	; 0x2458 <main+0x2e>
    245e:	4a e0       	ldi	r20, 0x0A	; 10
    2460:	50 e0       	ldi	r21, 0x00	; 0
    2462:	ce 01       	movw	r24, r28
    2464:	45 96       	adiw	r24, 0x15	; 21
    2466:	0e 94 cc 06 	call	0xd98	; 0xd98 <rb16_init>
    246a:	be 01       	movw	r22, r28
    246c:	63 5e       	subi	r22, 0xE3	; 227
    246e:	7f 4f       	sbci	r23, 0xFF	; 255
    2470:	88 e2       	ldi	r24, 0x28	; 40
    2472:	fb 01       	movw	r30, r22
    2474:	11 92       	st	Z+, r1
    2476:	8a 95       	dec	r24
    2478:	e9 f7       	brne	.-6      	; 0x2474 <main+0x4a>
    247a:	4a e0       	ldi	r20, 0x0A	; 10
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	ce 01       	movw	r24, r28
    2480:	8b 5b       	subi	r24, 0xBB	; 187
    2482:	9f 4f       	sbci	r25, 0xFF	; 255
    2484:	0e 94 54 07 	call	0xea8	; 0xea8 <rb32_init>
    2488:	be 01       	movw	r22, r28
    248a:	63 5b       	subi	r22, 0xB3	; 179
    248c:	7f 4f       	sbci	r23, 0xFF	; 255
    248e:	fb 01       	movw	r30, r22
    2490:	11 92       	st	Z+, r1
    2492:	1a 95       	dec	r17
    2494:	e9 f7       	brne	.-6      	; 0x2490 <main+0x66>
    2496:	4a e0       	ldi	r20, 0x0A	; 10
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	ce 01       	movw	r24, r28
    249c:	8f 59       	subi	r24, 0x9F	; 159
    249e:	9f 4f       	sbci	r25, 0xFF	; 255
    24a0:	0e 94 cc 06 	call	0xd98	; 0xd98 <rb16_init>
    24a4:	00 e0       	ldi	r16, 0x00	; 0
    24a6:	10 e0       	ldi	r17, 0x00	; 0
    24a8:	be 01       	movw	r22, r28
    24aa:	6b 5b       	subi	r22, 0xBB	; 187
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	ce 01       	movw	r24, r28
    24b0:	45 96       	adiw	r24, 0x15	; 21
    24b2:	62 d9       	rcall	.-3388   	; 0x1778 <data_collect>
    24b4:	26 db       	rcall	.-2484   	; 0x1b02 <state_check>
    24b6:	80 91 07 21 	lds	r24, 0x2107	; 0x802107 <state>
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	39 f0       	breq	.+14     	; 0x24cc <main+0xa2>
    24be:	08 f4       	brcc	.+2      	; 0x24c2 <main+0x98>
    24c0:	42 c0       	rjmp	.+132    	; 0x2546 <main+0x11c>
    24c2:	82 30       	cpi	r24, 0x02	; 2
    24c4:	b1 f0       	breq	.+44     	; 0x24f2 <main+0xc8>
    24c6:	83 30       	cpi	r24, 0x03	; 3
    24c8:	c1 f1       	breq	.+112    	; 0x253a <main+0x110>
    24ca:	3b c0       	rjmp	.+118    	; 0x2542 <main+0x118>
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	46 e1       	ldi	r20, 0x16	; 22
    24d2:	54 e4       	ldi	r21, 0x44	; 68
    24d4:	60 91 de 20 	lds	r22, 0x20DE	; 0x8020de <alt>
    24d8:	70 91 df 20 	lds	r23, 0x20DF	; 0x8020df <alt+0x1>
    24dc:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <alt+0x2>
    24e0:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <alt+0x3>
    24e4:	c8 d7       	rcall	.+3984   	; 0x3476 <__gesf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	74 f5       	brge	.+92     	; 0x2546 <main+0x11c>
    24ea:	11 11       	cpse	r17, r1
    24ec:	2c c0       	rjmp	.+88     	; 0x2546 <main+0x11c>
    24ee:	11 e0       	ldi	r17, 0x01	; 1
    24f0:	2a c0       	rjmp	.+84     	; 0x2546 <main+0x11c>
    24f2:	11 11       	cpse	r17, r1
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <main+0xce>
    24f6:	11 e0       	ldi	r17, 0x01	; 1
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	41 ee       	ldi	r20, 0xE1	; 225
    24fe:	53 e4       	ldi	r21, 0x43	; 67
    2500:	60 91 de 20 	lds	r22, 0x20DE	; 0x8020de <alt>
    2504:	70 91 df 20 	lds	r23, 0x20DF	; 0x8020df <alt+0x1>
    2508:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <alt+0x2>
    250c:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <alt+0x3>
    2510:	ea d4       	rcall	.+2516   	; 0x2ee6 <__subsf3>
    2512:	6d d6       	rcall	.+3290   	; 0x31ee <__fixsfsi>
    2514:	67 5f       	subi	r22, 0xF7	; 247
    2516:	7f 4f       	sbci	r23, 0xFF	; 255
    2518:	63 31       	cpi	r22, 0x13	; 19
    251a:	71 05       	cpc	r23, r1
    251c:	28 f4       	brcc	.+10     	; 0x2528 <main+0xfe>
    251e:	0e 94 29 08 	call	0x1052	; 0x1052 <release>
    2522:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <hall_sensor_init>
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <main+0x11c>
    2528:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <released>
    252c:	88 23       	and	r24, r24
    252e:	59 f0       	breq	.+22     	; 0x2546 <main+0x11c>
    2530:	ce 01       	movw	r24, r28
    2532:	8f 59       	subi	r24, 0x9F	; 159
    2534:	9f 4f       	sbci	r25, 0xFF	; 255
    2536:	57 db       	rcall	.-2386   	; 0x1be6 <servo_pid>
    2538:	06 c0       	rjmp	.+12     	; 0x2546 <main+0x11c>
    253a:	01 11       	cpse	r16, r1
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <main+0x11c>
    253e:	01 e0       	ldi	r16, 0x01	; 1
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <main+0x11c>
    2542:	10 92 07 21 	sts	0x2107, r1	; 0x802107 <state>
    2546:	20 91 ec 20 	lds	r18, 0x20EC	; 0x8020ec <data_packets>
    254a:	30 91 ed 20 	lds	r19, 0x20ED	; 0x8020ed <data_packets+0x1>
    254e:	2f 5f       	subi	r18, 0xFF	; 255
    2550:	3f 4f       	sbci	r19, 0xFF	; 255
    2552:	20 93 ec 20 	sts	0x20EC, r18	; 0x8020ec <data_packets>
    2556:	30 93 ed 20 	sts	0x20ED, r19	; 0x8020ed <data_packets+0x1>
    255a:	60 91 ee 20 	lds	r22, 0x20EE	; 0x8020ee <timer>
    255e:	70 91 ef 20 	lds	r23, 0x20EF	; 0x8020ef <timer+0x1>
    2562:	61 15       	cp	r22, r1
    2564:	71 05       	cpc	r23, r1
    2566:	09 f4       	brne	.+2      	; 0x256a <main+0x140>
    2568:	9f cf       	rjmp	.-194    	; 0x24a8 <main+0x7e>
    256a:	c9 01       	movw	r24, r18
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	22 0f       	add	r18, r18
    2572:	33 1f       	adc	r19, r19
    2574:	22 0f       	add	r18, r18
    2576:	33 1f       	adc	r19, r19
    2578:	22 0f       	add	r18, r18
    257a:	33 1f       	adc	r19, r19
    257c:	82 0f       	add	r24, r18
    257e:	93 1f       	adc	r25, r19
    2580:	0e 94 3d 1c 	call	0x387a	; 0x387a <__udivmodhi4>
    2584:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <rate>
    2588:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <rate+0x1>
    258c:	8d cf       	rjmp	.-230    	; 0x24a8 <main+0x7e>

0000258e <eeprom_write>:
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	2c 97       	sbiw	r28, 0x0c	; 12
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	60 91 de 20 	lds	r22, 0x20DE	; 0x8020de <alt>
    25a0:	70 91 df 20 	lds	r23, 0x20DF	; 0x8020df <alt+0x1>
    25a4:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <alt+0x2>
    25a8:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <alt+0x3>
    25ac:	20 d6       	rcall	.+3136   	; 0x31ee <__fixsfsi>
    25ae:	79 83       	std	Y+1, r23	; 0x01
    25b0:	6a 83       	std	Y+2, r22	; 0x02
    25b2:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <packets>
    25b6:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <packets+0x1>
    25ba:	9b 83       	std	Y+3, r25	; 0x03
    25bc:	8c 83       	std	Y+4, r24	; 0x04
    25be:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <timer>
    25c2:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <timer+0x1>
    25c6:	9d 83       	std	Y+5, r25	; 0x05
    25c8:	8e 83       	std	Y+6, r24	; 0x06
    25ca:	86 e0       	ldi	r24, 0x06	; 6
    25cc:	e1 e4       	ldi	r30, 0x41	; 65
    25ce:	f0 e2       	ldi	r31, 0x20	; 32
    25d0:	de 01       	movw	r26, r28
    25d2:	17 96       	adiw	r26, 0x07	; 7
    25d4:	01 90       	ld	r0, Z+
    25d6:	0d 92       	st	X+, r0
    25d8:	8a 95       	dec	r24
    25da:	e1 f7       	brne	.-8      	; 0x25d4 <eeprom_write+0x46>
    25dc:	83 e3       	ldi	r24, 0x33	; 51
    25de:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    25e2:	fe 01       	movw	r30, r28
    25e4:	37 96       	adiw	r30, 0x07	; 7
    25e6:	ce 01       	movw	r24, r28
    25e8:	01 96       	adiw	r24, 0x01	; 1
    25ea:	ae 01       	movw	r20, r28
    25ec:	43 5f       	subi	r20, 0xF3	; 243
    25ee:	5f 4f       	sbci	r21, 0xFF	; 255
    25f0:	60 ec       	ldi	r22, 0xC0	; 192
    25f2:	71 e0       	ldi	r23, 0x01	; 1
    25f4:	21 91       	ld	r18, Z+
    25f6:	db 01       	movw	r26, r22
    25f8:	2c 93       	st	X, r18
    25fa:	dc 01       	movw	r26, r24
    25fc:	2d 91       	ld	r18, X+
    25fe:	cd 01       	movw	r24, r26
    2600:	db 01       	movw	r26, r22
    2602:	14 96       	adiw	r26, 0x04	; 4
    2604:	2c 93       	st	X, r18
    2606:	e4 17       	cp	r30, r20
    2608:	f5 07       	cpc	r31, r21
    260a:	a1 f7       	brne	.-24     	; 0x25f4 <eeprom_write+0x66>
    260c:	e0 ec       	ldi	r30, 0xC0	; 192
    260e:	f1 e0       	ldi	r31, 0x01	; 1
    2610:	85 e3       	ldi	r24, 0x35	; 53
    2612:	82 87       	std	Z+10, r24	; 0x0a
    2614:	10 82       	st	Z, r1
    2616:	80 e1       	ldi	r24, 0x10	; 16
    2618:	81 83       	std	Z+1, r24	; 0x01
    261a:	88 ed       	ldi	r24, 0xD8	; 216
    261c:	84 bf       	out	0x34, r24	; 52
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	83 87       	std	Z+11, r24	; 0x0b
    2622:	87 85       	ldd	r24, Z+15	; 0x0f
    2624:	88 23       	and	r24, r24
    2626:	ec f3       	brlt	.-6      	; 0x2622 <eeprom_write+0x94>
    2628:	2c 96       	adiw	r28, 0x0c	; 12
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	08 95       	ret

00002634 <eeprom_erase>:

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
    2634:	83 e3       	ldi	r24, 0x33	; 51
    2636:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	for(uint8_t i = 0; i < 32; i++){
    263a:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    263c:	e0 ec       	ldi	r30, 0xC0	; 192
    263e:	f1 e0       	ldi	r31, 0x01	; 1
		NVM.DATA0 = 0xFF;
    2640:	9f ef       	ldi	r25, 0xFF	; 255
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
		NVM.ADDR0 = i;
    2642:	80 83       	st	Z, r24
		NVM.DATA0 = 0xFF;
    2644:	94 83       	std	Z+4, r25	; 0x04
	return byte;
}

void eeprom_erase(void){
	NVM.CMD = LOAD_BUFFER_CMD;
	for(uint8_t i = 0; i < 32; i++){
    2646:	8f 5f       	subi	r24, 0xFF	; 255
    2648:	80 32       	cpi	r24, 0x20	; 32
    264a:	d9 f7       	brne	.-10     	; 0x2642 <eeprom_erase+0xe>
		NVM.ADDR0 = i;
		NVM.DATA0 = 0xFF;
	}
	
	NVM.CMD = ERASE_EEPROM;
    264c:	e0 ec       	ldi	r30, 0xC0	; 192
    264e:	f1 e0       	ldi	r31, 0x01	; 1
    2650:	80 e3       	ldi	r24, 0x30	; 48
    2652:	82 87       	std	Z+10, r24	; 0x0a
	CCP = CCP_IOREG_MODE;
    2654:	88 ed       	ldi	r24, 0xD8	; 216
    2656:	84 bf       	out	0x34, r24	; 52
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	83 87       	std	Z+11, r24	; 0x0b
	while(NVM.STATUS>>7);
    265c:	87 85       	ldd	r24, Z+15	; 0x0f
    265e:	88 23       	and	r24, r24
    2660:	ec f3       	brlt	.-6      	; 0x265c <eeprom_erase+0x28>
}
    2662:	08 95       	ret

00002664 <reset>:
	TCD1.PER = 184; // 2700hz
	TCD1.CCA = 92;
}

void reset(void){
	eeprom_erase();
    2664:	e7 df       	rcall	.-50     	; 0x2634 <eeprom_erase>
	
	uint8_t oldInterruptState = SREG;	// no real need to store the interrupt context as the reset will pre-empt its restoration
    2666:	8f b7       	in	r24, 0x3f	; 63
	cli();		                        // Disable interrupts
    2668:	f8 94       	cli

	CCP = 0xD8;							// Configuration change protection: allow protected IO regiser write
    266a:	98 ed       	ldi	r25, 0xD8	; 216
    266c:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = RST_SWRST_bm;			// Request software reset by writing to protected IO register
    266e:	91 e0       	ldi	r25, 0x01	; 1
    2670:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	SREG=oldInterruptState;
    2674:	8f bf       	out	0x3f, r24	; 63
    2676:	08 95       	ret

00002678 <__vector_14>:
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}

ISR(TCC0_OVF_vect){
    2678:	1f 92       	push	r1
    267a:	0f 92       	push	r0
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	0f 92       	push	r0
    2680:	11 24       	eor	r1, r1
    2682:	08 b6       	in	r0, 0x38	; 56
    2684:	0f 92       	push	r0
    2686:	18 be       	out	0x38, r1	; 56
    2688:	09 b6       	in	r0, 0x39	; 57
    268a:	0f 92       	push	r0
    268c:	19 be       	out	0x39, r1	; 57
    268e:	0a b6       	in	r0, 0x3a	; 58
    2690:	0f 92       	push	r0
    2692:	1a be       	out	0x3a, r1	; 58
    2694:	0b b6       	in	r0, 0x3b	; 59
    2696:	0f 92       	push	r0
    2698:	1b be       	out	0x3b, r1	; 59
    269a:	4f 92       	push	r4
    269c:	5f 92       	push	r5
    269e:	6f 92       	push	r6
    26a0:	7f 92       	push	r7
    26a2:	af 92       	push	r10
    26a4:	bf 92       	push	r11
    26a6:	cf 92       	push	r12
    26a8:	df 92       	push	r13
    26aa:	ef 92       	push	r14
    26ac:	ff 92       	push	r15
    26ae:	0f 93       	push	r16
    26b0:	1f 93       	push	r17
    26b2:	2f 93       	push	r18
    26b4:	3f 93       	push	r19
    26b6:	4f 93       	push	r20
    26b8:	5f 93       	push	r21
    26ba:	6f 93       	push	r22
    26bc:	7f 93       	push	r23
    26be:	8f 93       	push	r24
    26c0:	9f 93       	push	r25
    26c2:	af 93       	push	r26
    26c4:	bf 93       	push	r27
    26c6:	ef 93       	push	r30
    26c8:	ff 93       	push	r31
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	66 97       	sbiw	r28, 0x16	; 22
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	de bf       	out	0x3e, r29	; 62
	//printf("In Bosch Interrupt\n");
	uint8_t data[18];
	bno085_read(data);
    26d8:	ce 01       	movw	r24, r28
    26da:	01 96       	adiw	r24, 0x01	; 1
    26dc:	0e 94 ca 04 	call	0x994	; 0x994 <bno085_read>
	double x = ((data[5]<<8) | data[4]) * QSCALE;
	double y = ((data[7]<<8) | data[6]) * QSCALE;
	double z = ((data[9]<<8) | data[8]) * QSCALE;
	double w = ((data[11]<<8) | data[10]) * QSCALE;
	
	quaternion2euler(w, x, y, z);
    26e0:	6a 85       	ldd	r22, Y+10	; 0x0a
    26e2:	70 e0       	ldi	r23, 0x00	; 0
    26e4:	76 2f       	mov	r23, r22
    26e6:	66 27       	eor	r22, r22
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	68 2b       	or	r22, r24
    26ec:	07 2e       	mov	r0, r23
    26ee:	00 0c       	add	r0, r0
    26f0:	88 0b       	sbc	r24, r24
    26f2:	99 0b       	sbc	r25, r25
    26f4:	af d5       	rcall	.+2910   	; 0x3254 <__floatsisf>
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e8       	ldi	r20, 0x80	; 128
    26fc:	58 e3       	ldi	r21, 0x38	; 56
    26fe:	0b d7       	rcall	.+3606   	; 0x3516 <__mulsf3>
    2700:	5b 01       	movw	r10, r22
    2702:	6c 01       	movw	r12, r24
    2704:	68 85       	ldd	r22, Y+8	; 0x08
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	76 2f       	mov	r23, r22
    270a:	66 27       	eor	r22, r22
    270c:	8f 81       	ldd	r24, Y+7	; 0x07
    270e:	68 2b       	or	r22, r24
    2710:	07 2e       	mov	r0, r23
    2712:	00 0c       	add	r0, r0
    2714:	88 0b       	sbc	r24, r24
    2716:	99 0b       	sbc	r25, r25
    2718:	9d d5       	rcall	.+2874   	; 0x3254 <__floatsisf>
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	58 e3       	ldi	r21, 0x38	; 56
    2722:	f9 d6       	rcall	.+3570   	; 0x3516 <__mulsf3>
    2724:	2b 01       	movw	r4, r22
    2726:	3c 01       	movw	r6, r24
    2728:	6e 81       	ldd	r22, Y+6	; 0x06
    272a:	70 e0       	ldi	r23, 0x00	; 0
    272c:	76 2f       	mov	r23, r22
    272e:	66 27       	eor	r22, r22
    2730:	8d 81       	ldd	r24, Y+5	; 0x05
    2732:	68 2b       	or	r22, r24
    2734:	07 2e       	mov	r0, r23
    2736:	00 0c       	add	r0, r0
    2738:	88 0b       	sbc	r24, r24
    273a:	99 0b       	sbc	r25, r25
    273c:	8b d5       	rcall	.+2838   	; 0x3254 <__floatsisf>
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e8       	ldi	r20, 0x80	; 128
    2744:	58 e3       	ldi	r21, 0x38	; 56
    2746:	e7 d6       	rcall	.+3534   	; 0x3516 <__mulsf3>
    2748:	6b 8b       	std	Y+19, r22	; 0x13
    274a:	7c 8b       	std	Y+20, r23	; 0x14
    274c:	8d 8b       	std	Y+21, r24	; 0x15
    274e:	9e 8b       	std	Y+22, r25	; 0x16
    2750:	6c 85       	ldd	r22, Y+12	; 0x0c
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	76 2f       	mov	r23, r22
    2756:	66 27       	eor	r22, r22
    2758:	8b 85       	ldd	r24, Y+11	; 0x0b
    275a:	68 2b       	or	r22, r24
    275c:	07 2e       	mov	r0, r23
    275e:	00 0c       	add	r0, r0
    2760:	88 0b       	sbc	r24, r24
    2762:	99 0b       	sbc	r25, r25
    2764:	77 d5       	rcall	.+2798   	; 0x3254 <__floatsisf>
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e8       	ldi	r20, 0x80	; 128
    276c:	58 e3       	ldi	r21, 0x38	; 56
    276e:	d3 d6       	rcall	.+3494   	; 0x3516 <__mulsf3>
    2770:	83 01       	movw	r16, r6
    2772:	72 01       	movw	r14, r4
    2774:	2b 89       	ldd	r18, Y+19	; 0x13
    2776:	3c 89       	ldd	r19, Y+20	; 0x14
    2778:	4d 89       	ldd	r20, Y+21	; 0x15
    277a:	5e 89       	ldd	r21, Y+22	; 0x16
    277c:	83 d8       	rcall	.-3834   	; 0x1884 <quaternion2euler>
}
    277e:	66 96       	adiw	r28, 0x16	; 22
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	ff 91       	pop	r31
    278a:	ef 91       	pop	r30
    278c:	bf 91       	pop	r27
    278e:	af 91       	pop	r26
    2790:	9f 91       	pop	r25
    2792:	8f 91       	pop	r24
    2794:	7f 91       	pop	r23
    2796:	6f 91       	pop	r22
    2798:	5f 91       	pop	r21
    279a:	4f 91       	pop	r20
    279c:	3f 91       	pop	r19
    279e:	2f 91       	pop	r18
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	ff 90       	pop	r15
    27a6:	ef 90       	pop	r14
    27a8:	df 90       	pop	r13
    27aa:	cf 90       	pop	r12
    27ac:	bf 90       	pop	r11
    27ae:	af 90       	pop	r10
    27b0:	7f 90       	pop	r7
    27b2:	6f 90       	pop	r6
    27b4:	5f 90       	pop	r5
    27b6:	4f 90       	pop	r4
    27b8:	0f 90       	pop	r0
    27ba:	0b be       	out	0x3b, r0	; 59
    27bc:	0f 90       	pop	r0
    27be:	0a be       	out	0x3a, r0	; 58
    27c0:	0f 90       	pop	r0
    27c2:	09 be       	out	0x39, r0	; 57
    27c4:	0f 90       	pop	r0
    27c6:	08 be       	out	0x38, r0	; 56
    27c8:	0f 90       	pop	r0
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	0f 90       	pop	r0
    27ce:	1f 90       	pop	r1
    27d0:	18 95       	reti

000027d2 <__vector_47>:

ISR(TCE0_OVF_vect){
    27d2:	1f 92       	push	r1
    27d4:	0f 92       	push	r0
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	0f 92       	push	r0
    27da:	11 24       	eor	r1, r1
    27dc:	08 b6       	in	r0, 0x38	; 56
    27de:	0f 92       	push	r0
    27e0:	18 be       	out	0x38, r1	; 56
    27e2:	09 b6       	in	r0, 0x39	; 57
    27e4:	0f 92       	push	r0
    27e6:	19 be       	out	0x39, r1	; 57
    27e8:	0b b6       	in	r0, 0x3b	; 59
    27ea:	0f 92       	push	r0
    27ec:	1b be       	out	0x3b, r1	; 59
    27ee:	2f 93       	push	r18
    27f0:	3f 93       	push	r19
    27f2:	4f 93       	push	r20
    27f4:	5f 93       	push	r21
    27f6:	6f 93       	push	r22
    27f8:	7f 93       	push	r23
    27fa:	8f 93       	push	r24
    27fc:	9f 93       	push	r25
    27fe:	af 93       	push	r26
    2800:	bf 93       	push	r27
    2802:	ef 93       	push	r30
    2804:	ff 93       	push	r31
	timer+=1;
    2806:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <timer>
    280a:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <timer+0x1>
    280e:	01 96       	adiw	r24, 0x01	; 1
    2810:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <timer>
    2814:	90 93 ef 20 	sts	0x20EF, r25	; 0x8020ef <timer+0x1>
	packets++;
    2818:	80 91 ea 20 	lds	r24, 0x20EA	; 0x8020ea <packets>
    281c:	90 91 eb 20 	lds	r25, 0x20EB	; 0x8020eb <packets+0x1>
    2820:	01 96       	adiw	r24, 0x01	; 1
    2822:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <packets>
    2826:	90 93 eb 20 	sts	0x20EB, r25	; 0x8020eb <packets+0x1>
	(int16_t) pitch,						(int16_t) roll,								(int16_t) rpm,
	state,									(int16_t) angle); // Data Logging Test
	printf(str);
	*/
	// Updates EEPROM
	eeprom_write();
    282a:	b1 de       	rcall	.-670    	; 0x258e <eeprom_write>
	uint8_t byte0 = eeprom_read(EEPROM_PAGE | PACKET_ADDR_BYTE0);
	uint8_t byte1 = eeprom_read(EEPROM_PAGE | PACKET_ADDR_BYTE1);
	uint16_t a = (uint16_t) ((byte1<<8) | byte0);
	printf("%u\n", a);
	*/
}
    282c:	ff 91       	pop	r31
    282e:	ef 91       	pop	r30
    2830:	bf 91       	pop	r27
    2832:	af 91       	pop	r26
    2834:	9f 91       	pop	r25
    2836:	8f 91       	pop	r24
    2838:	7f 91       	pop	r23
    283a:	6f 91       	pop	r22
    283c:	5f 91       	pop	r21
    283e:	4f 91       	pop	r20
    2840:	3f 91       	pop	r19
    2842:	2f 91       	pop	r18
    2844:	0f 90       	pop	r0
    2846:	0b be       	out	0x3b, r0	; 59
    2848:	0f 90       	pop	r0
    284a:	09 be       	out	0x39, r0	; 57
    284c:	0f 90       	pop	r0
    284e:	08 be       	out	0x38, r0	; 56
    2850:	0f 90       	pop	r0
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	0f 90       	pop	r0
    2856:	1f 90       	pop	r1
    2858:	18 95       	reti

0000285a <__vector_58>:

ISR(USARTE0_RXC_vect){
    285a:	1f 92       	push	r1
    285c:	0f 92       	push	r0
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	0f 92       	push	r0
    2862:	11 24       	eor	r1, r1
    2864:	08 b6       	in	r0, 0x38	; 56
    2866:	0f 92       	push	r0
    2868:	18 be       	out	0x38, r1	; 56
    286a:	09 b6       	in	r0, 0x39	; 57
    286c:	0f 92       	push	r0
    286e:	19 be       	out	0x39, r1	; 57
    2870:	0b b6       	in	r0, 0x3b	; 59
    2872:	0f 92       	push	r0
    2874:	1b be       	out	0x3b, r1	; 59
    2876:	2f 93       	push	r18
    2878:	3f 93       	push	r19
    287a:	4f 93       	push	r20
    287c:	5f 93       	push	r21
    287e:	6f 93       	push	r22
    2880:	7f 93       	push	r23
    2882:	8f 93       	push	r24
    2884:	9f 93       	push	r25
    2886:	af 93       	push	r26
    2888:	bf 93       	push	r27
    288a:	ef 93       	push	r30
    288c:	ff 93       	push	r31
	uint8_t c = usart_getchar(UART_TERMINAL_SERIAL);
    288e:	80 ea       	ldi	r24, 0xA0	; 160
    2890:	9a e0       	ldi	r25, 0x0A	; 10
    2892:	0e 94 c8 02 	call	0x590	; 0x590 <usart_getchar>
	//printf("%c\n", c);
	
	switch(c){
    2896:	84 36       	cpi	r24, 0x64	; 100
    2898:	91 f0       	breq	.+36     	; 0x28be <__vector_58+0x64>
    289a:	28 f4       	brcc	.+10     	; 0x28a6 <__vector_58+0x4c>
    289c:	81 36       	cpi	r24, 0x61	; 97
    289e:	69 f0       	breq	.+26     	; 0x28ba <__vector_58+0x60>
    28a0:	83 36       	cpi	r24, 0x63	; 99
    28a2:	49 f0       	breq	.+18     	; 0x28b6 <__vector_58+0x5c>
    28a4:	0d c0       	rjmp	.+26     	; 0x28c0 <__vector_58+0x66>
    28a6:	85 36       	cpi	r24, 0x65	; 101
    28a8:	21 f0       	breq	.+8      	; 0x28b2 <__vector_58+0x58>
    28aa:	86 36       	cpi	r24, 0x66	; 102
    28ac:	49 f4       	brne	.+18     	; 0x28c0 <__vector_58+0x66>
		case RESET:
		//printf("RESET\n");
		reset();
    28ae:	da de       	rcall	.-588    	; 0x2664 <reset>

	SREG=oldInterruptState;
}

void calibrate(void){
	cali_alt();
    28b0:	07 c0       	rjmp	.+14     	; 0x28c0 <__vector_58+0x66>
    28b2:	34 da       	rcall	.-2968   	; 0x1d1c <cali_alt>
		case CALIBRATE:
		calibrate();
		//printf("CALIBRATE\n");
		break;
		case CALIBRATE_ALTITUDE:
		cali_alt();
    28b4:	05 c0       	rjmp	.+10     	; 0x28c0 <__vector_58+0x66>
		case CALIBRATE_ANGLE:
		cali_ang();
		//printf("CALIBRATE_ANGLE\n");
		break;
		case SEND_GPS_LOCATION:
		send_gps();
    28b6:	32 da       	rcall	.-2972   	; 0x1d1c <cali_alt>
    28b8:	03 c0       	rjmp	.+6      	; 0x28c0 <__vector_58+0x66>
		//printf("SEND_GPS_LOCATION\n");
		break;
    28ba:	4a da       	rcall	.-2924   	; 0x1d50 <send_gps>
		case PACKET:
		packet();
    28bc:	01 c0       	rjmp	.+2      	; 0x28c0 <__vector_58+0x66>
    28be:	c8 da       	rcall	.-2672   	; 0x1e50 <packet>
		//printf("PACKET\n");
		break;
	}
}
    28c0:	ff 91       	pop	r31
    28c2:	ef 91       	pop	r30
    28c4:	bf 91       	pop	r27
    28c6:	af 91       	pop	r26
    28c8:	9f 91       	pop	r25
    28ca:	8f 91       	pop	r24
    28cc:	7f 91       	pop	r23
    28ce:	6f 91       	pop	r22
    28d0:	5f 91       	pop	r21
    28d2:	4f 91       	pop	r20
    28d4:	3f 91       	pop	r19
    28d6:	2f 91       	pop	r18
    28d8:	0f 90       	pop	r0
    28da:	0b be       	out	0x3b, r0	; 59
    28dc:	0f 90       	pop	r0
    28de:	09 be       	out	0x39, r0	; 57
    28e0:	0f 90       	pop	r0
    28e2:	08 be       	out	0x38, r0	; 56
    28e4:	0f 90       	pop	r0
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	0f 90       	pop	r0
    28ea:	1f 90       	pop	r1
    28ec:	18 95       	reti

000028ee <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    28ee:	1f 92       	push	r1
    28f0:	0f 92       	push	r0
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	0f 92       	push	r0
    28f6:	11 24       	eor	r1, r1
    28f8:	08 b6       	in	r0, 0x38	; 56
    28fa:	0f 92       	push	r0
    28fc:	18 be       	out	0x38, r1	; 56
    28fe:	09 b6       	in	r0, 0x39	; 57
    2900:	0f 92       	push	r0
    2902:	19 be       	out	0x39, r1	; 57
    2904:	0a b6       	in	r0, 0x3a	; 58
    2906:	0f 92       	push	r0
    2908:	1a be       	out	0x3a, r1	; 58
    290a:	0b b6       	in	r0, 0x3b	; 59
    290c:	0f 92       	push	r0
    290e:	1b be       	out	0x3b, r1	; 59
    2910:	8f 92       	push	r8
    2912:	9f 92       	push	r9
    2914:	af 92       	push	r10
    2916:	bf 92       	push	r11
    2918:	cf 92       	push	r12
    291a:	df 92       	push	r13
    291c:	ef 92       	push	r14
    291e:	ff 92       	push	r15
    2920:	1f 93       	push	r17
    2922:	2f 93       	push	r18
    2924:	3f 93       	push	r19
    2926:	4f 93       	push	r20
    2928:	5f 93       	push	r21
    292a:	6f 93       	push	r22
    292c:	7f 93       	push	r23
    292e:	8f 93       	push	r24
    2930:	9f 93       	push	r25
    2932:	af 93       	push	r26
    2934:	bf 93       	push	r27
    2936:	ef 93       	push	r30
    2938:	ff 93       	push	r31
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	00 d0       	rcall	.+0      	; 0x2940 <__vector_91+0x52>
    2940:	00 d0       	rcall	.+0      	; 0x2942 <__vector_91+0x54>
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    2946:	80 eb       	ldi	r24, 0xB0	; 176
    2948:	99 e0       	ldi	r25, 0x09	; 9
    294a:	0e 94 c8 02 	call	0x590	; 0x590 <usart_getchar>
    294e:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    2950:	84 32       	cpi	r24, 0x24	; 36
    2952:	49 f4       	brne	.+18     	; 0x2966 <__vector_91+0x78>
		writing = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <writing>
		pos = 0;
		word_pos = 0;
    295a:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <word_pos>
		commas = 0;
    295e:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <commas>
			}
		}
	}
		
	if(writing){
		switch(pos){
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	69 c2       	rjmp	.+1234   	; 0x2e38 <__vector_91+0x54a>
		writing = 1;
		pos = 0;
		word_pos = 0;
		commas = 0;
	}
	else if(c == (uint8_t) '*'){
    2966:	8a 32       	cpi	r24, 0x2A	; 42
    2968:	29 f4       	brne	.+10     	; 0x2974 <__vector_91+0x86>
		commas = 0;
    296a:	10 92 f1 20 	sts	0x20F1, r1	; 0x8020f1 <commas>
		writing = 0;
    296e:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <writing>
    2972:	92 c2       	rjmp	.+1316   	; 0x2e98 <__vector_91+0x5aa>
	}
	else if(c == (uint8_t) ','){
    2974:	8c 32       	cpi	r24, 0x2C	; 44
    2976:	09 f0       	breq	.+2      	; 0x297a <__vector_91+0x8c>
    2978:	4a c2       	rjmp	.+1172   	; 0x2e0e <__vector_91+0x520>
		gps[0] = 32;
    297a:	e0 e1       	ldi	r30, 0x10	; 16
    297c:	f1 e2       	ldi	r31, 0x21	; 33
    297e:	80 e2       	ldi	r24, 0x20	; 32
    2980:	80 83       	st	Z, r24
		if(gps[1] == 32){
    2982:	81 81       	ldd	r24, Z+1	; 0x01
    2984:	80 32       	cpi	r24, 0x20	; 32
    2986:	09 f0       	breq	.+2      	; 0x298a <__vector_91+0x9c>
    2988:	6e c2       	rjmp	.+1244   	; 0x2e66 <__vector_91+0x578>
			gps[0] = '0';
    298a:	80 e3       	ldi	r24, 0x30	; 48
    298c:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <gps>
    2990:	6a c2       	rjmp	.+1236   	; 0x2e66 <__vector_91+0x578>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2992:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <gps>
    2996:	8e 32       	cpi	r24, 0x2E	; 46
    2998:	09 f0       	breq	.+2      	; 0x299c <__vector_91+0xae>
    299a:	9f c1       	rjmp	.+830    	; 0x2cda <__vector_91+0x3ec>
    299c:	a5 c1       	rjmp	.+842    	; 0x2ce8 <__vector_91+0x3fa>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    299e:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <gps>
    29a2:	8e 32       	cpi	r24, 0x2E	; 46
    29a4:	09 f0       	breq	.+2      	; 0x29a8 <__vector_91+0xba>
    29a6:	ed c0       	rjmp	.+474    	; 0x2b82 <__vector_91+0x294>
    29a8:	f3 c0       	rjmp	.+486    	; 0x2b90 <__vector_91+0x2a2>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    29aa:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <gps>
    29ae:	8e 32       	cpi	r24, 0x2E	; 46
    29b0:	09 f0       	breq	.+2      	; 0x29b4 <__vector_91+0xc6>
    29b2:	52 c0       	rjmp	.+164    	; 0x2a58 <__vector_91+0x16a>
    29b4:	58 c0       	rjmp	.+176    	; 0x2a66 <__vector_91+0x178>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    29b6:	91 91       	ld	r25, Z+
    29b8:	9e 32       	cpi	r25, 0x2E	; 46
    29ba:	29 f4       	brne	.+10     	; 0x29c6 <__vector_91+0xd8>
    29bc:	01 c0       	rjmp	.+2      	; 0x29c0 <__vector_91+0xd2>
    29be:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    29c0:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <idx>
						break;
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <__vector_91+0xde>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    29c6:	8f 5f       	subi	r24, 0xFF	; 255
    29c8:	8f 30       	cpi	r24, 0x0F	; 15
    29ca:	a9 f7       	brne	.-22     	; 0x29b6 <__vector_91+0xc8>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    29cc:	20 91 f0 20 	lds	r18, 0x20F0	; 0x8020f0 <idx>
    29d0:	e2 2f       	mov	r30, r18
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	e0 5f       	subi	r30, 0xF0	; 240
    29d6:	fe 4d       	sbci	r31, 0xDE	; 222
    29d8:	80 e2       	ldi	r24, 0x20	; 32
    29da:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    29dc:	2f 5f       	subi	r18, 0xFF	; 255
    29de:	2f 30       	cpi	r18, 0x0F	; 15
    29e0:	c8 f4       	brcc	.+50     	; 0x2a14 <__vector_91+0x126>
					if(gps[i] == 32){
    29e2:	82 2f       	mov	r24, r18
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	fc 01       	movw	r30, r24
    29e8:	e0 5f       	subi	r30, 0xF0	; 240
    29ea:	fe 4d       	sbci	r31, 0xDE	; 222
    29ec:	30 81       	ld	r19, Z
    29ee:	30 32       	cpi	r19, 0x20	; 32
    29f0:	89 f0       	breq	.+34     	; 0x2a14 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    29f2:	40 e2       	ldi	r20, 0x20	; 32
    29f4:	08 c0       	rjmp	.+16     	; 0x2a06 <__vector_91+0x118>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    29f6:	82 2f       	mov	r24, r18
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	fc 01       	movw	r30, r24
    29fc:	e0 5f       	subi	r30, 0xF0	; 240
    29fe:	fe 4d       	sbci	r31, 0xDE	; 222
    2a00:	30 81       	ld	r19, Z
    2a02:	30 32       	cpi	r19, 0x20	; 32
    2a04:	39 f0       	breq	.+14     	; 0x2a14 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    2a06:	fc 01       	movw	r30, r24
    2a08:	e0 5f       	subi	r30, 0xF0	; 240
    2a0a:	fe 4d       	sbci	r31, 0xDE	; 222
    2a0c:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2a0e:	2f 5f       	subi	r18, 0xFF	; 255
    2a10:	2f 30       	cpi	r18, 0x0F	; 15
    2a12:	89 f7       	brne	.-30     	; 0x29f6 <__vector_91+0x108>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    2a14:	ce 01       	movw	r24, r28
    2a16:	01 96       	adiw	r24, 0x01	; 1
    2a18:	9f 93       	push	r25
    2a1a:	8f 93       	push	r24
    2a1c:	8d ea       	ldi	r24, 0xAD	; 173
    2a1e:	90 e2       	ldi	r25, 0x20	; 32
    2a20:	9f 93       	push	r25
    2a22:	8f 93       	push	r24
    2a24:	80 e1       	ldi	r24, 0x10	; 16
    2a26:	91 e2       	ldi	r25, 0x21	; 33
    2a28:	9f 93       	push	r25
    2a2a:	8f 93       	push	r24
    2a2c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <sscanf>
				gps_t = (double) val;
    2a30:	69 81       	ldd	r22, Y+1	; 0x01
    2a32:	7a 81       	ldd	r23, Y+2	; 0x02
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	9c 81       	ldd	r25, Y+4	; 0x04
    2a38:	0d d4       	rcall	.+2074   	; 0x3254 <__floatsisf>
    2a3a:	60 93 d2 20 	sts	0x20D2, r22	; 0x8020d2 <gps_t>
    2a3e:	70 93 d3 20 	sts	0x20D3, r23	; 0x8020d3 <gps_t+0x1>
    2a42:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <gps_t+0x2>
    2a46:	90 93 d5 20 	sts	0x20D5, r25	; 0x8020d5 <gps_t+0x3>
				break;
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	bd c1       	rjmp	.+890    	; 0x2dd2 <__vector_91+0x4e4>
    2a58:	e1 e1       	ldi	r30, 0x11	; 17
    2a5a:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2a5e:	91 91       	ld	r25, Z+
    2a60:	9e 32       	cpi	r25, 0x2E	; 46
    2a62:	29 f4       	brne	.+10     	; 0x2a6e <__vector_91+0x180>
    2a64:	01 c0       	rjmp	.+2      	; 0x2a68 <__vector_91+0x17a>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2a68:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <idx>
						break;
    2a6c:	03 c0       	rjmp	.+6      	; 0x2a74 <__vector_91+0x186>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    2a6e:	8f 5f       	subi	r24, 0xFF	; 255
    2a70:	8f 30       	cpi	r24, 0x0F	; 15
    2a72:	a9 f7       	brne	.-22     	; 0x2a5e <__vector_91+0x170>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2a74:	20 91 f0 20 	lds	r18, 0x20F0	; 0x8020f0 <idx>
    2a78:	42 2f       	mov	r20, r18
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	fa 01       	movw	r30, r20
    2a7e:	e0 5f       	subi	r30, 0xF0	; 240
    2a80:	fe 4d       	sbci	r31, 0xDE	; 222
    2a82:	80 e2       	ldi	r24, 0x20	; 32
    2a84:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2a86:	2f 5f       	subi	r18, 0xFF	; 255
    2a88:	2f 30       	cpi	r18, 0x0F	; 15
    2a8a:	f8 f4       	brcc	.+62     	; 0x2aca <__vector_91+0x1dc>
					if(gps[i] == 32){
    2a8c:	82 2f       	mov	r24, r18
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	fc 01       	movw	r30, r24
    2a92:	e0 5f       	subi	r30, 0xF0	; 240
    2a94:	fe 4d       	sbci	r31, 0xDE	; 222
    2a96:	30 81       	ld	r19, Z
    2a98:	30 32       	cpi	r19, 0x20	; 32
    2a9a:	b9 f0       	breq	.+46     	; 0x2aca <__vector_91+0x1dc>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2a9c:	60 e2       	ldi	r22, 0x20	; 32
    2a9e:	08 c0       	rjmp	.+16     	; 0x2ab0 <__vector_91+0x1c2>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2aa0:	82 2f       	mov	r24, r18
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	e0 5f       	subi	r30, 0xF0	; 240
    2aa8:	fe 4d       	sbci	r31, 0xDE	; 222
    2aaa:	30 81       	ld	r19, Z
    2aac:	30 32       	cpi	r19, 0x20	; 32
    2aae:	69 f0       	breq	.+26     	; 0x2aca <__vector_91+0x1dc>
						break;
					}
					dec[i-idx-1] = gps[i];
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	e4 1b       	sub	r30, r20
    2ab4:	f5 0b       	sbc	r31, r21
    2ab6:	e2 5e       	subi	r30, 0xE2	; 226
    2ab8:	fe 4d       	sbci	r31, 0xDE	; 222
    2aba:	30 83       	st	Z, r19
					gps[i] = 32;
    2abc:	fc 01       	movw	r30, r24
    2abe:	e0 5f       	subi	r30, 0xF0	; 240
    2ac0:	fe 4d       	sbci	r31, 0xDE	; 222
    2ac2:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2ac4:	2f 5f       	subi	r18, 0xFF	; 255
    2ac6:	2f 30       	cpi	r18, 0x0F	; 15
    2ac8:	59 f7       	brne	.-42     	; 0x2aa0 <__vector_91+0x1b2>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2aca:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <dec>
    2ace:	80 32       	cpi	r24, 0x20	; 32
    2ad0:	19 f4       	brne	.+6      	; 0x2ad8 <__vector_91+0x1ea>
					dec[0] = '0';
    2ad2:	80 e3       	ldi	r24, 0x30	; 48
    2ad4:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <dec>
				}
				sscanf(gps,"%ld",&val);
    2ad8:	ce 01       	movw	r24, r28
    2ada:	01 96       	adiw	r24, 0x01	; 1
    2adc:	9f 93       	push	r25
    2ade:	8f 93       	push	r24
    2ae0:	8d ea       	ldi	r24, 0xAD	; 173
    2ae2:	90 e2       	ldi	r25, 0x20	; 32
    2ae4:	9f 93       	push	r25
    2ae6:	8f 93       	push	r24
    2ae8:	80 e1       	ldi	r24, 0x10	; 16
    2aea:	91 e2       	ldi	r25, 0x21	; 33
    2aec:	9f 93       	push	r25
    2aee:	8f 93       	push	r24
    2af0:	eb d7       	rcall	.+4054   	; 0x3ac8 <sscanf>
				sscanf(dec,"%d",&val2);
    2af2:	ce 01       	movw	r24, r28
    2af4:	05 96       	adiw	r24, 0x05	; 5
    2af6:	9f 93       	push	r25
    2af8:	8f 93       	push	r24
    2afa:	81 eb       	ldi	r24, 0xB1	; 177
    2afc:	90 e2       	ldi	r25, 0x20	; 32
    2afe:	9f 93       	push	r25
    2b00:	8f 93       	push	r24
    2b02:	8f e1       	ldi	r24, 0x1F	; 31
    2b04:	91 e2       	ldi	r25, 0x21	; 33
    2b06:	9f 93       	push	r25
    2b08:	8f 93       	push	r24
    2b0a:	de d7       	rcall	.+4028   	; 0x3ac8 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    2b0c:	89 80       	ldd	r8, Y+1	; 0x01
    2b0e:	9a 80       	ldd	r9, Y+2	; 0x02
    2b10:	ab 80       	ldd	r10, Y+3	; 0x03
    2b12:	bc 80       	ldd	r11, Y+4	; 0x04
    2b14:	6d 81       	ldd	r22, Y+5	; 0x05
    2b16:	7e 81       	ldd	r23, Y+6	; 0x06
    2b18:	07 2e       	mov	r0, r23
    2b1a:	00 0c       	add	r0, r0
    2b1c:	88 0b       	sbc	r24, r24
    2b1e:	99 0b       	sbc	r25, r25
    2b20:	99 d3       	rcall	.+1842   	; 0x3254 <__floatsisf>
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e4       	ldi	r19, 0x40	; 64
    2b26:	4c e1       	ldi	r20, 0x1C	; 28
    2b28:	56 e4       	ldi	r21, 0x46	; 70
    2b2a:	bf d2       	rcall	.+1406   	; 0x30aa <__divsf3>
    2b2c:	6b 01       	movw	r12, r22
    2b2e:	7c 01       	movw	r14, r24
    2b30:	c5 01       	movw	r24, r10
    2b32:	b4 01       	movw	r22, r8
    2b34:	24 e6       	ldi	r18, 0x64	; 100
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	e7 d6       	rcall	.+3534   	; 0x390c <__divmodsi4>
    2b3e:	49 01       	movw	r8, r18
    2b40:	5a 01       	movw	r10, r20
    2b42:	88 d3       	rcall	.+1808   	; 0x3254 <__floatsisf>
    2b44:	9b 01       	movw	r18, r22
    2b46:	ac 01       	movw	r20, r24
    2b48:	c7 01       	movw	r24, r14
    2b4a:	b6 01       	movw	r22, r12
    2b4c:	cd d1       	rcall	.+922    	; 0x2ee8 <__addsf3>
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e7       	ldi	r20, 0x70	; 112
    2b54:	52 e4       	ldi	r21, 0x42	; 66
    2b56:	a9 d2       	rcall	.+1362   	; 0x30aa <__divsf3>
    2b58:	6b 01       	movw	r12, r22
    2b5a:	7c 01       	movw	r14, r24
    2b5c:	c5 01       	movw	r24, r10
    2b5e:	b4 01       	movw	r22, r8
    2b60:	79 d3       	rcall	.+1778   	; 0x3254 <__floatsisf>
    2b62:	9b 01       	movw	r18, r22
    2b64:	ac 01       	movw	r20, r24
    2b66:	c7 01       	movw	r24, r14
    2b68:	b6 01       	movw	r22, r12
    2b6a:	be d1       	rcall	.+892    	; 0x2ee8 <__addsf3>
    2b6c:	60 93 ce 20 	sts	0x20CE, r22	; 0x8020ce <gps_lat>
    2b70:	70 93 cf 20 	sts	0x20CF, r23	; 0x8020cf <gps_lat+0x1>
    2b74:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <gps_lat+0x2>
    2b78:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <gps_lat+0x3>
				break;
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	28 c1       	rjmp	.+592    	; 0x2dd2 <__vector_91+0x4e4>
    2b82:	e1 e1       	ldi	r30, 0x11	; 17
    2b84:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    2b86:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    2b88:	91 91       	ld	r25, Z+
    2b8a:	9e 32       	cpi	r25, 0x2E	; 46
    2b8c:	29 f4       	brne	.+10     	; 0x2b98 <__vector_91+0x2aa>
    2b8e:	01 c0       	rjmp	.+2      	; 0x2b92 <__vector_91+0x2a4>
    2b90:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2b92:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <idx>
						break;
    2b96:	03 c0       	rjmp	.+6      	; 0x2b9e <__vector_91+0x2b0>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    2b98:	8f 5f       	subi	r24, 0xFF	; 255
    2b9a:	8f 30       	cpi	r24, 0x0F	; 15
    2b9c:	a9 f7       	brne	.-22     	; 0x2b88 <__vector_91+0x29a>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2b9e:	20 91 f0 20 	lds	r18, 0x20F0	; 0x8020f0 <idx>
    2ba2:	42 2f       	mov	r20, r18
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	fa 01       	movw	r30, r20
    2ba8:	e0 5f       	subi	r30, 0xF0	; 240
    2baa:	fe 4d       	sbci	r31, 0xDE	; 222
    2bac:	80 e2       	ldi	r24, 0x20	; 32
    2bae:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    2bb0:	2f 5f       	subi	r18, 0xFF	; 255
    2bb2:	2f 30       	cpi	r18, 0x0F	; 15
    2bb4:	f8 f4       	brcc	.+62     	; 0x2bf4 <__vector_91+0x306>
					if(gps[i] == 32){
    2bb6:	82 2f       	mov	r24, r18
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	fc 01       	movw	r30, r24
    2bbc:	e0 5f       	subi	r30, 0xF0	; 240
    2bbe:	fe 4d       	sbci	r31, 0xDE	; 222
    2bc0:	30 81       	ld	r19, Z
    2bc2:	30 32       	cpi	r19, 0x20	; 32
    2bc4:	b9 f0       	breq	.+46     	; 0x2bf4 <__vector_91+0x306>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2bc6:	60 e2       	ldi	r22, 0x20	; 32
    2bc8:	08 c0       	rjmp	.+16     	; 0x2bda <__vector_91+0x2ec>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2bca:	82 2f       	mov	r24, r18
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	fc 01       	movw	r30, r24
    2bd0:	e0 5f       	subi	r30, 0xF0	; 240
    2bd2:	fe 4d       	sbci	r31, 0xDE	; 222
    2bd4:	30 81       	ld	r19, Z
    2bd6:	30 32       	cpi	r19, 0x20	; 32
    2bd8:	69 f0       	breq	.+26     	; 0x2bf4 <__vector_91+0x306>
						break;
					}
					dec[i-idx-1] = gps[i];
    2bda:	fc 01       	movw	r30, r24
    2bdc:	e4 1b       	sub	r30, r20
    2bde:	f5 0b       	sbc	r31, r21
    2be0:	e2 5e       	subi	r30, 0xE2	; 226
    2be2:	fe 4d       	sbci	r31, 0xDE	; 222
    2be4:	30 83       	st	Z, r19
					gps[i] = 32;
    2be6:	fc 01       	movw	r30, r24
    2be8:	e0 5f       	subi	r30, 0xF0	; 240
    2bea:	fe 4d       	sbci	r31, 0xDE	; 222
    2bec:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2bee:	2f 5f       	subi	r18, 0xFF	; 255
    2bf0:	2f 30       	cpi	r18, 0x0F	; 15
    2bf2:	59 f7       	brne	.-42     	; 0x2bca <__vector_91+0x2dc>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2bf4:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <dec>
    2bf8:	80 32       	cpi	r24, 0x20	; 32
    2bfa:	19 f4       	brne	.+6      	; 0x2c02 <__vector_91+0x314>
					dec[0] = '0';
    2bfc:	80 e3       	ldi	r24, 0x30	; 48
    2bfe:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <dec>
				}
				sscanf(gps,"%ld",&val);
    2c02:	ce 01       	movw	r24, r28
    2c04:	01 96       	adiw	r24, 0x01	; 1
    2c06:	9f 93       	push	r25
    2c08:	8f 93       	push	r24
    2c0a:	8d ea       	ldi	r24, 0xAD	; 173
    2c0c:	90 e2       	ldi	r25, 0x20	; 32
    2c0e:	9f 93       	push	r25
    2c10:	8f 93       	push	r24
    2c12:	80 e1       	ldi	r24, 0x10	; 16
    2c14:	91 e2       	ldi	r25, 0x21	; 33
    2c16:	9f 93       	push	r25
    2c18:	8f 93       	push	r24
    2c1a:	56 d7       	rcall	.+3756   	; 0x3ac8 <sscanf>
				sscanf(dec,"%d",&val2);
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	05 96       	adiw	r24, 0x05	; 5
    2c20:	9f 93       	push	r25
    2c22:	8f 93       	push	r24
    2c24:	81 eb       	ldi	r24, 0xB1	; 177
    2c26:	90 e2       	ldi	r25, 0x20	; 32
    2c28:	9f 93       	push	r25
    2c2a:	8f 93       	push	r24
    2c2c:	8f e1       	ldi	r24, 0x1F	; 31
    2c2e:	91 e2       	ldi	r25, 0x21	; 33
    2c30:	9f 93       	push	r25
    2c32:	8f 93       	push	r24
    2c34:	49 d7       	rcall	.+3730   	; 0x3ac8 <sscanf>
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    2c36:	89 80       	ldd	r8, Y+1	; 0x01
    2c38:	9a 80       	ldd	r9, Y+2	; 0x02
    2c3a:	ab 80       	ldd	r10, Y+3	; 0x03
    2c3c:	bc 80       	ldd	r11, Y+4	; 0x04
    2c3e:	6d 81       	ldd	r22, Y+5	; 0x05
    2c40:	7e 81       	ldd	r23, Y+6	; 0x06
    2c42:	07 2e       	mov	r0, r23
    2c44:	00 0c       	add	r0, r0
    2c46:	88 0b       	sbc	r24, r24
    2c48:	99 0b       	sbc	r25, r25
    2c4a:	04 d3       	rcall	.+1544   	; 0x3254 <__floatsisf>
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e4       	ldi	r19, 0x40	; 64
    2c50:	4c e1       	ldi	r20, 0x1C	; 28
    2c52:	56 e4       	ldi	r21, 0x46	; 70
    2c54:	2a d2       	rcall	.+1108   	; 0x30aa <__divsf3>
    2c56:	6b 01       	movw	r12, r22
    2c58:	7c 01       	movw	r14, r24
    2c5a:	c5 01       	movw	r24, r10
    2c5c:	b4 01       	movw	r22, r8
    2c5e:	24 e6       	ldi	r18, 0x64	; 100
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	50 e0       	ldi	r21, 0x00	; 0
    2c66:	52 d6       	rcall	.+3236   	; 0x390c <__divmodsi4>
    2c68:	49 01       	movw	r8, r18
    2c6a:	5a 01       	movw	r10, r20
    2c6c:	f3 d2       	rcall	.+1510   	; 0x3254 <__floatsisf>
    2c6e:	9b 01       	movw	r18, r22
    2c70:	ac 01       	movw	r20, r24
    2c72:	c7 01       	movw	r24, r14
    2c74:	b6 01       	movw	r22, r12
    2c76:	38 d1       	rcall	.+624    	; 0x2ee8 <__addsf3>
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e7       	ldi	r20, 0x70	; 112
    2c7e:	52 e4       	ldi	r21, 0x42	; 66
    2c80:	14 d2       	rcall	.+1064   	; 0x30aa <__divsf3>
    2c82:	6b 01       	movw	r12, r22
    2c84:	7c 01       	movw	r14, r24
    2c86:	c5 01       	movw	r24, r10
    2c88:	b4 01       	movw	r22, r8
    2c8a:	e4 d2       	rcall	.+1480   	; 0x3254 <__floatsisf>
    2c8c:	9b 01       	movw	r18, r22
    2c8e:	ac 01       	movw	r20, r24
    2c90:	c7 01       	movw	r24, r14
    2c92:	b6 01       	movw	r22, r12
    2c94:	29 d1       	rcall	.+594    	; 0x2ee8 <__addsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	b0 58       	subi	r27, 0x80	; 128
    2c9c:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <gps_long>
    2ca0:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <gps_long+0x1>
    2ca4:	a0 93 cc 20 	sts	0x20CC, r26	; 0x8020cc <gps_long+0x2>
    2ca8:	b0 93 cd 20 	sts	0x20CD, r27	; 0x8020cd <gps_long+0x3>
    2cac:	cd bf       	out	0x3d, r28	; 61
				break;
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	90 c0       	rjmp	.+288    	; 0x2dd2 <__vector_91+0x4e4>
    2cb2:	84 ec       	ldi	r24, 0xC4	; 196
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    2cb4:	90 e2       	ldi	r25, 0x20	; 32
    2cb6:	9f 93       	push	r25
    2cb8:	8f 93       	push	r24
    2cba:	81 eb       	ldi	r24, 0xB1	; 177
    2cbc:	90 e2       	ldi	r25, 0x20	; 32
    2cbe:	9f 93       	push	r25
    2cc0:	8f 93       	push	r24
    2cc2:	80 e1       	ldi	r24, 0x10	; 16
    2cc4:	91 e2       	ldi	r25, 0x21	; 33
    2cc6:	9f 93       	push	r25
    2cc8:	8f 93       	push	r24
    2cca:	fe d6       	rcall	.+3580   	; 0x3ac8 <sscanf>
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
				break;
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	7c c0       	rjmp	.+248    	; 0x2dd2 <__vector_91+0x4e4>
    2cda:	e1 e1       	ldi	r30, 0x11	; 17
    2cdc:	f1 e2       	ldi	r31, 0x21	; 33
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	91 91       	ld	r25, Z+
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2ce2:	9e 32       	cpi	r25, 0x2E	; 46
					if(gps[i] == (uint8_t) '.'){
    2ce4:	29 f4       	brne	.+10     	; 0x2cf0 <__vector_91+0x402>
    2ce6:	01 c0       	rjmp	.+2      	; 0x2cea <__vector_91+0x3fc>
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <idx>
						idx = i;
    2cee:	03 c0       	rjmp	.+6      	; 0x2cf6 <__vector_91+0x408>
    2cf0:	8f 5f       	subi	r24, 0xFF	; 255
						break;
    2cf2:	8f 30       	cpi	r24, 0x0F	; 15
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2cf4:	a9 f7       	brne	.-22     	; 0x2ce0 <__vector_91+0x3f2>
    2cf6:	20 91 f0 20 	lds	r18, 0x20F0	; 0x8020f0 <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2cfa:	42 2f       	mov	r20, r18
    2cfc:	50 e0       	ldi	r21, 0x00	; 0
    2cfe:	fa 01       	movw	r30, r20
    2d00:	e0 5f       	subi	r30, 0xF0	; 240
    2d02:	fe 4d       	sbci	r31, 0xDE	; 222
    2d04:	80 e2       	ldi	r24, 0x20	; 32
    2d06:	80 83       	st	Z, r24
    2d08:	2f 5f       	subi	r18, 0xFF	; 255
    2d0a:	2f 30       	cpi	r18, 0x0F	; 15
				for(uint8_t i = idx+1; i < 15; i++){
    2d0c:	f8 f4       	brcc	.+62     	; 0x2d4c <__vector_91+0x45e>
    2d0e:	82 2f       	mov	r24, r18
    2d10:	90 e0       	ldi	r25, 0x00	; 0
					if(gps[i] == 32){
    2d12:	fc 01       	movw	r30, r24
    2d14:	e0 5f       	subi	r30, 0xF0	; 240
    2d16:	fe 4d       	sbci	r31, 0xDE	; 222
    2d18:	30 81       	ld	r19, Z
    2d1a:	30 32       	cpi	r19, 0x20	; 32
    2d1c:	b9 f0       	breq	.+46     	; 0x2d4c <__vector_91+0x45e>
    2d1e:	60 e2       	ldi	r22, 0x20	; 32
    2d20:	08 c0       	rjmp	.+16     	; 0x2d32 <__vector_91+0x444>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    2d22:	82 2f       	mov	r24, r18
    2d24:	90 e0       	ldi	r25, 0x00	; 0
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2d26:	fc 01       	movw	r30, r24
    2d28:	e0 5f       	subi	r30, 0xF0	; 240
    2d2a:	fe 4d       	sbci	r31, 0xDE	; 222
    2d2c:	30 81       	ld	r19, Z
    2d2e:	30 32       	cpi	r19, 0x20	; 32
    2d30:	69 f0       	breq	.+26     	; 0x2d4c <__vector_91+0x45e>
    2d32:	fc 01       	movw	r30, r24
    2d34:	e4 1b       	sub	r30, r20
						break;
					}
					dec[i-idx-1] = gps[i];
    2d36:	f5 0b       	sbc	r31, r21
    2d38:	e2 5e       	subi	r30, 0xE2	; 226
    2d3a:	fe 4d       	sbci	r31, 0xDE	; 222
    2d3c:	30 83       	st	Z, r19
    2d3e:	fc 01       	movw	r30, r24
    2d40:	e0 5f       	subi	r30, 0xF0	; 240
					gps[i] = 32;
    2d42:	fe 4d       	sbci	r31, 0xDE	; 222
    2d44:	60 83       	st	Z, r22
    2d46:	2f 5f       	subi	r18, 0xFF	; 255
    2d48:	2f 30       	cpi	r18, 0x0F	; 15
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2d4a:	59 f7       	brne	.-42     	; 0x2d22 <__vector_91+0x434>
    2d4c:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <dec>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2d50:	80 32       	cpi	r24, 0x20	; 32
    2d52:	19 f4       	brne	.+6      	; 0x2d5a <__vector_91+0x46c>
    2d54:	80 e3       	ldi	r24, 0x30	; 48
					dec[0] = '0';
    2d56:	80 93 1f 21 	sts	0x211F, r24	; 0x80211f <dec>
    2d5a:	ce 01       	movw	r24, r28
				}
				sscanf(gps,"%ld",&val);
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	9f 93       	push	r25
    2d60:	8f 93       	push	r24
    2d62:	8d ea       	ldi	r24, 0xAD	; 173
    2d64:	90 e2       	ldi	r25, 0x20	; 32
    2d66:	9f 93       	push	r25
    2d68:	8f 93       	push	r24
    2d6a:	80 e1       	ldi	r24, 0x10	; 16
    2d6c:	91 e2       	ldi	r25, 0x21	; 33
    2d6e:	9f 93       	push	r25
    2d70:	8f 93       	push	r24
    2d72:	aa d6       	rcall	.+3412   	; 0x3ac8 <sscanf>
				sscanf(dec,"%d",&val2);
    2d74:	ce 01       	movw	r24, r28
    2d76:	05 96       	adiw	r24, 0x05	; 5
    2d78:	9f 93       	push	r25
    2d7a:	8f 93       	push	r24
    2d7c:	81 eb       	ldi	r24, 0xB1	; 177
    2d7e:	90 e2       	ldi	r25, 0x20	; 32
    2d80:	9f 93       	push	r25
    2d82:	8f 93       	push	r24
    2d84:	8f e1       	ldi	r24, 0x1F	; 31
    2d86:	91 e2       	ldi	r25, 0x21	; 33
    2d88:	9f 93       	push	r25
    2d8a:	8f 93       	push	r24
				gps_alt = (double) val + ((double) val2/10.0);
    2d8c:	9d d6       	rcall	.+3386   	; 0x3ac8 <sscanf>
    2d8e:	69 81       	ldd	r22, Y+1	; 0x01
    2d90:	7a 81       	ldd	r23, Y+2	; 0x02
    2d92:	8b 81       	ldd	r24, Y+3	; 0x03
    2d94:	9c 81       	ldd	r25, Y+4	; 0x04
    2d96:	5e d2       	rcall	.+1212   	; 0x3254 <__floatsisf>
    2d98:	6b 01       	movw	r12, r22
    2d9a:	7c 01       	movw	r14, r24
    2d9c:	6d 81       	ldd	r22, Y+5	; 0x05
    2d9e:	7e 81       	ldd	r23, Y+6	; 0x06
    2da0:	07 2e       	mov	r0, r23
    2da2:	00 0c       	add	r0, r0
    2da4:	88 0b       	sbc	r24, r24
    2da6:	99 0b       	sbc	r25, r25
    2da8:	55 d2       	rcall	.+1194   	; 0x3254 <__floatsisf>
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e2       	ldi	r20, 0x20	; 32
    2db0:	51 e4       	ldi	r21, 0x41	; 65
    2db2:	7b d1       	rcall	.+758    	; 0x30aa <__divsf3>
    2db4:	9b 01       	movw	r18, r22
    2db6:	ac 01       	movw	r20, r24
    2db8:	c7 01       	movw	r24, r14
    2dba:	b6 01       	movw	r22, r12
    2dbc:	95 d0       	rcall	.+298    	; 0x2ee8 <__addsf3>
    2dbe:	60 93 c6 20 	sts	0x20C6, r22	; 0x8020c6 <gps_alt>
    2dc2:	70 93 c7 20 	sts	0x20C7, r23	; 0x8020c7 <gps_alt+0x1>
    2dc6:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <gps_alt+0x2>
    2dca:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <gps_alt+0x3>
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	de bf       	out	0x3e, r29	; 62
				break;
    2dd2:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <writing>
		}
	
		if(writing){
    2dd6:	88 23       	and	r24, r24
    2dd8:	d1 f0       	breq	.+52     	; 0x2e0e <__vector_91+0x520>
    2dda:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <idx>
			idx = 0;
    2dde:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <commas>
			commas++;
    2de2:	8f 5f       	subi	r24, 0xFF	; 255
    2de4:	80 93 f1 20 	sts	0x20F1, r24	; 0x8020f1 <commas>
    2de8:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <word_pos>
			word_pos = 0;
    2dec:	e0 e1       	ldi	r30, 0x10	; 16
    2dee:	f1 e2       	ldi	r31, 0x21	; 33
    2df0:	2f e1       	ldi	r18, 0x1F	; 31
    2df2:	31 e2       	ldi	r19, 0x21	; 33
    2df4:	80 e2       	ldi	r24, 0x20	; 32
    2df6:	81 93       	st	Z+, r24
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    2df8:	2e 17       	cp	r18, r30
    2dfa:	3f 07       	cpc	r19, r31
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    2dfc:	e1 f7       	brne	.-8      	; 0x2df6 <__vector_91+0x508>
    2dfe:	ef e1       	ldi	r30, 0x1F	; 31
    2e00:	f1 e2       	ldi	r31, 0x21	; 33
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    2e02:	80 e2       	ldi	r24, 0x20	; 32
    2e04:	80 83       	st	Z, r24
    2e06:	81 83       	std	Z+1, r24	; 0x01
    2e08:	82 83       	std	Z+2, r24	; 0x02
    2e0a:	83 83       	std	Z+3, r24	; 0x03
    2e0c:	84 83       	std	Z+4, r24	; 0x04
    2e0e:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <writing>
			}
		}
	}
		
	if(writing){
    2e12:	88 23       	and	r24, r24
    2e14:	09 f4       	brne	.+2      	; 0x2e18 <__vector_91+0x52a>
    2e16:	40 c0       	rjmp	.+128    	; 0x2e98 <__vector_91+0x5aa>
    2e18:	90 91 f3 20 	lds	r25, 0x20F3	; 0x8020f3 <pos>
		switch(pos){
    2e1c:	93 30       	cpi	r25, 0x03	; 3
    2e1e:	19 f0       	breq	.+6      	; 0x2e26 <__vector_91+0x538>
    2e20:	94 30       	cpi	r25, 0x04	; 4
    2e22:	31 f0       	breq	.+12     	; 0x2e30 <__vector_91+0x542>
    2e24:	09 c0       	rjmp	.+18     	; 0x2e38 <__vector_91+0x54a>
    2e26:	17 34       	cpi	r17, 0x47	; 71
    2e28:	39 f0       	breq	.+14     	; 0x2e38 <__vector_91+0x54a>
			case 3:
				if(c != 'G'){
    2e2a:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <writing>
					writing = 0;
    2e2e:	04 c0       	rjmp	.+8      	; 0x2e38 <__vector_91+0x54a>
    2e30:	17 34       	cpi	r17, 0x47	; 71
    2e32:	11 f0       	breq	.+4      	; 0x2e38 <__vector_91+0x54a>
				}
				break;
				
			case 4:
				if(c != 'G'){
    2e34:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <writing>
					writing = 0;
    2e38:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <word_pos>
				}
				break;
		}
		gps[word_pos] = c;
    2e3c:	e8 2f       	mov	r30, r24
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	e0 5f       	subi	r30, 0xF0	; 240
    2e42:	fe 4d       	sbci	r31, 0xDE	; 222
    2e44:	10 83       	st	Z, r17
    2e46:	8f 5f       	subi	r24, 0xFF	; 255
    2e48:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <word_pos>
		word_pos++;
    2e4c:	9f 5f       	subi	r25, 0xFF	; 255
    2e4e:	90 93 f3 20 	sts	0x20F3, r25	; 0x8020f3 <pos>
		pos++;
    2e52:	22 c0       	rjmp	.+68     	; 0x2e98 <__vector_91+0x5aa>
    2e54:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <gps>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2e58:	8e 32       	cpi	r24, 0x2E	; 46
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <__vector_91+0x570>
    2e5c:	b0 cd       	rjmp	.-1184   	; 0x29be <__vector_91+0xd0>
    2e5e:	e1 e1       	ldi	r30, 0x11	; 17
    2e60:	f1 e2       	ldi	r31, 0x21	; 33
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	a8 cd       	rjmp	.-1200   	; 0x29b6 <__vector_91+0xc8>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2e66:	19 82       	std	Y+1, r1	; 0x01
    2e68:	1a 82       	std	Y+2, r1	; 0x02
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    2e6a:	1b 82       	std	Y+3, r1	; 0x03
    2e6c:	1c 82       	std	Y+4, r1	; 0x04
    2e6e:	1d 82       	std	Y+5, r1	; 0x05
    2e70:	1e 82       	std	Y+6, r1	; 0x06
		int16_t val2 = 0;
    2e72:	80 91 f1 20 	lds	r24, 0x20F1	; 0x8020f1 <commas>
		switch(commas){
    2e76:	84 30       	cpi	r24, 0x04	; 4
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <__vector_91+0x58e>
    2e7a:	91 cd       	rjmp	.-1246   	; 0x299e <__vector_91+0xb0>
    2e7c:	30 f4       	brcc	.+12     	; 0x2e8a <__vector_91+0x59c>
    2e7e:	81 30       	cpi	r24, 0x01	; 1
    2e80:	49 f3       	breq	.-46     	; 0x2e54 <__vector_91+0x566>
    2e82:	82 30       	cpi	r24, 0x02	; 2
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <__vector_91+0x59a>
    2e86:	91 cd       	rjmp	.-1246   	; 0x29aa <__vector_91+0xbc>
    2e88:	a4 cf       	rjmp	.-184    	; 0x2dd2 <__vector_91+0x4e4>
    2e8a:	87 30       	cpi	r24, 0x07	; 7
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <__vector_91+0x5a2>
    2e8e:	11 cf       	rjmp	.-478    	; 0x2cb2 <__vector_91+0x3c4>
    2e90:	89 30       	cpi	r24, 0x09	; 9
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <__vector_91+0x5a8>
    2e94:	7e cd       	rjmp	.-1284   	; 0x2992 <__vector_91+0xa4>
    2e96:	9d cf       	rjmp	.-198    	; 0x2dd2 <__vector_91+0x4e4>
    2e98:	26 96       	adiw	r28, 0x06	; 6
    2e9a:	cd bf       	out	0x3d, r28	; 61
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	df 91       	pop	r29
    2ea0:	cf 91       	pop	r28
    2ea2:	ff 91       	pop	r31
    2ea4:	ef 91       	pop	r30
    2ea6:	bf 91       	pop	r27
    2ea8:	af 91       	pop	r26
    2eaa:	9f 91       	pop	r25
    2eac:	8f 91       	pop	r24
    2eae:	7f 91       	pop	r23
    2eb0:	6f 91       	pop	r22
    2eb2:	5f 91       	pop	r21
    2eb4:	4f 91       	pop	r20
    2eb6:	3f 91       	pop	r19
    2eb8:	2f 91       	pop	r18
    2eba:	1f 91       	pop	r17
    2ebc:	ff 90       	pop	r15
    2ebe:	ef 90       	pop	r14
    2ec0:	df 90       	pop	r13
    2ec2:	cf 90       	pop	r12
    2ec4:	bf 90       	pop	r11
    2ec6:	af 90       	pop	r10
    2ec8:	9f 90       	pop	r9
    2eca:	8f 90       	pop	r8
    2ecc:	0f 90       	pop	r0
    2ece:	0b be       	out	0x3b, r0	; 59
    2ed0:	0f 90       	pop	r0
    2ed2:	0a be       	out	0x3a, r0	; 58
    2ed4:	0f 90       	pop	r0
    2ed6:	09 be       	out	0x39, r0	; 57
    2ed8:	0f 90       	pop	r0
    2eda:	08 be       	out	0x38, r0	; 56
    2edc:	0f 90       	pop	r0
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	0f 90       	pop	r0
    2ee2:	1f 90       	pop	r1
    2ee4:	18 95       	reti

00002ee6 <__subsf3>:
    2ee6:	50 58       	subi	r21, 0x80	; 128

00002ee8 <__addsf3>:
    2ee8:	bb 27       	eor	r27, r27
    2eea:	aa 27       	eor	r26, r26
    2eec:	0e d0       	rcall	.+28     	; 0x2f0a <__addsf3x>
    2eee:	89 c2       	rjmp	.+1298   	; 0x3402 <__fp_round>
    2ef0:	7a d2       	rcall	.+1268   	; 0x33e6 <__fp_pscA>
    2ef2:	30 f0       	brcs	.+12     	; 0x2f00 <__addsf3+0x18>
    2ef4:	7f d2       	rcall	.+1278   	; 0x33f4 <__fp_pscB>
    2ef6:	20 f0       	brcs	.+8      	; 0x2f00 <__addsf3+0x18>
    2ef8:	31 f4       	brne	.+12     	; 0x2f06 <__addsf3+0x1e>
    2efa:	9f 3f       	cpi	r25, 0xFF	; 255
    2efc:	11 f4       	brne	.+4      	; 0x2f02 <__addsf3+0x1a>
    2efe:	1e f4       	brtc	.+6      	; 0x2f06 <__addsf3+0x1e>
    2f00:	29 c2       	rjmp	.+1106   	; 0x3354 <__fp_nan>
    2f02:	0e f4       	brtc	.+2      	; 0x2f06 <__addsf3+0x1e>
    2f04:	e0 95       	com	r30
    2f06:	e7 fb       	bst	r30, 7
    2f08:	1f c2       	rjmp	.+1086   	; 0x3348 <__fp_inf>

00002f0a <__addsf3x>:
    2f0a:	e9 2f       	mov	r30, r25
    2f0c:	8b d2       	rcall	.+1302   	; 0x3424 <__fp_split3>
    2f0e:	80 f3       	brcs	.-32     	; 0x2ef0 <__addsf3+0x8>
    2f10:	ba 17       	cp	r27, r26
    2f12:	62 07       	cpc	r22, r18
    2f14:	73 07       	cpc	r23, r19
    2f16:	84 07       	cpc	r24, r20
    2f18:	95 07       	cpc	r25, r21
    2f1a:	18 f0       	brcs	.+6      	; 0x2f22 <__addsf3x+0x18>
    2f1c:	71 f4       	brne	.+28     	; 0x2f3a <__addsf3x+0x30>
    2f1e:	9e f5       	brtc	.+102    	; 0x2f86 <__addsf3x+0x7c>
    2f20:	a3 c2       	rjmp	.+1350   	; 0x3468 <__fp_zero>
    2f22:	0e f4       	brtc	.+2      	; 0x2f26 <__addsf3x+0x1c>
    2f24:	e0 95       	com	r30
    2f26:	0b 2e       	mov	r0, r27
    2f28:	ba 2f       	mov	r27, r26
    2f2a:	a0 2d       	mov	r26, r0
    2f2c:	0b 01       	movw	r0, r22
    2f2e:	b9 01       	movw	r22, r18
    2f30:	90 01       	movw	r18, r0
    2f32:	0c 01       	movw	r0, r24
    2f34:	ca 01       	movw	r24, r20
    2f36:	a0 01       	movw	r20, r0
    2f38:	11 24       	eor	r1, r1
    2f3a:	ff 27       	eor	r31, r31
    2f3c:	59 1b       	sub	r21, r25
    2f3e:	99 f0       	breq	.+38     	; 0x2f66 <__addsf3x+0x5c>
    2f40:	59 3f       	cpi	r21, 0xF9	; 249
    2f42:	50 f4       	brcc	.+20     	; 0x2f58 <__addsf3x+0x4e>
    2f44:	50 3e       	cpi	r21, 0xE0	; 224
    2f46:	68 f1       	brcs	.+90     	; 0x2fa2 <__addsf3x+0x98>
    2f48:	1a 16       	cp	r1, r26
    2f4a:	f0 40       	sbci	r31, 0x00	; 0
    2f4c:	a2 2f       	mov	r26, r18
    2f4e:	23 2f       	mov	r18, r19
    2f50:	34 2f       	mov	r19, r20
    2f52:	44 27       	eor	r20, r20
    2f54:	58 5f       	subi	r21, 0xF8	; 248
    2f56:	f3 cf       	rjmp	.-26     	; 0x2f3e <__addsf3x+0x34>
    2f58:	46 95       	lsr	r20
    2f5a:	37 95       	ror	r19
    2f5c:	27 95       	ror	r18
    2f5e:	a7 95       	ror	r26
    2f60:	f0 40       	sbci	r31, 0x00	; 0
    2f62:	53 95       	inc	r21
    2f64:	c9 f7       	brne	.-14     	; 0x2f58 <__addsf3x+0x4e>
    2f66:	7e f4       	brtc	.+30     	; 0x2f86 <__addsf3x+0x7c>
    2f68:	1f 16       	cp	r1, r31
    2f6a:	ba 0b       	sbc	r27, r26
    2f6c:	62 0b       	sbc	r22, r18
    2f6e:	73 0b       	sbc	r23, r19
    2f70:	84 0b       	sbc	r24, r20
    2f72:	ba f0       	brmi	.+46     	; 0x2fa2 <__addsf3x+0x98>
    2f74:	91 50       	subi	r25, 0x01	; 1
    2f76:	a1 f0       	breq	.+40     	; 0x2fa0 <__addsf3x+0x96>
    2f78:	ff 0f       	add	r31, r31
    2f7a:	bb 1f       	adc	r27, r27
    2f7c:	66 1f       	adc	r22, r22
    2f7e:	77 1f       	adc	r23, r23
    2f80:	88 1f       	adc	r24, r24
    2f82:	c2 f7       	brpl	.-16     	; 0x2f74 <__addsf3x+0x6a>
    2f84:	0e c0       	rjmp	.+28     	; 0x2fa2 <__addsf3x+0x98>
    2f86:	ba 0f       	add	r27, r26
    2f88:	62 1f       	adc	r22, r18
    2f8a:	73 1f       	adc	r23, r19
    2f8c:	84 1f       	adc	r24, r20
    2f8e:	48 f4       	brcc	.+18     	; 0x2fa2 <__addsf3x+0x98>
    2f90:	87 95       	ror	r24
    2f92:	77 95       	ror	r23
    2f94:	67 95       	ror	r22
    2f96:	b7 95       	ror	r27
    2f98:	f7 95       	ror	r31
    2f9a:	9e 3f       	cpi	r25, 0xFE	; 254
    2f9c:	08 f0       	brcs	.+2      	; 0x2fa0 <__addsf3x+0x96>
    2f9e:	b3 cf       	rjmp	.-154    	; 0x2f06 <__addsf3+0x1e>
    2fa0:	93 95       	inc	r25
    2fa2:	88 0f       	add	r24, r24
    2fa4:	08 f0       	brcs	.+2      	; 0x2fa8 <__addsf3x+0x9e>
    2fa6:	99 27       	eor	r25, r25
    2fa8:	ee 0f       	add	r30, r30
    2faa:	97 95       	ror	r25
    2fac:	87 95       	ror	r24
    2fae:	08 95       	ret

00002fb0 <asin>:
    2fb0:	9f 93       	push	r25
    2fb2:	9f 77       	andi	r25, 0x7F	; 127
    2fb4:	ee e3       	ldi	r30, 0x3E	; 62
    2fb6:	89 37       	cpi	r24, 0x79	; 121
    2fb8:	9e 07       	cpc	r25, r30
    2fba:	20 f4       	brcc	.+8      	; 0x2fc4 <asin+0x14>
    2fbc:	ec ef       	ldi	r30, 0xFC	; 252
    2fbe:	f1 e0       	ldi	r31, 0x01	; 1
    2fc0:	01 d2       	rcall	.+1026   	; 0x33c4 <__fp_powsodd>
    2fc2:	09 c0       	rjmp	.+18     	; 0x2fd6 <asin+0x26>
    2fc4:	82 d1       	rcall	.+772    	; 0x32ca <__fp_arccos>
    2fc6:	90 58       	subi	r25, 0x80	; 128
    2fc8:	a2 ea       	ldi	r26, 0xA2	; 162
    2fca:	2a ed       	ldi	r18, 0xDA	; 218
    2fcc:	3f e0       	ldi	r19, 0x0F	; 15
    2fce:	49 ec       	ldi	r20, 0xC9	; 201
    2fd0:	5f e3       	ldi	r21, 0x3F	; 63
    2fd2:	9b df       	rcall	.-202    	; 0x2f0a <__addsf3x>
    2fd4:	16 d2       	rcall	.+1068   	; 0x3402 <__fp_round>
    2fd6:	0f 90       	pop	r0
    2fd8:	07 fc       	sbrc	r0, 7
    2fda:	90 58       	subi	r25, 0x80	; 128
    2fdc:	08 95       	ret
    2fde:	03 d2       	rcall	.+1030   	; 0x33e6 <__fp_pscA>
    2fe0:	58 f0       	brcs	.+22     	; 0x2ff8 <asin+0x48>
    2fe2:	80 e8       	ldi	r24, 0x80	; 128
    2fe4:	91 e0       	ldi	r25, 0x01	; 1
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <asin+0x3a>
    2fe8:	9e ef       	ldi	r25, 0xFE	; 254
    2fea:	04 d2       	rcall	.+1032   	; 0x33f4 <__fp_pscB>
    2fec:	28 f0       	brcs	.+10     	; 0x2ff8 <asin+0x48>
    2fee:	40 e8       	ldi	r20, 0x80	; 128
    2ff0:	51 e0       	ldi	r21, 0x01	; 1
    2ff2:	59 f4       	brne	.+22     	; 0x300a <atan2+0xe>
    2ff4:	5e ef       	ldi	r21, 0xFE	; 254
    2ff6:	09 c0       	rjmp	.+18     	; 0x300a <atan2+0xe>
    2ff8:	ad c1       	rjmp	.+858    	; 0x3354 <__fp_nan>
    2ffa:	36 c2       	rjmp	.+1132   	; 0x3468 <__fp_zero>

00002ffc <atan2>:
    2ffc:	e9 2f       	mov	r30, r25
    2ffe:	e0 78       	andi	r30, 0x80	; 128
    3000:	11 d2       	rcall	.+1058   	; 0x3424 <__fp_split3>
    3002:	68 f3       	brcs	.-38     	; 0x2fde <asin+0x2e>
    3004:	09 2e       	mov	r0, r25
    3006:	05 2a       	or	r0, r21
    3008:	c1 f3       	breq	.-16     	; 0x2ffa <asin+0x4a>
    300a:	26 17       	cp	r18, r22
    300c:	37 07       	cpc	r19, r23
    300e:	48 07       	cpc	r20, r24
    3010:	59 07       	cpc	r21, r25
    3012:	38 f0       	brcs	.+14     	; 0x3022 <atan2+0x26>
    3014:	0e 2e       	mov	r0, r30
    3016:	07 f8       	bld	r0, 7
    3018:	e0 25       	eor	r30, r0
    301a:	69 f0       	breq	.+26     	; 0x3036 <atan2+0x3a>
    301c:	e0 25       	eor	r30, r0
    301e:	e0 64       	ori	r30, 0x40	; 64
    3020:	0a c0       	rjmp	.+20     	; 0x3036 <atan2+0x3a>
    3022:	ef 63       	ori	r30, 0x3F	; 63
    3024:	07 f8       	bld	r0, 7
    3026:	00 94       	com	r0
    3028:	07 fa       	bst	r0, 7
    302a:	db 01       	movw	r26, r22
    302c:	b9 01       	movw	r22, r18
    302e:	9d 01       	movw	r18, r26
    3030:	dc 01       	movw	r26, r24
    3032:	ca 01       	movw	r24, r20
    3034:	ad 01       	movw	r20, r26
    3036:	ef 93       	push	r30
    3038:	47 d0       	rcall	.+142    	; 0x30c8 <__divsf3_pse>
    303a:	e3 d1       	rcall	.+966    	; 0x3402 <__fp_round>
    303c:	0a d0       	rcall	.+20     	; 0x3052 <atan>
    303e:	5f 91       	pop	r21
    3040:	55 23       	and	r21, r21
    3042:	31 f0       	breq	.+12     	; 0x3050 <atan2+0x54>
    3044:	2b ed       	ldi	r18, 0xDB	; 219
    3046:	3f e0       	ldi	r19, 0x0F	; 15
    3048:	49 e4       	ldi	r20, 0x49	; 73
    304a:	50 fd       	sbrc	r21, 0
    304c:	49 ec       	ldi	r20, 0xC9	; 201
    304e:	4c cf       	rjmp	.-360    	; 0x2ee8 <__addsf3>
    3050:	08 95       	ret

00003052 <atan>:
    3052:	df 93       	push	r29
    3054:	dd 27       	eor	r29, r29
    3056:	b9 2f       	mov	r27, r25
    3058:	bf 77       	andi	r27, 0x7F	; 127
    305a:	40 e8       	ldi	r20, 0x80	; 128
    305c:	5f e3       	ldi	r21, 0x3F	; 63
    305e:	16 16       	cp	r1, r22
    3060:	17 06       	cpc	r1, r23
    3062:	48 07       	cpc	r20, r24
    3064:	5b 07       	cpc	r21, r27
    3066:	10 f4       	brcc	.+4      	; 0x306c <atan+0x1a>
    3068:	d9 2f       	mov	r29, r25
    306a:	09 d2       	rcall	.+1042   	; 0x347e <inverse>
    306c:	9f 93       	push	r25
    306e:	8f 93       	push	r24
    3070:	7f 93       	push	r23
    3072:	6f 93       	push	r22
    3074:	41 d3       	rcall	.+1666   	; 0x36f8 <square>
    3076:	e0 e1       	ldi	r30, 0x10	; 16
    3078:	f2 e0       	ldi	r31, 0x02	; 2
    307a:	7f d1       	rcall	.+766    	; 0x337a <__fp_powser>
    307c:	c2 d1       	rcall	.+900    	; 0x3402 <__fp_round>
    307e:	2f 91       	pop	r18
    3080:	3f 91       	pop	r19
    3082:	4f 91       	pop	r20
    3084:	5f 91       	pop	r21
    3086:	53 d2       	rcall	.+1190   	; 0x352e <__mulsf3x>
    3088:	dd 23       	and	r29, r29
    308a:	49 f0       	breq	.+18     	; 0x309e <atan+0x4c>
    308c:	90 58       	subi	r25, 0x80	; 128
    308e:	a2 ea       	ldi	r26, 0xA2	; 162
    3090:	2a ed       	ldi	r18, 0xDA	; 218
    3092:	3f e0       	ldi	r19, 0x0F	; 15
    3094:	49 ec       	ldi	r20, 0xC9	; 201
    3096:	5f e3       	ldi	r21, 0x3F	; 63
    3098:	d0 78       	andi	r29, 0x80	; 128
    309a:	5d 27       	eor	r21, r29
    309c:	36 df       	rcall	.-404    	; 0x2f0a <__addsf3x>
    309e:	df 91       	pop	r29
    30a0:	b0 c1       	rjmp	.+864    	; 0x3402 <__fp_round>

000030a2 <__cmpsf2>:
    30a2:	2e d1       	rcall	.+604    	; 0x3300 <__fp_cmp>
    30a4:	08 f4       	brcc	.+2      	; 0x30a8 <__cmpsf2+0x6>
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	08 95       	ret

000030aa <__divsf3>:
    30aa:	0c d0       	rcall	.+24     	; 0x30c4 <__divsf3x>
    30ac:	aa c1       	rjmp	.+852    	; 0x3402 <__fp_round>
    30ae:	a2 d1       	rcall	.+836    	; 0x33f4 <__fp_pscB>
    30b0:	40 f0       	brcs	.+16     	; 0x30c2 <__divsf3+0x18>
    30b2:	99 d1       	rcall	.+818    	; 0x33e6 <__fp_pscA>
    30b4:	30 f0       	brcs	.+12     	; 0x30c2 <__divsf3+0x18>
    30b6:	21 f4       	brne	.+8      	; 0x30c0 <__divsf3+0x16>
    30b8:	5f 3f       	cpi	r21, 0xFF	; 255
    30ba:	19 f0       	breq	.+6      	; 0x30c2 <__divsf3+0x18>
    30bc:	45 c1       	rjmp	.+650    	; 0x3348 <__fp_inf>
    30be:	51 11       	cpse	r21, r1
    30c0:	d4 c1       	rjmp	.+936    	; 0x346a <__fp_szero>
    30c2:	48 c1       	rjmp	.+656    	; 0x3354 <__fp_nan>

000030c4 <__divsf3x>:
    30c4:	af d1       	rcall	.+862    	; 0x3424 <__fp_split3>
    30c6:	98 f3       	brcs	.-26     	; 0x30ae <__divsf3+0x4>

000030c8 <__divsf3_pse>:
    30c8:	99 23       	and	r25, r25
    30ca:	c9 f3       	breq	.-14     	; 0x30be <__divsf3+0x14>
    30cc:	55 23       	and	r21, r21
    30ce:	b1 f3       	breq	.-20     	; 0x30bc <__divsf3+0x12>
    30d0:	95 1b       	sub	r25, r21
    30d2:	55 0b       	sbc	r21, r21
    30d4:	bb 27       	eor	r27, r27
    30d6:	aa 27       	eor	r26, r26
    30d8:	62 17       	cp	r22, r18
    30da:	73 07       	cpc	r23, r19
    30dc:	84 07       	cpc	r24, r20
    30de:	38 f0       	brcs	.+14     	; 0x30ee <__divsf3_pse+0x26>
    30e0:	9f 5f       	subi	r25, 0xFF	; 255
    30e2:	5f 4f       	sbci	r21, 0xFF	; 255
    30e4:	22 0f       	add	r18, r18
    30e6:	33 1f       	adc	r19, r19
    30e8:	44 1f       	adc	r20, r20
    30ea:	aa 1f       	adc	r26, r26
    30ec:	a9 f3       	breq	.-22     	; 0x30d8 <__divsf3_pse+0x10>
    30ee:	33 d0       	rcall	.+102    	; 0x3156 <__divsf3_pse+0x8e>
    30f0:	0e 2e       	mov	r0, r30
    30f2:	3a f0       	brmi	.+14     	; 0x3102 <__divsf3_pse+0x3a>
    30f4:	e0 e8       	ldi	r30, 0x80	; 128
    30f6:	30 d0       	rcall	.+96     	; 0x3158 <__divsf3_pse+0x90>
    30f8:	91 50       	subi	r25, 0x01	; 1
    30fa:	50 40       	sbci	r21, 0x00	; 0
    30fc:	e6 95       	lsr	r30
    30fe:	00 1c       	adc	r0, r0
    3100:	ca f7       	brpl	.-14     	; 0x30f4 <__divsf3_pse+0x2c>
    3102:	29 d0       	rcall	.+82     	; 0x3156 <__divsf3_pse+0x8e>
    3104:	fe 2f       	mov	r31, r30
    3106:	27 d0       	rcall	.+78     	; 0x3156 <__divsf3_pse+0x8e>
    3108:	66 0f       	add	r22, r22
    310a:	77 1f       	adc	r23, r23
    310c:	88 1f       	adc	r24, r24
    310e:	bb 1f       	adc	r27, r27
    3110:	26 17       	cp	r18, r22
    3112:	37 07       	cpc	r19, r23
    3114:	48 07       	cpc	r20, r24
    3116:	ab 07       	cpc	r26, r27
    3118:	b0 e8       	ldi	r27, 0x80	; 128
    311a:	09 f0       	breq	.+2      	; 0x311e <__divsf3_pse+0x56>
    311c:	bb 0b       	sbc	r27, r27
    311e:	80 2d       	mov	r24, r0
    3120:	bf 01       	movw	r22, r30
    3122:	ff 27       	eor	r31, r31
    3124:	93 58       	subi	r25, 0x83	; 131
    3126:	5f 4f       	sbci	r21, 0xFF	; 255
    3128:	2a f0       	brmi	.+10     	; 0x3134 <__divsf3_pse+0x6c>
    312a:	9e 3f       	cpi	r25, 0xFE	; 254
    312c:	51 05       	cpc	r21, r1
    312e:	68 f0       	brcs	.+26     	; 0x314a <__divsf3_pse+0x82>
    3130:	0b c1       	rjmp	.+534    	; 0x3348 <__fp_inf>
    3132:	9b c1       	rjmp	.+822    	; 0x346a <__fp_szero>
    3134:	5f 3f       	cpi	r21, 0xFF	; 255
    3136:	ec f3       	brlt	.-6      	; 0x3132 <__divsf3_pse+0x6a>
    3138:	98 3e       	cpi	r25, 0xE8	; 232
    313a:	dc f3       	brlt	.-10     	; 0x3132 <__divsf3_pse+0x6a>
    313c:	86 95       	lsr	r24
    313e:	77 95       	ror	r23
    3140:	67 95       	ror	r22
    3142:	b7 95       	ror	r27
    3144:	f7 95       	ror	r31
    3146:	9f 5f       	subi	r25, 0xFF	; 255
    3148:	c9 f7       	brne	.-14     	; 0x313c <__divsf3_pse+0x74>
    314a:	88 0f       	add	r24, r24
    314c:	91 1d       	adc	r25, r1
    314e:	96 95       	lsr	r25
    3150:	87 95       	ror	r24
    3152:	97 f9       	bld	r25, 7
    3154:	08 95       	ret
    3156:	e1 e0       	ldi	r30, 0x01	; 1
    3158:	66 0f       	add	r22, r22
    315a:	77 1f       	adc	r23, r23
    315c:	88 1f       	adc	r24, r24
    315e:	bb 1f       	adc	r27, r27
    3160:	62 17       	cp	r22, r18
    3162:	73 07       	cpc	r23, r19
    3164:	84 07       	cpc	r24, r20
    3166:	ba 07       	cpc	r27, r26
    3168:	20 f0       	brcs	.+8      	; 0x3172 <__divsf3_pse+0xaa>
    316a:	62 1b       	sub	r22, r18
    316c:	73 0b       	sbc	r23, r19
    316e:	84 0b       	sbc	r24, r20
    3170:	ba 0b       	sbc	r27, r26
    3172:	ee 1f       	adc	r30, r30
    3174:	88 f7       	brcc	.-30     	; 0x3158 <__divsf3_pse+0x90>
    3176:	e0 95       	com	r30
    3178:	08 95       	ret

0000317a <__fixsfdi>:
    317a:	be e3       	ldi	r27, 0x3E	; 62
    317c:	04 d0       	rcall	.+8      	; 0x3186 <__fixunssfdi+0x2>
    317e:	08 f4       	brcc	.+2      	; 0x3182 <__fixsfdi+0x8>
    3180:	90 e8       	ldi	r25, 0x80	; 128
    3182:	08 95       	ret

00003184 <__fixunssfdi>:
    3184:	bf e3       	ldi	r27, 0x3F	; 63
    3186:	22 27       	eor	r18, r18
    3188:	33 27       	eor	r19, r19
    318a:	a9 01       	movw	r20, r18
    318c:	53 d1       	rcall	.+678    	; 0x3434 <__fp_splitA>
    318e:	58 f1       	brcs	.+86     	; 0x31e6 <__fixunssfdi+0x62>
    3190:	9f 57       	subi	r25, 0x7F	; 127
    3192:	40 f1       	brcs	.+80     	; 0x31e4 <__fixunssfdi+0x60>
    3194:	b9 17       	cp	r27, r25
    3196:	38 f1       	brcs	.+78     	; 0x31e6 <__fixunssfdi+0x62>
    3198:	bf e3       	ldi	r27, 0x3F	; 63
    319a:	b9 1b       	sub	r27, r25
    319c:	99 27       	eor	r25, r25
    319e:	b8 50       	subi	r27, 0x08	; 8
    31a0:	3a f4       	brpl	.+14     	; 0x31b0 <__fixunssfdi+0x2c>
    31a2:	66 0f       	add	r22, r22
    31a4:	77 1f       	adc	r23, r23
    31a6:	88 1f       	adc	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	b3 95       	inc	r27
    31ac:	d2 f3       	brmi	.-12     	; 0x31a2 <__fixunssfdi+0x1e>
    31ae:	16 c0       	rjmp	.+44     	; 0x31dc <__fixunssfdi+0x58>
    31b0:	b8 50       	subi	r27, 0x08	; 8
    31b2:	4a f0       	brmi	.+18     	; 0x31c6 <__fixunssfdi+0x42>
    31b4:	23 2f       	mov	r18, r19
    31b6:	34 2f       	mov	r19, r20
    31b8:	45 2f       	mov	r20, r21
    31ba:	56 2f       	mov	r21, r22
    31bc:	67 2f       	mov	r22, r23
    31be:	78 2f       	mov	r23, r24
    31c0:	88 27       	eor	r24, r24
    31c2:	b8 50       	subi	r27, 0x08	; 8
    31c4:	ba f7       	brpl	.-18     	; 0x31b4 <__fixunssfdi+0x30>
    31c6:	b8 5f       	subi	r27, 0xF8	; 248
    31c8:	49 f0       	breq	.+18     	; 0x31dc <__fixunssfdi+0x58>
    31ca:	86 95       	lsr	r24
    31cc:	77 95       	ror	r23
    31ce:	67 95       	ror	r22
    31d0:	57 95       	ror	r21
    31d2:	47 95       	ror	r20
    31d4:	37 95       	ror	r19
    31d6:	27 95       	ror	r18
    31d8:	ba 95       	dec	r27
    31da:	b9 f7       	brne	.-18     	; 0x31ca <__fixunssfdi+0x46>
    31dc:	0e f4       	brtc	.+2      	; 0x31e0 <__fixunssfdi+0x5c>
    31de:	bd d0       	rcall	.+378    	; 0x335a <__fp_negdi>
    31e0:	88 94       	clc
    31e2:	08 95       	ret
    31e4:	88 94       	clc
    31e6:	60 e0       	ldi	r22, 0x00	; 0
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	cb 01       	movw	r24, r22
    31ec:	08 95       	ret

000031ee <__fixsfsi>:
    31ee:	04 d0       	rcall	.+8      	; 0x31f8 <__fixunssfsi>
    31f0:	68 94       	set
    31f2:	b1 11       	cpse	r27, r1
    31f4:	3a c1       	rjmp	.+628    	; 0x346a <__fp_szero>
    31f6:	08 95       	ret

000031f8 <__fixunssfsi>:
    31f8:	1d d1       	rcall	.+570    	; 0x3434 <__fp_splitA>
    31fa:	88 f0       	brcs	.+34     	; 0x321e <__fixunssfsi+0x26>
    31fc:	9f 57       	subi	r25, 0x7F	; 127
    31fe:	90 f0       	brcs	.+36     	; 0x3224 <__fixunssfsi+0x2c>
    3200:	b9 2f       	mov	r27, r25
    3202:	99 27       	eor	r25, r25
    3204:	b7 51       	subi	r27, 0x17	; 23
    3206:	a0 f0       	brcs	.+40     	; 0x3230 <__fixunssfsi+0x38>
    3208:	d1 f0       	breq	.+52     	; 0x323e <__fixunssfsi+0x46>
    320a:	66 0f       	add	r22, r22
    320c:	77 1f       	adc	r23, r23
    320e:	88 1f       	adc	r24, r24
    3210:	99 1f       	adc	r25, r25
    3212:	1a f0       	brmi	.+6      	; 0x321a <__fixunssfsi+0x22>
    3214:	ba 95       	dec	r27
    3216:	c9 f7       	brne	.-14     	; 0x320a <__fixunssfsi+0x12>
    3218:	12 c0       	rjmp	.+36     	; 0x323e <__fixunssfsi+0x46>
    321a:	b1 30       	cpi	r27, 0x01	; 1
    321c:	81 f0       	breq	.+32     	; 0x323e <__fixunssfsi+0x46>
    321e:	24 d1       	rcall	.+584    	; 0x3468 <__fp_zero>
    3220:	b1 e0       	ldi	r27, 0x01	; 1
    3222:	08 95       	ret
    3224:	21 c1       	rjmp	.+578    	; 0x3468 <__fp_zero>
    3226:	67 2f       	mov	r22, r23
    3228:	78 2f       	mov	r23, r24
    322a:	88 27       	eor	r24, r24
    322c:	b8 5f       	subi	r27, 0xF8	; 248
    322e:	39 f0       	breq	.+14     	; 0x323e <__fixunssfsi+0x46>
    3230:	b9 3f       	cpi	r27, 0xF9	; 249
    3232:	cc f3       	brlt	.-14     	; 0x3226 <__fixunssfsi+0x2e>
    3234:	86 95       	lsr	r24
    3236:	77 95       	ror	r23
    3238:	67 95       	ror	r22
    323a:	b3 95       	inc	r27
    323c:	d9 f7       	brne	.-10     	; 0x3234 <__fixunssfsi+0x3c>
    323e:	3e f4       	brtc	.+14     	; 0x324e <__fixunssfsi+0x56>
    3240:	90 95       	com	r25
    3242:	80 95       	com	r24
    3244:	70 95       	com	r23
    3246:	61 95       	neg	r22
    3248:	7f 4f       	sbci	r23, 0xFF	; 255
    324a:	8f 4f       	sbci	r24, 0xFF	; 255
    324c:	9f 4f       	sbci	r25, 0xFF	; 255
    324e:	08 95       	ret

00003250 <__floatunsisf>:
    3250:	e8 94       	clt
    3252:	09 c0       	rjmp	.+18     	; 0x3266 <__floatsisf+0x12>

00003254 <__floatsisf>:
    3254:	97 fb       	bst	r25, 7
    3256:	3e f4       	brtc	.+14     	; 0x3266 <__floatsisf+0x12>
    3258:	90 95       	com	r25
    325a:	80 95       	com	r24
    325c:	70 95       	com	r23
    325e:	61 95       	neg	r22
    3260:	7f 4f       	sbci	r23, 0xFF	; 255
    3262:	8f 4f       	sbci	r24, 0xFF	; 255
    3264:	9f 4f       	sbci	r25, 0xFF	; 255
    3266:	99 23       	and	r25, r25
    3268:	a9 f0       	breq	.+42     	; 0x3294 <__floatsisf+0x40>
    326a:	f9 2f       	mov	r31, r25
    326c:	96 e9       	ldi	r25, 0x96	; 150
    326e:	bb 27       	eor	r27, r27
    3270:	93 95       	inc	r25
    3272:	f6 95       	lsr	r31
    3274:	87 95       	ror	r24
    3276:	77 95       	ror	r23
    3278:	67 95       	ror	r22
    327a:	b7 95       	ror	r27
    327c:	f1 11       	cpse	r31, r1
    327e:	f8 cf       	rjmp	.-16     	; 0x3270 <__floatsisf+0x1c>
    3280:	fa f4       	brpl	.+62     	; 0x32c0 <__floatsisf+0x6c>
    3282:	bb 0f       	add	r27, r27
    3284:	11 f4       	brne	.+4      	; 0x328a <__floatsisf+0x36>
    3286:	60 ff       	sbrs	r22, 0
    3288:	1b c0       	rjmp	.+54     	; 0x32c0 <__floatsisf+0x6c>
    328a:	6f 5f       	subi	r22, 0xFF	; 255
    328c:	7f 4f       	sbci	r23, 0xFF	; 255
    328e:	8f 4f       	sbci	r24, 0xFF	; 255
    3290:	9f 4f       	sbci	r25, 0xFF	; 255
    3292:	16 c0       	rjmp	.+44     	; 0x32c0 <__floatsisf+0x6c>
    3294:	88 23       	and	r24, r24
    3296:	11 f0       	breq	.+4      	; 0x329c <__floatsisf+0x48>
    3298:	96 e9       	ldi	r25, 0x96	; 150
    329a:	11 c0       	rjmp	.+34     	; 0x32be <__floatsisf+0x6a>
    329c:	77 23       	and	r23, r23
    329e:	21 f0       	breq	.+8      	; 0x32a8 <__floatsisf+0x54>
    32a0:	9e e8       	ldi	r25, 0x8E	; 142
    32a2:	87 2f       	mov	r24, r23
    32a4:	76 2f       	mov	r23, r22
    32a6:	05 c0       	rjmp	.+10     	; 0x32b2 <__floatsisf+0x5e>
    32a8:	66 23       	and	r22, r22
    32aa:	71 f0       	breq	.+28     	; 0x32c8 <__floatsisf+0x74>
    32ac:	96 e8       	ldi	r25, 0x86	; 134
    32ae:	86 2f       	mov	r24, r22
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	60 e0       	ldi	r22, 0x00	; 0
    32b4:	2a f0       	brmi	.+10     	; 0x32c0 <__floatsisf+0x6c>
    32b6:	9a 95       	dec	r25
    32b8:	66 0f       	add	r22, r22
    32ba:	77 1f       	adc	r23, r23
    32bc:	88 1f       	adc	r24, r24
    32be:	da f7       	brpl	.-10     	; 0x32b6 <__floatsisf+0x62>
    32c0:	88 0f       	add	r24, r24
    32c2:	96 95       	lsr	r25
    32c4:	87 95       	ror	r24
    32c6:	97 f9       	bld	r25, 7
    32c8:	08 95       	ret

000032ca <__fp_arccos>:
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	1f 93       	push	r17
    32d0:	0f 93       	push	r16
    32d2:	8b 01       	movw	r16, r22
    32d4:	ec 01       	movw	r28, r24
    32d6:	ed e3       	ldi	r30, 0x3D	; 61
    32d8:	f2 e0       	ldi	r31, 0x02	; 2
    32da:	4f d0       	rcall	.+158    	; 0x337a <__fp_powser>
    32dc:	92 d0       	rcall	.+292    	; 0x3402 <__fp_round>
    32de:	98 01       	movw	r18, r16
    32e0:	ae 01       	movw	r20, r28
    32e2:	8b 01       	movw	r16, r22
    32e4:	ec 01       	movw	r28, r24
    32e6:	60 e0       	ldi	r22, 0x00	; 0
    32e8:	70 e0       	ldi	r23, 0x00	; 0
    32ea:	80 e8       	ldi	r24, 0x80	; 128
    32ec:	9f e3       	ldi	r25, 0x3F	; 63
    32ee:	fb dd       	rcall	.-1034   	; 0x2ee6 <__subsf3>
    32f0:	c5 d1       	rcall	.+906    	; 0x367c <sqrt>
    32f2:	98 01       	movw	r18, r16
    32f4:	ae 01       	movw	r20, r28
    32f6:	0f 91       	pop	r16
    32f8:	1f 91       	pop	r17
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	17 c1       	rjmp	.+558    	; 0x352e <__mulsf3x>

00003300 <__fp_cmp>:
    3300:	99 0f       	add	r25, r25
    3302:	00 08       	sbc	r0, r0
    3304:	55 0f       	add	r21, r21
    3306:	aa 0b       	sbc	r26, r26
    3308:	e0 e8       	ldi	r30, 0x80	; 128
    330a:	fe ef       	ldi	r31, 0xFE	; 254
    330c:	16 16       	cp	r1, r22
    330e:	17 06       	cpc	r1, r23
    3310:	e8 07       	cpc	r30, r24
    3312:	f9 07       	cpc	r31, r25
    3314:	c0 f0       	brcs	.+48     	; 0x3346 <__fp_cmp+0x46>
    3316:	12 16       	cp	r1, r18
    3318:	13 06       	cpc	r1, r19
    331a:	e4 07       	cpc	r30, r20
    331c:	f5 07       	cpc	r31, r21
    331e:	98 f0       	brcs	.+38     	; 0x3346 <__fp_cmp+0x46>
    3320:	62 1b       	sub	r22, r18
    3322:	73 0b       	sbc	r23, r19
    3324:	84 0b       	sbc	r24, r20
    3326:	95 0b       	sbc	r25, r21
    3328:	39 f4       	brne	.+14     	; 0x3338 <__fp_cmp+0x38>
    332a:	0a 26       	eor	r0, r26
    332c:	61 f0       	breq	.+24     	; 0x3346 <__fp_cmp+0x46>
    332e:	23 2b       	or	r18, r19
    3330:	24 2b       	or	r18, r20
    3332:	25 2b       	or	r18, r21
    3334:	21 f4       	brne	.+8      	; 0x333e <__fp_cmp+0x3e>
    3336:	08 95       	ret
    3338:	0a 26       	eor	r0, r26
    333a:	09 f4       	brne	.+2      	; 0x333e <__fp_cmp+0x3e>
    333c:	a1 40       	sbci	r26, 0x01	; 1
    333e:	a6 95       	lsr	r26
    3340:	8f ef       	ldi	r24, 0xFF	; 255
    3342:	81 1d       	adc	r24, r1
    3344:	81 1d       	adc	r24, r1
    3346:	08 95       	ret

00003348 <__fp_inf>:
    3348:	97 f9       	bld	r25, 7
    334a:	9f 67       	ori	r25, 0x7F	; 127
    334c:	80 e8       	ldi	r24, 0x80	; 128
    334e:	70 e0       	ldi	r23, 0x00	; 0
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	08 95       	ret

00003354 <__fp_nan>:
    3354:	9f ef       	ldi	r25, 0xFF	; 255
    3356:	80 ec       	ldi	r24, 0xC0	; 192
    3358:	08 95       	ret

0000335a <__fp_negdi>:
    335a:	90 95       	com	r25
    335c:	80 95       	com	r24
    335e:	70 95       	com	r23
    3360:	60 95       	com	r22
    3362:	50 95       	com	r21
    3364:	40 95       	com	r20
    3366:	30 95       	com	r19
    3368:	21 95       	neg	r18
    336a:	3f 4f       	sbci	r19, 0xFF	; 255
    336c:	4f 4f       	sbci	r20, 0xFF	; 255
    336e:	5f 4f       	sbci	r21, 0xFF	; 255
    3370:	6f 4f       	sbci	r22, 0xFF	; 255
    3372:	7f 4f       	sbci	r23, 0xFF	; 255
    3374:	8f 4f       	sbci	r24, 0xFF	; 255
    3376:	9f 4f       	sbci	r25, 0xFF	; 255
    3378:	08 95       	ret

0000337a <__fp_powser>:
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	1f 93       	push	r17
    3380:	0f 93       	push	r16
    3382:	ff 92       	push	r15
    3384:	ef 92       	push	r14
    3386:	df 92       	push	r13
    3388:	7b 01       	movw	r14, r22
    338a:	8c 01       	movw	r16, r24
    338c:	68 94       	set
    338e:	05 c0       	rjmp	.+10     	; 0x339a <__fp_powser+0x20>
    3390:	da 2e       	mov	r13, r26
    3392:	ef 01       	movw	r28, r30
    3394:	cc d0       	rcall	.+408    	; 0x352e <__mulsf3x>
    3396:	fe 01       	movw	r30, r28
    3398:	e8 94       	clt
    339a:	a5 91       	lpm	r26, Z+
    339c:	25 91       	lpm	r18, Z+
    339e:	35 91       	lpm	r19, Z+
    33a0:	45 91       	lpm	r20, Z+
    33a2:	55 91       	lpm	r21, Z+
    33a4:	ae f3       	brts	.-22     	; 0x3390 <__fp_powser+0x16>
    33a6:	ef 01       	movw	r28, r30
    33a8:	b0 dd       	rcall	.-1184   	; 0x2f0a <__addsf3x>
    33aa:	fe 01       	movw	r30, r28
    33ac:	97 01       	movw	r18, r14
    33ae:	a8 01       	movw	r20, r16
    33b0:	da 94       	dec	r13
    33b2:	79 f7       	brne	.-34     	; 0x3392 <__fp_powser+0x18>
    33b4:	df 90       	pop	r13
    33b6:	ef 90       	pop	r14
    33b8:	ff 90       	pop	r15
    33ba:	0f 91       	pop	r16
    33bc:	1f 91       	pop	r17
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <__fp_powsodd>:
    33c4:	9f 93       	push	r25
    33c6:	8f 93       	push	r24
    33c8:	7f 93       	push	r23
    33ca:	6f 93       	push	r22
    33cc:	ff 93       	push	r31
    33ce:	ef 93       	push	r30
    33d0:	9b 01       	movw	r18, r22
    33d2:	ac 01       	movw	r20, r24
    33d4:	a0 d0       	rcall	.+320    	; 0x3516 <__mulsf3>
    33d6:	ef 91       	pop	r30
    33d8:	ff 91       	pop	r31
    33da:	cf df       	rcall	.-98     	; 0x337a <__fp_powser>
    33dc:	2f 91       	pop	r18
    33de:	3f 91       	pop	r19
    33e0:	4f 91       	pop	r20
    33e2:	5f 91       	pop	r21
    33e4:	98 c0       	rjmp	.+304    	; 0x3516 <__mulsf3>

000033e6 <__fp_pscA>:
    33e6:	00 24       	eor	r0, r0
    33e8:	0a 94       	dec	r0
    33ea:	16 16       	cp	r1, r22
    33ec:	17 06       	cpc	r1, r23
    33ee:	18 06       	cpc	r1, r24
    33f0:	09 06       	cpc	r0, r25
    33f2:	08 95       	ret

000033f4 <__fp_pscB>:
    33f4:	00 24       	eor	r0, r0
    33f6:	0a 94       	dec	r0
    33f8:	12 16       	cp	r1, r18
    33fa:	13 06       	cpc	r1, r19
    33fc:	14 06       	cpc	r1, r20
    33fe:	05 06       	cpc	r0, r21
    3400:	08 95       	ret

00003402 <__fp_round>:
    3402:	09 2e       	mov	r0, r25
    3404:	03 94       	inc	r0
    3406:	00 0c       	add	r0, r0
    3408:	11 f4       	brne	.+4      	; 0x340e <__fp_round+0xc>
    340a:	88 23       	and	r24, r24
    340c:	52 f0       	brmi	.+20     	; 0x3422 <__fp_round+0x20>
    340e:	bb 0f       	add	r27, r27
    3410:	40 f4       	brcc	.+16     	; 0x3422 <__fp_round+0x20>
    3412:	bf 2b       	or	r27, r31
    3414:	11 f4       	brne	.+4      	; 0x341a <__fp_round+0x18>
    3416:	60 ff       	sbrs	r22, 0
    3418:	04 c0       	rjmp	.+8      	; 0x3422 <__fp_round+0x20>
    341a:	6f 5f       	subi	r22, 0xFF	; 255
    341c:	7f 4f       	sbci	r23, 0xFF	; 255
    341e:	8f 4f       	sbci	r24, 0xFF	; 255
    3420:	9f 4f       	sbci	r25, 0xFF	; 255
    3422:	08 95       	ret

00003424 <__fp_split3>:
    3424:	57 fd       	sbrc	r21, 7
    3426:	90 58       	subi	r25, 0x80	; 128
    3428:	44 0f       	add	r20, r20
    342a:	55 1f       	adc	r21, r21
    342c:	59 f0       	breq	.+22     	; 0x3444 <__fp_splitA+0x10>
    342e:	5f 3f       	cpi	r21, 0xFF	; 255
    3430:	71 f0       	breq	.+28     	; 0x344e <__fp_splitA+0x1a>
    3432:	47 95       	ror	r20

00003434 <__fp_splitA>:
    3434:	88 0f       	add	r24, r24
    3436:	97 fb       	bst	r25, 7
    3438:	99 1f       	adc	r25, r25
    343a:	61 f0       	breq	.+24     	; 0x3454 <__fp_splitA+0x20>
    343c:	9f 3f       	cpi	r25, 0xFF	; 255
    343e:	79 f0       	breq	.+30     	; 0x345e <__fp_splitA+0x2a>
    3440:	87 95       	ror	r24
    3442:	08 95       	ret
    3444:	12 16       	cp	r1, r18
    3446:	13 06       	cpc	r1, r19
    3448:	14 06       	cpc	r1, r20
    344a:	55 1f       	adc	r21, r21
    344c:	f2 cf       	rjmp	.-28     	; 0x3432 <__fp_split3+0xe>
    344e:	46 95       	lsr	r20
    3450:	f1 df       	rcall	.-30     	; 0x3434 <__fp_splitA>
    3452:	08 c0       	rjmp	.+16     	; 0x3464 <__fp_splitA+0x30>
    3454:	16 16       	cp	r1, r22
    3456:	17 06       	cpc	r1, r23
    3458:	18 06       	cpc	r1, r24
    345a:	99 1f       	adc	r25, r25
    345c:	f1 cf       	rjmp	.-30     	; 0x3440 <__fp_splitA+0xc>
    345e:	86 95       	lsr	r24
    3460:	71 05       	cpc	r23, r1
    3462:	61 05       	cpc	r22, r1
    3464:	08 94       	sec
    3466:	08 95       	ret

00003468 <__fp_zero>:
    3468:	e8 94       	clt

0000346a <__fp_szero>:
    346a:	bb 27       	eor	r27, r27
    346c:	66 27       	eor	r22, r22
    346e:	77 27       	eor	r23, r23
    3470:	cb 01       	movw	r24, r22
    3472:	97 f9       	bld	r25, 7
    3474:	08 95       	ret

00003476 <__gesf2>:
    3476:	44 df       	rcall	.-376    	; 0x3300 <__fp_cmp>
    3478:	08 f4       	brcc	.+2      	; 0x347c <__gesf2+0x6>
    347a:	8f ef       	ldi	r24, 0xFF	; 255
    347c:	08 95       	ret

0000347e <inverse>:
    347e:	9b 01       	movw	r18, r22
    3480:	ac 01       	movw	r20, r24
    3482:	60 e0       	ldi	r22, 0x00	; 0
    3484:	70 e0       	ldi	r23, 0x00	; 0
    3486:	80 e8       	ldi	r24, 0x80	; 128
    3488:	9f e3       	ldi	r25, 0x3F	; 63
    348a:	0f ce       	rjmp	.-994    	; 0x30aa <__divsf3>
    348c:	0e f0       	brts	.+2      	; 0x3490 <inverse+0x12>
    348e:	68 c1       	rjmp	.+720    	; 0x3760 <__fp_mpack>
    3490:	61 cf       	rjmp	.-318    	; 0x3354 <__fp_nan>
    3492:	68 94       	set
    3494:	59 cf       	rjmp	.-334    	; 0x3348 <__fp_inf>

00003496 <log>:
    3496:	ce df       	rcall	.-100    	; 0x3434 <__fp_splitA>
    3498:	c8 f3       	brcs	.-14     	; 0x348c <inverse+0xe>
    349a:	99 23       	and	r25, r25
    349c:	d1 f3       	breq	.-12     	; 0x3492 <inverse+0x14>
    349e:	c6 f3       	brts	.-16     	; 0x3490 <inverse+0x12>
    34a0:	df 93       	push	r29
    34a2:	cf 93       	push	r28
    34a4:	1f 93       	push	r17
    34a6:	0f 93       	push	r16
    34a8:	ff 92       	push	r15
    34aa:	c9 2f       	mov	r28, r25
    34ac:	dd 27       	eor	r29, r29
    34ae:	88 23       	and	r24, r24
    34b0:	2a f0       	brmi	.+10     	; 0x34bc <log+0x26>
    34b2:	21 97       	sbiw	r28, 0x01	; 1
    34b4:	66 0f       	add	r22, r22
    34b6:	77 1f       	adc	r23, r23
    34b8:	88 1f       	adc	r24, r24
    34ba:	da f7       	brpl	.-10     	; 0x34b2 <log+0x1c>
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e8       	ldi	r20, 0x80	; 128
    34c2:	5f eb       	ldi	r21, 0xBF	; 191
    34c4:	9f e3       	ldi	r25, 0x3F	; 63
    34c6:	88 39       	cpi	r24, 0x98	; 152
    34c8:	20 f0       	brcs	.+8      	; 0x34d2 <log+0x3c>
    34ca:	80 3e       	cpi	r24, 0xE0	; 224
    34cc:	30 f0       	brcs	.+12     	; 0x34da <log+0x44>
    34ce:	21 96       	adiw	r28, 0x01	; 1
    34d0:	8f 77       	andi	r24, 0x7F	; 127
    34d2:	0a dd       	rcall	.-1516   	; 0x2ee8 <__addsf3>
    34d4:	e5 e6       	ldi	r30, 0x65	; 101
    34d6:	f2 e0       	ldi	r31, 0x02	; 2
    34d8:	03 c0       	rjmp	.+6      	; 0x34e0 <log+0x4a>
    34da:	06 dd       	rcall	.-1524   	; 0x2ee8 <__addsf3>
    34dc:	e2 e9       	ldi	r30, 0x92	; 146
    34de:	f2 e0       	ldi	r31, 0x02	; 2
    34e0:	4c df       	rcall	.-360    	; 0x337a <__fp_powser>
    34e2:	8b 01       	movw	r16, r22
    34e4:	be 01       	movw	r22, r28
    34e6:	ec 01       	movw	r28, r24
    34e8:	fb 2e       	mov	r15, r27
    34ea:	6f 57       	subi	r22, 0x7F	; 127
    34ec:	71 09       	sbc	r23, r1
    34ee:	75 95       	asr	r23
    34f0:	77 1f       	adc	r23, r23
    34f2:	88 0b       	sbc	r24, r24
    34f4:	99 0b       	sbc	r25, r25
    34f6:	ae de       	rcall	.-676    	; 0x3254 <__floatsisf>
    34f8:	28 e1       	ldi	r18, 0x18	; 24
    34fa:	32 e7       	ldi	r19, 0x72	; 114
    34fc:	41 e3       	ldi	r20, 0x31	; 49
    34fe:	5f e3       	ldi	r21, 0x3F	; 63
    3500:	16 d0       	rcall	.+44     	; 0x352e <__mulsf3x>
    3502:	af 2d       	mov	r26, r15
    3504:	98 01       	movw	r18, r16
    3506:	ae 01       	movw	r20, r28
    3508:	ff 90       	pop	r15
    350a:	0f 91       	pop	r16
    350c:	1f 91       	pop	r17
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	fb dc       	rcall	.-1546   	; 0x2f0a <__addsf3x>
    3514:	76 cf       	rjmp	.-276    	; 0x3402 <__fp_round>

00003516 <__mulsf3>:
    3516:	0b d0       	rcall	.+22     	; 0x352e <__mulsf3x>
    3518:	74 cf       	rjmp	.-280    	; 0x3402 <__fp_round>
    351a:	65 df       	rcall	.-310    	; 0x33e6 <__fp_pscA>
    351c:	28 f0       	brcs	.+10     	; 0x3528 <__mulsf3+0x12>
    351e:	6a df       	rcall	.-300    	; 0x33f4 <__fp_pscB>
    3520:	18 f0       	brcs	.+6      	; 0x3528 <__mulsf3+0x12>
    3522:	95 23       	and	r25, r21
    3524:	09 f0       	breq	.+2      	; 0x3528 <__mulsf3+0x12>
    3526:	10 cf       	rjmp	.-480    	; 0x3348 <__fp_inf>
    3528:	15 cf       	rjmp	.-470    	; 0x3354 <__fp_nan>
    352a:	11 24       	eor	r1, r1
    352c:	9e cf       	rjmp	.-196    	; 0x346a <__fp_szero>

0000352e <__mulsf3x>:
    352e:	7a df       	rcall	.-268    	; 0x3424 <__fp_split3>
    3530:	a0 f3       	brcs	.-24     	; 0x351a <__mulsf3+0x4>

00003532 <__mulsf3_pse>:
    3532:	95 9f       	mul	r25, r21
    3534:	d1 f3       	breq	.-12     	; 0x352a <__mulsf3+0x14>
    3536:	95 0f       	add	r25, r21
    3538:	50 e0       	ldi	r21, 0x00	; 0
    353a:	55 1f       	adc	r21, r21
    353c:	62 9f       	mul	r22, r18
    353e:	f0 01       	movw	r30, r0
    3540:	72 9f       	mul	r23, r18
    3542:	bb 27       	eor	r27, r27
    3544:	f0 0d       	add	r31, r0
    3546:	b1 1d       	adc	r27, r1
    3548:	63 9f       	mul	r22, r19
    354a:	aa 27       	eor	r26, r26
    354c:	f0 0d       	add	r31, r0
    354e:	b1 1d       	adc	r27, r1
    3550:	aa 1f       	adc	r26, r26
    3552:	64 9f       	mul	r22, r20
    3554:	66 27       	eor	r22, r22
    3556:	b0 0d       	add	r27, r0
    3558:	a1 1d       	adc	r26, r1
    355a:	66 1f       	adc	r22, r22
    355c:	82 9f       	mul	r24, r18
    355e:	22 27       	eor	r18, r18
    3560:	b0 0d       	add	r27, r0
    3562:	a1 1d       	adc	r26, r1
    3564:	62 1f       	adc	r22, r18
    3566:	73 9f       	mul	r23, r19
    3568:	b0 0d       	add	r27, r0
    356a:	a1 1d       	adc	r26, r1
    356c:	62 1f       	adc	r22, r18
    356e:	83 9f       	mul	r24, r19
    3570:	a0 0d       	add	r26, r0
    3572:	61 1d       	adc	r22, r1
    3574:	22 1f       	adc	r18, r18
    3576:	74 9f       	mul	r23, r20
    3578:	33 27       	eor	r19, r19
    357a:	a0 0d       	add	r26, r0
    357c:	61 1d       	adc	r22, r1
    357e:	23 1f       	adc	r18, r19
    3580:	84 9f       	mul	r24, r20
    3582:	60 0d       	add	r22, r0
    3584:	21 1d       	adc	r18, r1
    3586:	82 2f       	mov	r24, r18
    3588:	76 2f       	mov	r23, r22
    358a:	6a 2f       	mov	r22, r26
    358c:	11 24       	eor	r1, r1
    358e:	9f 57       	subi	r25, 0x7F	; 127
    3590:	50 40       	sbci	r21, 0x00	; 0
    3592:	8a f0       	brmi	.+34     	; 0x35b6 <__mulsf3_pse+0x84>
    3594:	e1 f0       	breq	.+56     	; 0x35ce <__mulsf3_pse+0x9c>
    3596:	88 23       	and	r24, r24
    3598:	4a f0       	brmi	.+18     	; 0x35ac <__mulsf3_pse+0x7a>
    359a:	ee 0f       	add	r30, r30
    359c:	ff 1f       	adc	r31, r31
    359e:	bb 1f       	adc	r27, r27
    35a0:	66 1f       	adc	r22, r22
    35a2:	77 1f       	adc	r23, r23
    35a4:	88 1f       	adc	r24, r24
    35a6:	91 50       	subi	r25, 0x01	; 1
    35a8:	50 40       	sbci	r21, 0x00	; 0
    35aa:	a9 f7       	brne	.-22     	; 0x3596 <__mulsf3_pse+0x64>
    35ac:	9e 3f       	cpi	r25, 0xFE	; 254
    35ae:	51 05       	cpc	r21, r1
    35b0:	70 f0       	brcs	.+28     	; 0x35ce <__mulsf3_pse+0x9c>
    35b2:	ca ce       	rjmp	.-620    	; 0x3348 <__fp_inf>
    35b4:	5a cf       	rjmp	.-332    	; 0x346a <__fp_szero>
    35b6:	5f 3f       	cpi	r21, 0xFF	; 255
    35b8:	ec f3       	brlt	.-6      	; 0x35b4 <__mulsf3_pse+0x82>
    35ba:	98 3e       	cpi	r25, 0xE8	; 232
    35bc:	dc f3       	brlt	.-10     	; 0x35b4 <__mulsf3_pse+0x82>
    35be:	86 95       	lsr	r24
    35c0:	77 95       	ror	r23
    35c2:	67 95       	ror	r22
    35c4:	b7 95       	ror	r27
    35c6:	f7 95       	ror	r31
    35c8:	e7 95       	ror	r30
    35ca:	9f 5f       	subi	r25, 0xFF	; 255
    35cc:	c1 f7       	brne	.-16     	; 0x35be <__mulsf3_pse+0x8c>
    35ce:	fe 2b       	or	r31, r30
    35d0:	88 0f       	add	r24, r24
    35d2:	91 1d       	adc	r25, r1
    35d4:	96 95       	lsr	r25
    35d6:	87 95       	ror	r24
    35d8:	97 f9       	bld	r25, 7
    35da:	08 95       	ret

000035dc <pow>:
    35dc:	fa 01       	movw	r30, r20
    35de:	ee 0f       	add	r30, r30
    35e0:	ff 1f       	adc	r31, r31
    35e2:	30 96       	adiw	r30, 0x00	; 0
    35e4:	21 05       	cpc	r18, r1
    35e6:	31 05       	cpc	r19, r1
    35e8:	99 f1       	breq	.+102    	; 0x3650 <pow+0x74>
    35ea:	61 15       	cp	r22, r1
    35ec:	71 05       	cpc	r23, r1
    35ee:	61 f4       	brne	.+24     	; 0x3608 <pow+0x2c>
    35f0:	80 38       	cpi	r24, 0x80	; 128
    35f2:	bf e3       	ldi	r27, 0x3F	; 63
    35f4:	9b 07       	cpc	r25, r27
    35f6:	49 f1       	breq	.+82     	; 0x364a <pow+0x6e>
    35f8:	68 94       	set
    35fa:	90 38       	cpi	r25, 0x80	; 128
    35fc:	81 05       	cpc	r24, r1
    35fe:	61 f0       	breq	.+24     	; 0x3618 <pow+0x3c>
    3600:	80 38       	cpi	r24, 0x80	; 128
    3602:	bf ef       	ldi	r27, 0xFF	; 255
    3604:	9b 07       	cpc	r25, r27
    3606:	41 f0       	breq	.+16     	; 0x3618 <pow+0x3c>
    3608:	99 23       	and	r25, r25
    360a:	42 f5       	brpl	.+80     	; 0x365c <pow+0x80>
    360c:	ff 3f       	cpi	r31, 0xFF	; 255
    360e:	e1 05       	cpc	r30, r1
    3610:	31 05       	cpc	r19, r1
    3612:	21 05       	cpc	r18, r1
    3614:	11 f1       	breq	.+68     	; 0x365a <pow+0x7e>
    3616:	e8 94       	clt
    3618:	08 94       	sec
    361a:	e7 95       	ror	r30
    361c:	d9 01       	movw	r26, r18
    361e:	aa 23       	and	r26, r26
    3620:	29 f4       	brne	.+10     	; 0x362c <pow+0x50>
    3622:	ab 2f       	mov	r26, r27
    3624:	be 2f       	mov	r27, r30
    3626:	f8 5f       	subi	r31, 0xF8	; 248
    3628:	d0 f3       	brcs	.-12     	; 0x361e <pow+0x42>
    362a:	10 c0       	rjmp	.+32     	; 0x364c <pow+0x70>
    362c:	ff 5f       	subi	r31, 0xFF	; 255
    362e:	70 f4       	brcc	.+28     	; 0x364c <pow+0x70>
    3630:	a6 95       	lsr	r26
    3632:	e0 f7       	brcc	.-8      	; 0x362c <pow+0x50>
    3634:	f7 39       	cpi	r31, 0x97	; 151
    3636:	50 f0       	brcs	.+20     	; 0x364c <pow+0x70>
    3638:	19 f0       	breq	.+6      	; 0x3640 <pow+0x64>
    363a:	ff 3a       	cpi	r31, 0xAF	; 175
    363c:	38 f4       	brcc	.+14     	; 0x364c <pow+0x70>
    363e:	9f 77       	andi	r25, 0x7F	; 127
    3640:	9f 93       	push	r25
    3642:	0c d0       	rcall	.+24     	; 0x365c <pow+0x80>
    3644:	0f 90       	pop	r0
    3646:	07 fc       	sbrc	r0, 7
    3648:	90 58       	subi	r25, 0x80	; 128
    364a:	08 95       	ret
    364c:	3e f0       	brts	.+14     	; 0x365c <pow+0x80>
    364e:	82 ce       	rjmp	.-764    	; 0x3354 <__fp_nan>
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	80 e8       	ldi	r24, 0x80	; 128
    3656:	9f e3       	ldi	r25, 0x3F	; 63
    3658:	08 95       	ret
    365a:	4f e7       	ldi	r20, 0x7F	; 127
    365c:	9f 77       	andi	r25, 0x7F	; 127
    365e:	5f 93       	push	r21
    3660:	4f 93       	push	r20
    3662:	3f 93       	push	r19
    3664:	2f 93       	push	r18
    3666:	17 df       	rcall	.-466    	; 0x3496 <log>
    3668:	2f 91       	pop	r18
    366a:	3f 91       	pop	r19
    366c:	4f 91       	pop	r20
    366e:	5f 91       	pop	r21
    3670:	52 df       	rcall	.-348    	; 0x3516 <__mulsf3>
    3672:	4a c0       	rjmp	.+148    	; 0x3708 <exp>
    3674:	11 f4       	brne	.+4      	; 0x367a <pow+0x9e>
    3676:	0e f4       	brtc	.+2      	; 0x367a <pow+0x9e>
    3678:	6d ce       	rjmp	.-806    	; 0x3354 <__fp_nan>
    367a:	72 c0       	rjmp	.+228    	; 0x3760 <__fp_mpack>

0000367c <sqrt>:
    367c:	db de       	rcall	.-586    	; 0x3434 <__fp_splitA>
    367e:	d0 f3       	brcs	.-12     	; 0x3674 <pow+0x98>
    3680:	99 23       	and	r25, r25
    3682:	d9 f3       	breq	.-10     	; 0x367a <pow+0x9e>
    3684:	ce f3       	brts	.-14     	; 0x3678 <pow+0x9c>
    3686:	9f 57       	subi	r25, 0x7F	; 127
    3688:	55 0b       	sbc	r21, r21
    368a:	87 ff       	sbrs	r24, 7
    368c:	77 d0       	rcall	.+238    	; 0x377c <__fp_norm2>
    368e:	00 24       	eor	r0, r0
    3690:	a0 e6       	ldi	r26, 0x60	; 96
    3692:	40 ea       	ldi	r20, 0xA0	; 160
    3694:	90 01       	movw	r18, r0
    3696:	80 58       	subi	r24, 0x80	; 128
    3698:	56 95       	lsr	r21
    369a:	97 95       	ror	r25
    369c:	28 f4       	brcc	.+10     	; 0x36a8 <sqrt+0x2c>
    369e:	80 5c       	subi	r24, 0xC0	; 192
    36a0:	66 0f       	add	r22, r22
    36a2:	77 1f       	adc	r23, r23
    36a4:	88 1f       	adc	r24, r24
    36a6:	20 f0       	brcs	.+8      	; 0x36b0 <sqrt+0x34>
    36a8:	26 17       	cp	r18, r22
    36aa:	37 07       	cpc	r19, r23
    36ac:	48 07       	cpc	r20, r24
    36ae:	30 f4       	brcc	.+12     	; 0x36bc <sqrt+0x40>
    36b0:	62 1b       	sub	r22, r18
    36b2:	73 0b       	sbc	r23, r19
    36b4:	84 0b       	sbc	r24, r20
    36b6:	20 29       	or	r18, r0
    36b8:	31 29       	or	r19, r1
    36ba:	4a 2b       	or	r20, r26
    36bc:	a6 95       	lsr	r26
    36be:	17 94       	ror	r1
    36c0:	07 94       	ror	r0
    36c2:	20 25       	eor	r18, r0
    36c4:	31 25       	eor	r19, r1
    36c6:	4a 27       	eor	r20, r26
    36c8:	58 f7       	brcc	.-42     	; 0x36a0 <sqrt+0x24>
    36ca:	66 0f       	add	r22, r22
    36cc:	77 1f       	adc	r23, r23
    36ce:	88 1f       	adc	r24, r24
    36d0:	20 f0       	brcs	.+8      	; 0x36da <sqrt+0x5e>
    36d2:	26 17       	cp	r18, r22
    36d4:	37 07       	cpc	r19, r23
    36d6:	48 07       	cpc	r20, r24
    36d8:	30 f4       	brcc	.+12     	; 0x36e6 <sqrt+0x6a>
    36da:	62 0b       	sbc	r22, r18
    36dc:	73 0b       	sbc	r23, r19
    36de:	84 0b       	sbc	r24, r20
    36e0:	20 0d       	add	r18, r0
    36e2:	31 1d       	adc	r19, r1
    36e4:	41 1d       	adc	r20, r1
    36e6:	a0 95       	com	r26
    36e8:	81 f7       	brne	.-32     	; 0x36ca <sqrt+0x4e>
    36ea:	b9 01       	movw	r22, r18
    36ec:	84 2f       	mov	r24, r20
    36ee:	91 58       	subi	r25, 0x81	; 129
    36f0:	88 0f       	add	r24, r24
    36f2:	96 95       	lsr	r25
    36f4:	87 95       	ror	r24
    36f6:	08 95       	ret

000036f8 <square>:
    36f8:	9b 01       	movw	r18, r22
    36fa:	ac 01       	movw	r20, r24
    36fc:	0c cf       	rjmp	.-488    	; 0x3516 <__mulsf3>
    36fe:	19 f4       	brne	.+6      	; 0x3706 <square+0xe>
    3700:	0e f0       	brts	.+2      	; 0x3704 <square+0xc>
    3702:	22 ce       	rjmp	.-956    	; 0x3348 <__fp_inf>
    3704:	b1 ce       	rjmp	.-670    	; 0x3468 <__fp_zero>
    3706:	26 ce       	rjmp	.-948    	; 0x3354 <__fp_nan>

00003708 <exp>:
    3708:	95 de       	rcall	.-726    	; 0x3434 <__fp_splitA>
    370a:	c8 f3       	brcs	.-14     	; 0x36fe <square+0x6>
    370c:	96 38       	cpi	r25, 0x86	; 134
    370e:	c0 f7       	brcc	.-16     	; 0x3700 <square+0x8>
    3710:	07 f8       	bld	r0, 7
    3712:	0f 92       	push	r0
    3714:	e8 94       	clt
    3716:	2b e3       	ldi	r18, 0x3B	; 59
    3718:	3a ea       	ldi	r19, 0xAA	; 170
    371a:	48 eb       	ldi	r20, 0xB8	; 184
    371c:	5f e7       	ldi	r21, 0x7F	; 127
    371e:	09 df       	rcall	.-494    	; 0x3532 <__mulsf3_pse>
    3720:	0f 92       	push	r0
    3722:	0f 92       	push	r0
    3724:	0f 92       	push	r0
    3726:	4d b7       	in	r20, 0x3d	; 61
    3728:	5e b7       	in	r21, 0x3e	; 62
    372a:	0f 92       	push	r0
    372c:	64 d0       	rcall	.+200    	; 0x37f6 <modf>
    372e:	ef eb       	ldi	r30, 0xBF	; 191
    3730:	f2 e0       	ldi	r31, 0x02	; 2
    3732:	23 de       	rcall	.-954    	; 0x337a <__fp_powser>
    3734:	4f 91       	pop	r20
    3736:	5f 91       	pop	r21
    3738:	ef 91       	pop	r30
    373a:	ff 91       	pop	r31
    373c:	e5 95       	asr	r30
    373e:	ee 1f       	adc	r30, r30
    3740:	ff 1f       	adc	r31, r31
    3742:	49 f0       	breq	.+18     	; 0x3756 <exp+0x4e>
    3744:	fe 57       	subi	r31, 0x7E	; 126
    3746:	e0 68       	ori	r30, 0x80	; 128
    3748:	44 27       	eor	r20, r20
    374a:	ee 0f       	add	r30, r30
    374c:	44 1f       	adc	r20, r20
    374e:	fa 95       	dec	r31
    3750:	e1 f7       	brne	.-8      	; 0x374a <exp+0x42>
    3752:	41 95       	neg	r20
    3754:	55 0b       	sbc	r21, r21
    3756:	1b d0       	rcall	.+54     	; 0x378e <ldexp>
    3758:	0f 90       	pop	r0
    375a:	07 fe       	sbrs	r0, 7
    375c:	90 ce       	rjmp	.-736    	; 0x347e <inverse>
    375e:	08 95       	ret

00003760 <__fp_mpack>:
    3760:	9f 3f       	cpi	r25, 0xFF	; 255
    3762:	31 f0       	breq	.+12     	; 0x3770 <__fp_mpack_finite+0xc>

00003764 <__fp_mpack_finite>:
    3764:	91 50       	subi	r25, 0x01	; 1
    3766:	20 f4       	brcc	.+8      	; 0x3770 <__fp_mpack_finite+0xc>
    3768:	87 95       	ror	r24
    376a:	77 95       	ror	r23
    376c:	67 95       	ror	r22
    376e:	b7 95       	ror	r27
    3770:	88 0f       	add	r24, r24
    3772:	91 1d       	adc	r25, r1
    3774:	96 95       	lsr	r25
    3776:	87 95       	ror	r24
    3778:	97 f9       	bld	r25, 7
    377a:	08 95       	ret

0000377c <__fp_norm2>:
    377c:	91 50       	subi	r25, 0x01	; 1
    377e:	50 40       	sbci	r21, 0x00	; 0
    3780:	66 0f       	add	r22, r22
    3782:	77 1f       	adc	r23, r23
    3784:	88 1f       	adc	r24, r24
    3786:	d2 f7       	brpl	.-12     	; 0x377c <__fp_norm2>
    3788:	08 95       	ret
    378a:	de cd       	rjmp	.-1092   	; 0x3348 <__fp_inf>
    378c:	e9 cf       	rjmp	.-46     	; 0x3760 <__fp_mpack>

0000378e <ldexp>:
    378e:	52 de       	rcall	.-860    	; 0x3434 <__fp_splitA>
    3790:	e8 f3       	brcs	.-6      	; 0x378c <__fp_norm2+0x10>
    3792:	99 23       	and	r25, r25
    3794:	d9 f3       	breq	.-10     	; 0x378c <__fp_norm2+0x10>
    3796:	94 0f       	add	r25, r20
    3798:	51 1d       	adc	r21, r1
    379a:	bb f3       	brvs	.-18     	; 0x378a <__fp_norm2+0xe>
    379c:	91 50       	subi	r25, 0x01	; 1
    379e:	50 40       	sbci	r21, 0x00	; 0
    37a0:	94 f0       	brlt	.+36     	; 0x37c6 <ldexp+0x38>
    37a2:	59 f0       	breq	.+22     	; 0x37ba <ldexp+0x2c>
    37a4:	88 23       	and	r24, r24
    37a6:	32 f0       	brmi	.+12     	; 0x37b4 <ldexp+0x26>
    37a8:	66 0f       	add	r22, r22
    37aa:	77 1f       	adc	r23, r23
    37ac:	88 1f       	adc	r24, r24
    37ae:	91 50       	subi	r25, 0x01	; 1
    37b0:	50 40       	sbci	r21, 0x00	; 0
    37b2:	c1 f7       	brne	.-16     	; 0x37a4 <ldexp+0x16>
    37b4:	9e 3f       	cpi	r25, 0xFE	; 254
    37b6:	51 05       	cpc	r21, r1
    37b8:	44 f7       	brge	.-48     	; 0x378a <__fp_norm2+0xe>
    37ba:	88 0f       	add	r24, r24
    37bc:	91 1d       	adc	r25, r1
    37be:	96 95       	lsr	r25
    37c0:	87 95       	ror	r24
    37c2:	97 f9       	bld	r25, 7
    37c4:	08 95       	ret
    37c6:	5f 3f       	cpi	r21, 0xFF	; 255
    37c8:	ac f0       	brlt	.+42     	; 0x37f4 <ldexp+0x66>
    37ca:	98 3e       	cpi	r25, 0xE8	; 232
    37cc:	9c f0       	brlt	.+38     	; 0x37f4 <ldexp+0x66>
    37ce:	bb 27       	eor	r27, r27
    37d0:	86 95       	lsr	r24
    37d2:	77 95       	ror	r23
    37d4:	67 95       	ror	r22
    37d6:	b7 95       	ror	r27
    37d8:	08 f4       	brcc	.+2      	; 0x37dc <ldexp+0x4e>
    37da:	b1 60       	ori	r27, 0x01	; 1
    37dc:	93 95       	inc	r25
    37de:	c1 f7       	brne	.-16     	; 0x37d0 <ldexp+0x42>
    37e0:	bb 0f       	add	r27, r27
    37e2:	58 f7       	brcc	.-42     	; 0x37ba <ldexp+0x2c>
    37e4:	11 f4       	brne	.+4      	; 0x37ea <ldexp+0x5c>
    37e6:	60 ff       	sbrs	r22, 0
    37e8:	e8 cf       	rjmp	.-48     	; 0x37ba <ldexp+0x2c>
    37ea:	6f 5f       	subi	r22, 0xFF	; 255
    37ec:	7f 4f       	sbci	r23, 0xFF	; 255
    37ee:	8f 4f       	sbci	r24, 0xFF	; 255
    37f0:	9f 4f       	sbci	r25, 0xFF	; 255
    37f2:	e3 cf       	rjmp	.-58     	; 0x37ba <ldexp+0x2c>
    37f4:	3a ce       	rjmp	.-908    	; 0x346a <__fp_szero>

000037f6 <modf>:
    37f6:	fa 01       	movw	r30, r20
    37f8:	dc 01       	movw	r26, r24
    37fa:	aa 0f       	add	r26, r26
    37fc:	bb 1f       	adc	r27, r27
    37fe:	9b 01       	movw	r18, r22
    3800:	ac 01       	movw	r20, r24
    3802:	bf 57       	subi	r27, 0x7F	; 127
    3804:	28 f4       	brcc	.+10     	; 0x3810 <modf+0x1a>
    3806:	22 27       	eor	r18, r18
    3808:	33 27       	eor	r19, r19
    380a:	44 27       	eor	r20, r20
    380c:	50 78       	andi	r21, 0x80	; 128
    380e:	1f c0       	rjmp	.+62     	; 0x384e <modf+0x58>
    3810:	b7 51       	subi	r27, 0x17	; 23
    3812:	88 f4       	brcc	.+34     	; 0x3836 <modf+0x40>
    3814:	ab 2f       	mov	r26, r27
    3816:	00 24       	eor	r0, r0
    3818:	46 95       	lsr	r20
    381a:	37 95       	ror	r19
    381c:	27 95       	ror	r18
    381e:	01 1c       	adc	r0, r1
    3820:	a3 95       	inc	r26
    3822:	d2 f3       	brmi	.-12     	; 0x3818 <modf+0x22>
    3824:	00 20       	and	r0, r0
    3826:	69 f0       	breq	.+26     	; 0x3842 <modf+0x4c>
    3828:	22 0f       	add	r18, r18
    382a:	33 1f       	adc	r19, r19
    382c:	44 1f       	adc	r20, r20
    382e:	b3 95       	inc	r27
    3830:	da f3       	brmi	.-10     	; 0x3828 <modf+0x32>
    3832:	0d d0       	rcall	.+26     	; 0x384e <modf+0x58>
    3834:	58 cb       	rjmp	.-2384   	; 0x2ee6 <__subsf3>
    3836:	61 30       	cpi	r22, 0x01	; 1
    3838:	71 05       	cpc	r23, r1
    383a:	a0 e8       	ldi	r26, 0x80	; 128
    383c:	8a 07       	cpc	r24, r26
    383e:	b9 46       	sbci	r27, 0x69	; 105
    3840:	30 f4       	brcc	.+12     	; 0x384e <modf+0x58>
    3842:	9b 01       	movw	r18, r22
    3844:	ac 01       	movw	r20, r24
    3846:	66 27       	eor	r22, r22
    3848:	77 27       	eor	r23, r23
    384a:	88 27       	eor	r24, r24
    384c:	90 78       	andi	r25, 0x80	; 128
    384e:	30 96       	adiw	r30, 0x00	; 0
    3850:	21 f0       	breq	.+8      	; 0x385a <modf+0x64>
    3852:	20 83       	st	Z, r18
    3854:	31 83       	std	Z+1, r19	; 0x01
    3856:	42 83       	std	Z+2, r20	; 0x02
    3858:	53 83       	std	Z+3, r21	; 0x03
    385a:	08 95       	ret

0000385c <__mulsi3>:
    385c:	db 01       	movw	r26, r22
    385e:	8f 93       	push	r24
    3860:	9f 93       	push	r25
    3862:	7f d0       	rcall	.+254    	; 0x3962 <__muluhisi3>
    3864:	bf 91       	pop	r27
    3866:	af 91       	pop	r26
    3868:	a2 9f       	mul	r26, r18
    386a:	80 0d       	add	r24, r0
    386c:	91 1d       	adc	r25, r1
    386e:	a3 9f       	mul	r26, r19
    3870:	90 0d       	add	r25, r0
    3872:	b2 9f       	mul	r27, r18
    3874:	90 0d       	add	r25, r0
    3876:	11 24       	eor	r1, r1
    3878:	08 95       	ret

0000387a <__udivmodhi4>:
    387a:	aa 1b       	sub	r26, r26
    387c:	bb 1b       	sub	r27, r27
    387e:	51 e1       	ldi	r21, 0x11	; 17
    3880:	07 c0       	rjmp	.+14     	; 0x3890 <__udivmodhi4_ep>

00003882 <__udivmodhi4_loop>:
    3882:	aa 1f       	adc	r26, r26
    3884:	bb 1f       	adc	r27, r27
    3886:	a6 17       	cp	r26, r22
    3888:	b7 07       	cpc	r27, r23
    388a:	10 f0       	brcs	.+4      	; 0x3890 <__udivmodhi4_ep>
    388c:	a6 1b       	sub	r26, r22
    388e:	b7 0b       	sbc	r27, r23

00003890 <__udivmodhi4_ep>:
    3890:	88 1f       	adc	r24, r24
    3892:	99 1f       	adc	r25, r25
    3894:	5a 95       	dec	r21
    3896:	a9 f7       	brne	.-22     	; 0x3882 <__udivmodhi4_loop>
    3898:	80 95       	com	r24
    389a:	90 95       	com	r25
    389c:	bc 01       	movw	r22, r24
    389e:	cd 01       	movw	r24, r26
    38a0:	08 95       	ret

000038a2 <__divmodhi4>:
    38a2:	97 fb       	bst	r25, 7
    38a4:	07 2e       	mov	r0, r23
    38a6:	16 f4       	brtc	.+4      	; 0x38ac <__divmodhi4+0xa>
    38a8:	00 94       	com	r0
    38aa:	06 d0       	rcall	.+12     	; 0x38b8 <__divmodhi4_neg1>
    38ac:	77 fd       	sbrc	r23, 7
    38ae:	08 d0       	rcall	.+16     	; 0x38c0 <__divmodhi4_neg2>
    38b0:	e4 df       	rcall	.-56     	; 0x387a <__udivmodhi4>
    38b2:	07 fc       	sbrc	r0, 7
    38b4:	05 d0       	rcall	.+10     	; 0x38c0 <__divmodhi4_neg2>
    38b6:	3e f4       	brtc	.+14     	; 0x38c6 <__divmodhi4_exit>

000038b8 <__divmodhi4_neg1>:
    38b8:	90 95       	com	r25
    38ba:	81 95       	neg	r24
    38bc:	9f 4f       	sbci	r25, 0xFF	; 255
    38be:	08 95       	ret

000038c0 <__divmodhi4_neg2>:
    38c0:	70 95       	com	r23
    38c2:	61 95       	neg	r22
    38c4:	7f 4f       	sbci	r23, 0xFF	; 255

000038c6 <__divmodhi4_exit>:
    38c6:	08 95       	ret

000038c8 <__udivmodsi4>:
    38c8:	a1 e2       	ldi	r26, 0x21	; 33
    38ca:	1a 2e       	mov	r1, r26
    38cc:	aa 1b       	sub	r26, r26
    38ce:	bb 1b       	sub	r27, r27
    38d0:	fd 01       	movw	r30, r26
    38d2:	0d c0       	rjmp	.+26     	; 0x38ee <__udivmodsi4_ep>

000038d4 <__udivmodsi4_loop>:
    38d4:	aa 1f       	adc	r26, r26
    38d6:	bb 1f       	adc	r27, r27
    38d8:	ee 1f       	adc	r30, r30
    38da:	ff 1f       	adc	r31, r31
    38dc:	a2 17       	cp	r26, r18
    38de:	b3 07       	cpc	r27, r19
    38e0:	e4 07       	cpc	r30, r20
    38e2:	f5 07       	cpc	r31, r21
    38e4:	20 f0       	brcs	.+8      	; 0x38ee <__udivmodsi4_ep>
    38e6:	a2 1b       	sub	r26, r18
    38e8:	b3 0b       	sbc	r27, r19
    38ea:	e4 0b       	sbc	r30, r20
    38ec:	f5 0b       	sbc	r31, r21

000038ee <__udivmodsi4_ep>:
    38ee:	66 1f       	adc	r22, r22
    38f0:	77 1f       	adc	r23, r23
    38f2:	88 1f       	adc	r24, r24
    38f4:	99 1f       	adc	r25, r25
    38f6:	1a 94       	dec	r1
    38f8:	69 f7       	brne	.-38     	; 0x38d4 <__udivmodsi4_loop>
    38fa:	60 95       	com	r22
    38fc:	70 95       	com	r23
    38fe:	80 95       	com	r24
    3900:	90 95       	com	r25
    3902:	9b 01       	movw	r18, r22
    3904:	ac 01       	movw	r20, r24
    3906:	bd 01       	movw	r22, r26
    3908:	cf 01       	movw	r24, r30
    390a:	08 95       	ret

0000390c <__divmodsi4>:
    390c:	05 2e       	mov	r0, r21
    390e:	97 fb       	bst	r25, 7
    3910:	16 f4       	brtc	.+4      	; 0x3916 <__divmodsi4+0xa>
    3912:	00 94       	com	r0
    3914:	0f d0       	rcall	.+30     	; 0x3934 <__negsi2>
    3916:	57 fd       	sbrc	r21, 7
    3918:	05 d0       	rcall	.+10     	; 0x3924 <__divmodsi4_neg2>
    391a:	d6 df       	rcall	.-84     	; 0x38c8 <__udivmodsi4>
    391c:	07 fc       	sbrc	r0, 7
    391e:	02 d0       	rcall	.+4      	; 0x3924 <__divmodsi4_neg2>
    3920:	46 f4       	brtc	.+16     	; 0x3932 <__divmodsi4_exit>
    3922:	08 c0       	rjmp	.+16     	; 0x3934 <__negsi2>

00003924 <__divmodsi4_neg2>:
    3924:	50 95       	com	r21
    3926:	40 95       	com	r20
    3928:	30 95       	com	r19
    392a:	21 95       	neg	r18
    392c:	3f 4f       	sbci	r19, 0xFF	; 255
    392e:	4f 4f       	sbci	r20, 0xFF	; 255
    3930:	5f 4f       	sbci	r21, 0xFF	; 255

00003932 <__divmodsi4_exit>:
    3932:	08 95       	ret

00003934 <__negsi2>:
    3934:	90 95       	com	r25
    3936:	80 95       	com	r24
    3938:	70 95       	com	r23
    393a:	61 95       	neg	r22
    393c:	7f 4f       	sbci	r23, 0xFF	; 255
    393e:	8f 4f       	sbci	r24, 0xFF	; 255
    3940:	9f 4f       	sbci	r25, 0xFF	; 255
    3942:	08 95       	ret

00003944 <__umulhisi3>:
    3944:	a2 9f       	mul	r26, r18
    3946:	b0 01       	movw	r22, r0
    3948:	b3 9f       	mul	r27, r19
    394a:	c0 01       	movw	r24, r0
    394c:	a3 9f       	mul	r26, r19
    394e:	70 0d       	add	r23, r0
    3950:	81 1d       	adc	r24, r1
    3952:	11 24       	eor	r1, r1
    3954:	91 1d       	adc	r25, r1
    3956:	b2 9f       	mul	r27, r18
    3958:	70 0d       	add	r23, r0
    395a:	81 1d       	adc	r24, r1
    395c:	11 24       	eor	r1, r1
    395e:	91 1d       	adc	r25, r1
    3960:	08 95       	ret

00003962 <__muluhisi3>:
    3962:	f0 df       	rcall	.-32     	; 0x3944 <__umulhisi3>
    3964:	a5 9f       	mul	r26, r21
    3966:	90 0d       	add	r25, r0
    3968:	b4 9f       	mul	r27, r20
    396a:	90 0d       	add	r25, r0
    396c:	a4 9f       	mul	r26, r20
    396e:	80 0d       	add	r24, r0
    3970:	91 1d       	adc	r25, r1
    3972:	11 24       	eor	r1, r1
    3974:	08 95       	ret

00003976 <__mulshisi3>:
    3976:	b7 ff       	sbrs	r27, 7
    3978:	f4 cf       	rjmp	.-24     	; 0x3962 <__muluhisi3>

0000397a <__mulohisi3>:
    397a:	f3 df       	rcall	.-26     	; 0x3962 <__muluhisi3>
    397c:	82 1b       	sub	r24, r18
    397e:	93 0b       	sbc	r25, r19
    3980:	08 95       	ret

00003982 <__ashrdi3>:
    3982:	97 fb       	bst	r25, 7
    3984:	10 f8       	bld	r1, 0

00003986 <__lshrdi3>:
    3986:	16 94       	lsr	r1
    3988:	00 08       	sbc	r0, r0
    398a:	0f 93       	push	r16
    398c:	08 30       	cpi	r16, 0x08	; 8
    398e:	98 f0       	brcs	.+38     	; 0x39b6 <__lshrdi3+0x30>
    3990:	08 50       	subi	r16, 0x08	; 8
    3992:	23 2f       	mov	r18, r19
    3994:	34 2f       	mov	r19, r20
    3996:	45 2f       	mov	r20, r21
    3998:	56 2f       	mov	r21, r22
    399a:	67 2f       	mov	r22, r23
    399c:	78 2f       	mov	r23, r24
    399e:	89 2f       	mov	r24, r25
    39a0:	90 2d       	mov	r25, r0
    39a2:	f4 cf       	rjmp	.-24     	; 0x398c <__lshrdi3+0x6>
    39a4:	05 94       	asr	r0
    39a6:	97 95       	ror	r25
    39a8:	87 95       	ror	r24
    39aa:	77 95       	ror	r23
    39ac:	67 95       	ror	r22
    39ae:	57 95       	ror	r21
    39b0:	47 95       	ror	r20
    39b2:	37 95       	ror	r19
    39b4:	27 95       	ror	r18
    39b6:	0a 95       	dec	r16
    39b8:	aa f7       	brpl	.-22     	; 0x39a4 <__lshrdi3+0x1e>
    39ba:	0f 91       	pop	r16
    39bc:	08 95       	ret

000039be <fdevopen>:
    39be:	0f 93       	push	r16
    39c0:	1f 93       	push	r17
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	00 97       	sbiw	r24, 0x00	; 0
    39c8:	31 f4       	brne	.+12     	; 0x39d6 <fdevopen+0x18>
    39ca:	61 15       	cp	r22, r1
    39cc:	71 05       	cpc	r23, r1
    39ce:	19 f4       	brne	.+6      	; 0x39d6 <fdevopen+0x18>
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	39 c0       	rjmp	.+114    	; 0x3a48 <fdevopen+0x8a>
    39d6:	8b 01       	movw	r16, r22
    39d8:	ec 01       	movw	r28, r24
    39da:	6e e0       	ldi	r22, 0x0E	; 14
    39dc:	70 e0       	ldi	r23, 0x00	; 0
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	47 d5       	rcall	.+2702   	; 0x4472 <calloc>
    39e4:	fc 01       	movw	r30, r24
    39e6:	89 2b       	or	r24, r25
    39e8:	99 f3       	breq	.-26     	; 0x39d0 <fdevopen+0x12>
    39ea:	80 e8       	ldi	r24, 0x80	; 128
    39ec:	83 83       	std	Z+3, r24	; 0x03
    39ee:	01 15       	cp	r16, r1
    39f0:	11 05       	cpc	r17, r1
    39f2:	71 f0       	breq	.+28     	; 0x3a10 <fdevopen+0x52>
    39f4:	02 87       	std	Z+10, r16	; 0x0a
    39f6:	13 87       	std	Z+11, r17	; 0x0b
    39f8:	81 e8       	ldi	r24, 0x81	; 129
    39fa:	83 83       	std	Z+3, r24	; 0x03
    39fc:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <__iob>
    3a00:	90 91 89 21 	lds	r25, 0x2189	; 0x802189 <__iob+0x1>
    3a04:	89 2b       	or	r24, r25
    3a06:	21 f4       	brne	.+8      	; 0x3a10 <fdevopen+0x52>
    3a08:	e0 93 88 21 	sts	0x2188, r30	; 0x802188 <__iob>
    3a0c:	f0 93 89 21 	sts	0x2189, r31	; 0x802189 <__iob+0x1>
    3a10:	20 97       	sbiw	r28, 0x00	; 0
    3a12:	c9 f0       	breq	.+50     	; 0x3a46 <fdevopen+0x88>
    3a14:	c0 87       	std	Z+8, r28	; 0x08
    3a16:	d1 87       	std	Z+9, r29	; 0x09
    3a18:	83 81       	ldd	r24, Z+3	; 0x03
    3a1a:	82 60       	ori	r24, 0x02	; 2
    3a1c:	83 83       	std	Z+3, r24	; 0x03
    3a1e:	80 91 8a 21 	lds	r24, 0x218A	; 0x80218a <__iob+0x2>
    3a22:	90 91 8b 21 	lds	r25, 0x218B	; 0x80218b <__iob+0x3>
    3a26:	89 2b       	or	r24, r25
    3a28:	71 f4       	brne	.+28     	; 0x3a46 <fdevopen+0x88>
    3a2a:	e0 93 8a 21 	sts	0x218A, r30	; 0x80218a <__iob+0x2>
    3a2e:	f0 93 8b 21 	sts	0x218B, r31	; 0x80218b <__iob+0x3>
    3a32:	80 91 8c 21 	lds	r24, 0x218C	; 0x80218c <__iob+0x4>
    3a36:	90 91 8d 21 	lds	r25, 0x218D	; 0x80218d <__iob+0x5>
    3a3a:	89 2b       	or	r24, r25
    3a3c:	21 f4       	brne	.+8      	; 0x3a46 <fdevopen+0x88>
    3a3e:	e0 93 8c 21 	sts	0x218C, r30	; 0x80218c <__iob+0x4>
    3a42:	f0 93 8d 21 	sts	0x218D, r31	; 0x80218d <__iob+0x5>
    3a46:	cf 01       	movw	r24, r30
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	1f 91       	pop	r17
    3a4e:	0f 91       	pop	r16
    3a50:	08 95       	ret

00003a52 <printf>:
    3a52:	cf 93       	push	r28
    3a54:	df 93       	push	r29
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	ae 01       	movw	r20, r28
    3a5c:	4a 5f       	subi	r20, 0xFA	; 250
    3a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a60:	fa 01       	movw	r30, r20
    3a62:	61 91       	ld	r22, Z+
    3a64:	71 91       	ld	r23, Z+
    3a66:	af 01       	movw	r20, r30
    3a68:	80 91 8a 21 	lds	r24, 0x218A	; 0x80218a <__iob+0x2>
    3a6c:	90 91 8b 21 	lds	r25, 0x218B	; 0x80218b <__iob+0x3>
    3a70:	46 d0       	rcall	.+140    	; 0x3afe <vfprintf>
    3a72:	df 91       	pop	r29
    3a74:	cf 91       	pop	r28
    3a76:	08 95       	ret

00003a78 <sprintf>:
    3a78:	0f 93       	push	r16
    3a7a:	1f 93       	push	r17
    3a7c:	cf 93       	push	r28
    3a7e:	df 93       	push	r29
    3a80:	cd b7       	in	r28, 0x3d	; 61
    3a82:	de b7       	in	r29, 0x3e	; 62
    3a84:	2e 97       	sbiw	r28, 0x0e	; 14
    3a86:	cd bf       	out	0x3d, r28	; 61
    3a88:	de bf       	out	0x3e, r29	; 62
    3a8a:	0e 89       	ldd	r16, Y+22	; 0x16
    3a8c:	1f 89       	ldd	r17, Y+23	; 0x17
    3a8e:	86 e0       	ldi	r24, 0x06	; 6
    3a90:	8c 83       	std	Y+4, r24	; 0x04
    3a92:	09 83       	std	Y+1, r16	; 0x01
    3a94:	1a 83       	std	Y+2, r17	; 0x02
    3a96:	8f ef       	ldi	r24, 0xFF	; 255
    3a98:	9f e7       	ldi	r25, 0x7F	; 127
    3a9a:	8d 83       	std	Y+5, r24	; 0x05
    3a9c:	9e 83       	std	Y+6, r25	; 0x06
    3a9e:	ae 01       	movw	r20, r28
    3aa0:	46 5e       	subi	r20, 0xE6	; 230
    3aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    3aa4:	68 8d       	ldd	r22, Y+24	; 0x18
    3aa6:	79 8d       	ldd	r23, Y+25	; 0x19
    3aa8:	ce 01       	movw	r24, r28
    3aaa:	01 96       	adiw	r24, 0x01	; 1
    3aac:	28 d0       	rcall	.+80     	; 0x3afe <vfprintf>
    3aae:	ef 81       	ldd	r30, Y+7	; 0x07
    3ab0:	f8 85       	ldd	r31, Y+8	; 0x08
    3ab2:	e0 0f       	add	r30, r16
    3ab4:	f1 1f       	adc	r31, r17
    3ab6:	10 82       	st	Z, r1
    3ab8:	2e 96       	adiw	r28, 0x0e	; 14
    3aba:	cd bf       	out	0x3d, r28	; 61
    3abc:	de bf       	out	0x3e, r29	; 62
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	1f 91       	pop	r17
    3ac4:	0f 91       	pop	r16
    3ac6:	08 95       	ret

00003ac8 <sscanf>:
    3ac8:	cf 93       	push	r28
    3aca:	df 93       	push	r29
    3acc:	cd b7       	in	r28, 0x3d	; 61
    3ace:	de b7       	in	r29, 0x3e	; 62
    3ad0:	2e 97       	sbiw	r28, 0x0e	; 14
    3ad2:	cd bf       	out	0x3d, r28	; 61
    3ad4:	de bf       	out	0x3e, r29	; 62
    3ad6:	85 e0       	ldi	r24, 0x05	; 5
    3ad8:	8c 83       	std	Y+4, r24	; 0x04
    3ada:	8c 89       	ldd	r24, Y+20	; 0x14
    3adc:	9d 89       	ldd	r25, Y+21	; 0x15
    3ade:	89 83       	std	Y+1, r24	; 0x01
    3ae0:	9a 83       	std	Y+2, r25	; 0x02
    3ae2:	ae 01       	movw	r20, r28
    3ae4:	48 5e       	subi	r20, 0xE8	; 232
    3ae6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae8:	6e 89       	ldd	r22, Y+22	; 0x16
    3aea:	7f 89       	ldd	r23, Y+23	; 0x17
    3aec:	ce 01       	movw	r24, r28
    3aee:	01 96       	adiw	r24, 0x01	; 1
    3af0:	a9 d3       	rcall	.+1874   	; 0x4244 <vfscanf>
    3af2:	2e 96       	adiw	r28, 0x0e	; 14
    3af4:	cd bf       	out	0x3d, r28	; 61
    3af6:	de bf       	out	0x3e, r29	; 62
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	08 95       	ret

00003afe <vfprintf>:
    3afe:	2f 92       	push	r2
    3b00:	3f 92       	push	r3
    3b02:	4f 92       	push	r4
    3b04:	5f 92       	push	r5
    3b06:	6f 92       	push	r6
    3b08:	7f 92       	push	r7
    3b0a:	8f 92       	push	r8
    3b0c:	9f 92       	push	r9
    3b0e:	af 92       	push	r10
    3b10:	bf 92       	push	r11
    3b12:	cf 92       	push	r12
    3b14:	df 92       	push	r13
    3b16:	ef 92       	push	r14
    3b18:	ff 92       	push	r15
    3b1a:	0f 93       	push	r16
    3b1c:	1f 93       	push	r17
    3b1e:	cf 93       	push	r28
    3b20:	df 93       	push	r29
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
    3b26:	2b 97       	sbiw	r28, 0x0b	; 11
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	6c 01       	movw	r12, r24
    3b2e:	7b 01       	movw	r14, r22
    3b30:	8a 01       	movw	r16, r20
    3b32:	fc 01       	movw	r30, r24
    3b34:	16 82       	std	Z+6, r1	; 0x06
    3b36:	17 82       	std	Z+7, r1	; 0x07
    3b38:	83 81       	ldd	r24, Z+3	; 0x03
    3b3a:	81 ff       	sbrs	r24, 1
    3b3c:	bf c1       	rjmp	.+894    	; 0x3ebc <vfprintf+0x3be>
    3b3e:	ce 01       	movw	r24, r28
    3b40:	01 96       	adiw	r24, 0x01	; 1
    3b42:	3c 01       	movw	r6, r24
    3b44:	f6 01       	movw	r30, r12
    3b46:	93 81       	ldd	r25, Z+3	; 0x03
    3b48:	f7 01       	movw	r30, r14
    3b4a:	93 fd       	sbrc	r25, 3
    3b4c:	85 91       	lpm	r24, Z+
    3b4e:	93 ff       	sbrs	r25, 3
    3b50:	81 91       	ld	r24, Z+
    3b52:	7f 01       	movw	r14, r30
    3b54:	88 23       	and	r24, r24
    3b56:	09 f4       	brne	.+2      	; 0x3b5a <vfprintf+0x5c>
    3b58:	ad c1       	rjmp	.+858    	; 0x3eb4 <vfprintf+0x3b6>
    3b5a:	85 32       	cpi	r24, 0x25	; 37
    3b5c:	39 f4       	brne	.+14     	; 0x3b6c <vfprintf+0x6e>
    3b5e:	93 fd       	sbrc	r25, 3
    3b60:	85 91       	lpm	r24, Z+
    3b62:	93 ff       	sbrs	r25, 3
    3b64:	81 91       	ld	r24, Z+
    3b66:	7f 01       	movw	r14, r30
    3b68:	85 32       	cpi	r24, 0x25	; 37
    3b6a:	21 f4       	brne	.+8      	; 0x3b74 <vfprintf+0x76>
    3b6c:	b6 01       	movw	r22, r12
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	29 d6       	rcall	.+3154   	; 0x47c4 <fputc>
    3b72:	e8 cf       	rjmp	.-48     	; 0x3b44 <vfprintf+0x46>
    3b74:	91 2c       	mov	r9, r1
    3b76:	21 2c       	mov	r2, r1
    3b78:	31 2c       	mov	r3, r1
    3b7a:	ff e1       	ldi	r31, 0x1F	; 31
    3b7c:	f3 15       	cp	r31, r3
    3b7e:	d8 f0       	brcs	.+54     	; 0x3bb6 <vfprintf+0xb8>
    3b80:	8b 32       	cpi	r24, 0x2B	; 43
    3b82:	79 f0       	breq	.+30     	; 0x3ba2 <vfprintf+0xa4>
    3b84:	38 f4       	brcc	.+14     	; 0x3b94 <vfprintf+0x96>
    3b86:	80 32       	cpi	r24, 0x20	; 32
    3b88:	79 f0       	breq	.+30     	; 0x3ba8 <vfprintf+0xaa>
    3b8a:	83 32       	cpi	r24, 0x23	; 35
    3b8c:	a1 f4       	brne	.+40     	; 0x3bb6 <vfprintf+0xb8>
    3b8e:	23 2d       	mov	r18, r3
    3b90:	20 61       	ori	r18, 0x10	; 16
    3b92:	1d c0       	rjmp	.+58     	; 0x3bce <vfprintf+0xd0>
    3b94:	8d 32       	cpi	r24, 0x2D	; 45
    3b96:	61 f0       	breq	.+24     	; 0x3bb0 <vfprintf+0xb2>
    3b98:	80 33       	cpi	r24, 0x30	; 48
    3b9a:	69 f4       	brne	.+26     	; 0x3bb6 <vfprintf+0xb8>
    3b9c:	23 2d       	mov	r18, r3
    3b9e:	21 60       	ori	r18, 0x01	; 1
    3ba0:	16 c0       	rjmp	.+44     	; 0x3bce <vfprintf+0xd0>
    3ba2:	83 2d       	mov	r24, r3
    3ba4:	82 60       	ori	r24, 0x02	; 2
    3ba6:	38 2e       	mov	r3, r24
    3ba8:	e3 2d       	mov	r30, r3
    3baa:	e4 60       	ori	r30, 0x04	; 4
    3bac:	3e 2e       	mov	r3, r30
    3bae:	2a c0       	rjmp	.+84     	; 0x3c04 <vfprintf+0x106>
    3bb0:	f3 2d       	mov	r31, r3
    3bb2:	f8 60       	ori	r31, 0x08	; 8
    3bb4:	1d c0       	rjmp	.+58     	; 0x3bf0 <vfprintf+0xf2>
    3bb6:	37 fc       	sbrc	r3, 7
    3bb8:	2d c0       	rjmp	.+90     	; 0x3c14 <vfprintf+0x116>
    3bba:	20 ed       	ldi	r18, 0xD0	; 208
    3bbc:	28 0f       	add	r18, r24
    3bbe:	2a 30       	cpi	r18, 0x0A	; 10
    3bc0:	40 f0       	brcs	.+16     	; 0x3bd2 <vfprintf+0xd4>
    3bc2:	8e 32       	cpi	r24, 0x2E	; 46
    3bc4:	b9 f4       	brne	.+46     	; 0x3bf4 <vfprintf+0xf6>
    3bc6:	36 fc       	sbrc	r3, 6
    3bc8:	75 c1       	rjmp	.+746    	; 0x3eb4 <vfprintf+0x3b6>
    3bca:	23 2d       	mov	r18, r3
    3bcc:	20 64       	ori	r18, 0x40	; 64
    3bce:	32 2e       	mov	r3, r18
    3bd0:	19 c0       	rjmp	.+50     	; 0x3c04 <vfprintf+0x106>
    3bd2:	36 fe       	sbrs	r3, 6
    3bd4:	06 c0       	rjmp	.+12     	; 0x3be2 <vfprintf+0xe4>
    3bd6:	8a e0       	ldi	r24, 0x0A	; 10
    3bd8:	98 9e       	mul	r9, r24
    3bda:	20 0d       	add	r18, r0
    3bdc:	11 24       	eor	r1, r1
    3bde:	92 2e       	mov	r9, r18
    3be0:	11 c0       	rjmp	.+34     	; 0x3c04 <vfprintf+0x106>
    3be2:	ea e0       	ldi	r30, 0x0A	; 10
    3be4:	2e 9e       	mul	r2, r30
    3be6:	20 0d       	add	r18, r0
    3be8:	11 24       	eor	r1, r1
    3bea:	22 2e       	mov	r2, r18
    3bec:	f3 2d       	mov	r31, r3
    3bee:	f0 62       	ori	r31, 0x20	; 32
    3bf0:	3f 2e       	mov	r3, r31
    3bf2:	08 c0       	rjmp	.+16     	; 0x3c04 <vfprintf+0x106>
    3bf4:	8c 36       	cpi	r24, 0x6C	; 108
    3bf6:	21 f4       	brne	.+8      	; 0x3c00 <vfprintf+0x102>
    3bf8:	83 2d       	mov	r24, r3
    3bfa:	80 68       	ori	r24, 0x80	; 128
    3bfc:	38 2e       	mov	r3, r24
    3bfe:	02 c0       	rjmp	.+4      	; 0x3c04 <vfprintf+0x106>
    3c00:	88 36       	cpi	r24, 0x68	; 104
    3c02:	41 f4       	brne	.+16     	; 0x3c14 <vfprintf+0x116>
    3c04:	f7 01       	movw	r30, r14
    3c06:	93 fd       	sbrc	r25, 3
    3c08:	85 91       	lpm	r24, Z+
    3c0a:	93 ff       	sbrs	r25, 3
    3c0c:	81 91       	ld	r24, Z+
    3c0e:	7f 01       	movw	r14, r30
    3c10:	81 11       	cpse	r24, r1
    3c12:	b3 cf       	rjmp	.-154    	; 0x3b7a <vfprintf+0x7c>
    3c14:	98 2f       	mov	r25, r24
    3c16:	9f 7d       	andi	r25, 0xDF	; 223
    3c18:	95 54       	subi	r25, 0x45	; 69
    3c1a:	93 30       	cpi	r25, 0x03	; 3
    3c1c:	28 f4       	brcc	.+10     	; 0x3c28 <vfprintf+0x12a>
    3c1e:	0c 5f       	subi	r16, 0xFC	; 252
    3c20:	1f 4f       	sbci	r17, 0xFF	; 255
    3c22:	9f e3       	ldi	r25, 0x3F	; 63
    3c24:	99 83       	std	Y+1, r25	; 0x01
    3c26:	0d c0       	rjmp	.+26     	; 0x3c42 <vfprintf+0x144>
    3c28:	83 36       	cpi	r24, 0x63	; 99
    3c2a:	31 f0       	breq	.+12     	; 0x3c38 <vfprintf+0x13a>
    3c2c:	83 37       	cpi	r24, 0x73	; 115
    3c2e:	71 f0       	breq	.+28     	; 0x3c4c <vfprintf+0x14e>
    3c30:	83 35       	cpi	r24, 0x53	; 83
    3c32:	09 f0       	breq	.+2      	; 0x3c36 <vfprintf+0x138>
    3c34:	55 c0       	rjmp	.+170    	; 0x3ce0 <vfprintf+0x1e2>
    3c36:	20 c0       	rjmp	.+64     	; 0x3c78 <vfprintf+0x17a>
    3c38:	f8 01       	movw	r30, r16
    3c3a:	80 81       	ld	r24, Z
    3c3c:	89 83       	std	Y+1, r24	; 0x01
    3c3e:	0e 5f       	subi	r16, 0xFE	; 254
    3c40:	1f 4f       	sbci	r17, 0xFF	; 255
    3c42:	88 24       	eor	r8, r8
    3c44:	83 94       	inc	r8
    3c46:	91 2c       	mov	r9, r1
    3c48:	53 01       	movw	r10, r6
    3c4a:	12 c0       	rjmp	.+36     	; 0x3c70 <vfprintf+0x172>
    3c4c:	28 01       	movw	r4, r16
    3c4e:	f2 e0       	ldi	r31, 0x02	; 2
    3c50:	4f 0e       	add	r4, r31
    3c52:	51 1c       	adc	r5, r1
    3c54:	f8 01       	movw	r30, r16
    3c56:	a0 80       	ld	r10, Z
    3c58:	b1 80       	ldd	r11, Z+1	; 0x01
    3c5a:	36 fe       	sbrs	r3, 6
    3c5c:	03 c0       	rjmp	.+6      	; 0x3c64 <vfprintf+0x166>
    3c5e:	69 2d       	mov	r22, r9
    3c60:	70 e0       	ldi	r23, 0x00	; 0
    3c62:	02 c0       	rjmp	.+4      	; 0x3c68 <vfprintf+0x16a>
    3c64:	6f ef       	ldi	r22, 0xFF	; 255
    3c66:	7f ef       	ldi	r23, 0xFF	; 255
    3c68:	c5 01       	movw	r24, r10
    3c6a:	63 d5       	rcall	.+2758   	; 0x4732 <strnlen>
    3c6c:	4c 01       	movw	r8, r24
    3c6e:	82 01       	movw	r16, r4
    3c70:	f3 2d       	mov	r31, r3
    3c72:	ff 77       	andi	r31, 0x7F	; 127
    3c74:	3f 2e       	mov	r3, r31
    3c76:	15 c0       	rjmp	.+42     	; 0x3ca2 <vfprintf+0x1a4>
    3c78:	28 01       	movw	r4, r16
    3c7a:	22 e0       	ldi	r18, 0x02	; 2
    3c7c:	42 0e       	add	r4, r18
    3c7e:	51 1c       	adc	r5, r1
    3c80:	f8 01       	movw	r30, r16
    3c82:	a0 80       	ld	r10, Z
    3c84:	b1 80       	ldd	r11, Z+1	; 0x01
    3c86:	36 fe       	sbrs	r3, 6
    3c88:	03 c0       	rjmp	.+6      	; 0x3c90 <vfprintf+0x192>
    3c8a:	69 2d       	mov	r22, r9
    3c8c:	70 e0       	ldi	r23, 0x00	; 0
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <vfprintf+0x196>
    3c90:	6f ef       	ldi	r22, 0xFF	; 255
    3c92:	7f ef       	ldi	r23, 0xFF	; 255
    3c94:	c5 01       	movw	r24, r10
    3c96:	3b d5       	rcall	.+2678   	; 0x470e <strnlen_P>
    3c98:	4c 01       	movw	r8, r24
    3c9a:	f3 2d       	mov	r31, r3
    3c9c:	f0 68       	ori	r31, 0x80	; 128
    3c9e:	3f 2e       	mov	r3, r31
    3ca0:	82 01       	movw	r16, r4
    3ca2:	33 fc       	sbrc	r3, 3
    3ca4:	19 c0       	rjmp	.+50     	; 0x3cd8 <vfprintf+0x1da>
    3ca6:	82 2d       	mov	r24, r2
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	88 16       	cp	r8, r24
    3cac:	99 06       	cpc	r9, r25
    3cae:	a0 f4       	brcc	.+40     	; 0x3cd8 <vfprintf+0x1da>
    3cb0:	b6 01       	movw	r22, r12
    3cb2:	80 e2       	ldi	r24, 0x20	; 32
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	86 d5       	rcall	.+2828   	; 0x47c4 <fputc>
    3cb8:	2a 94       	dec	r2
    3cba:	f5 cf       	rjmp	.-22     	; 0x3ca6 <vfprintf+0x1a8>
    3cbc:	f5 01       	movw	r30, r10
    3cbe:	37 fc       	sbrc	r3, 7
    3cc0:	85 91       	lpm	r24, Z+
    3cc2:	37 fe       	sbrs	r3, 7
    3cc4:	81 91       	ld	r24, Z+
    3cc6:	5f 01       	movw	r10, r30
    3cc8:	b6 01       	movw	r22, r12
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	7b d5       	rcall	.+2806   	; 0x47c4 <fputc>
    3cce:	21 10       	cpse	r2, r1
    3cd0:	2a 94       	dec	r2
    3cd2:	21 e0       	ldi	r18, 0x01	; 1
    3cd4:	82 1a       	sub	r8, r18
    3cd6:	91 08       	sbc	r9, r1
    3cd8:	81 14       	cp	r8, r1
    3cda:	91 04       	cpc	r9, r1
    3cdc:	79 f7       	brne	.-34     	; 0x3cbc <vfprintf+0x1be>
    3cde:	e1 c0       	rjmp	.+450    	; 0x3ea2 <vfprintf+0x3a4>
    3ce0:	84 36       	cpi	r24, 0x64	; 100
    3ce2:	11 f0       	breq	.+4      	; 0x3ce8 <vfprintf+0x1ea>
    3ce4:	89 36       	cpi	r24, 0x69	; 105
    3ce6:	39 f5       	brne	.+78     	; 0x3d36 <vfprintf+0x238>
    3ce8:	f8 01       	movw	r30, r16
    3cea:	37 fe       	sbrs	r3, 7
    3cec:	07 c0       	rjmp	.+14     	; 0x3cfc <vfprintf+0x1fe>
    3cee:	60 81       	ld	r22, Z
    3cf0:	71 81       	ldd	r23, Z+1	; 0x01
    3cf2:	82 81       	ldd	r24, Z+2	; 0x02
    3cf4:	93 81       	ldd	r25, Z+3	; 0x03
    3cf6:	0c 5f       	subi	r16, 0xFC	; 252
    3cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cfa:	08 c0       	rjmp	.+16     	; 0x3d0c <vfprintf+0x20e>
    3cfc:	60 81       	ld	r22, Z
    3cfe:	71 81       	ldd	r23, Z+1	; 0x01
    3d00:	07 2e       	mov	r0, r23
    3d02:	00 0c       	add	r0, r0
    3d04:	88 0b       	sbc	r24, r24
    3d06:	99 0b       	sbc	r25, r25
    3d08:	0e 5f       	subi	r16, 0xFE	; 254
    3d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d0c:	f3 2d       	mov	r31, r3
    3d0e:	ff 76       	andi	r31, 0x6F	; 111
    3d10:	3f 2e       	mov	r3, r31
    3d12:	97 ff       	sbrs	r25, 7
    3d14:	09 c0       	rjmp	.+18     	; 0x3d28 <vfprintf+0x22a>
    3d16:	90 95       	com	r25
    3d18:	80 95       	com	r24
    3d1a:	70 95       	com	r23
    3d1c:	61 95       	neg	r22
    3d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d20:	8f 4f       	sbci	r24, 0xFF	; 255
    3d22:	9f 4f       	sbci	r25, 0xFF	; 255
    3d24:	f0 68       	ori	r31, 0x80	; 128
    3d26:	3f 2e       	mov	r3, r31
    3d28:	2a e0       	ldi	r18, 0x0A	; 10
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	a3 01       	movw	r20, r6
    3d2e:	9f d5       	rcall	.+2878   	; 0x486e <__ultoa_invert>
    3d30:	88 2e       	mov	r8, r24
    3d32:	86 18       	sub	r8, r6
    3d34:	44 c0       	rjmp	.+136    	; 0x3dbe <vfprintf+0x2c0>
    3d36:	85 37       	cpi	r24, 0x75	; 117
    3d38:	31 f4       	brne	.+12     	; 0x3d46 <vfprintf+0x248>
    3d3a:	23 2d       	mov	r18, r3
    3d3c:	2f 7e       	andi	r18, 0xEF	; 239
    3d3e:	b2 2e       	mov	r11, r18
    3d40:	2a e0       	ldi	r18, 0x0A	; 10
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	25 c0       	rjmp	.+74     	; 0x3d90 <vfprintf+0x292>
    3d46:	93 2d       	mov	r25, r3
    3d48:	99 7f       	andi	r25, 0xF9	; 249
    3d4a:	b9 2e       	mov	r11, r25
    3d4c:	8f 36       	cpi	r24, 0x6F	; 111
    3d4e:	c1 f0       	breq	.+48     	; 0x3d80 <vfprintf+0x282>
    3d50:	18 f4       	brcc	.+6      	; 0x3d58 <vfprintf+0x25a>
    3d52:	88 35       	cpi	r24, 0x58	; 88
    3d54:	79 f0       	breq	.+30     	; 0x3d74 <vfprintf+0x276>
    3d56:	ae c0       	rjmp	.+348    	; 0x3eb4 <vfprintf+0x3b6>
    3d58:	80 37       	cpi	r24, 0x70	; 112
    3d5a:	19 f0       	breq	.+6      	; 0x3d62 <vfprintf+0x264>
    3d5c:	88 37       	cpi	r24, 0x78	; 120
    3d5e:	21 f0       	breq	.+8      	; 0x3d68 <vfprintf+0x26a>
    3d60:	a9 c0       	rjmp	.+338    	; 0x3eb4 <vfprintf+0x3b6>
    3d62:	e9 2f       	mov	r30, r25
    3d64:	e0 61       	ori	r30, 0x10	; 16
    3d66:	be 2e       	mov	r11, r30
    3d68:	b4 fe       	sbrs	r11, 4
    3d6a:	0d c0       	rjmp	.+26     	; 0x3d86 <vfprintf+0x288>
    3d6c:	fb 2d       	mov	r31, r11
    3d6e:	f4 60       	ori	r31, 0x04	; 4
    3d70:	bf 2e       	mov	r11, r31
    3d72:	09 c0       	rjmp	.+18     	; 0x3d86 <vfprintf+0x288>
    3d74:	34 fe       	sbrs	r3, 4
    3d76:	0a c0       	rjmp	.+20     	; 0x3d8c <vfprintf+0x28e>
    3d78:	29 2f       	mov	r18, r25
    3d7a:	26 60       	ori	r18, 0x06	; 6
    3d7c:	b2 2e       	mov	r11, r18
    3d7e:	06 c0       	rjmp	.+12     	; 0x3d8c <vfprintf+0x28e>
    3d80:	28 e0       	ldi	r18, 0x08	; 8
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	05 c0       	rjmp	.+10     	; 0x3d90 <vfprintf+0x292>
    3d86:	20 e1       	ldi	r18, 0x10	; 16
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	02 c0       	rjmp	.+4      	; 0x3d90 <vfprintf+0x292>
    3d8c:	20 e1       	ldi	r18, 0x10	; 16
    3d8e:	32 e0       	ldi	r19, 0x02	; 2
    3d90:	f8 01       	movw	r30, r16
    3d92:	b7 fe       	sbrs	r11, 7
    3d94:	07 c0       	rjmp	.+14     	; 0x3da4 <vfprintf+0x2a6>
    3d96:	60 81       	ld	r22, Z
    3d98:	71 81       	ldd	r23, Z+1	; 0x01
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	93 81       	ldd	r25, Z+3	; 0x03
    3d9e:	0c 5f       	subi	r16, 0xFC	; 252
    3da0:	1f 4f       	sbci	r17, 0xFF	; 255
    3da2:	06 c0       	rjmp	.+12     	; 0x3db0 <vfprintf+0x2b2>
    3da4:	60 81       	ld	r22, Z
    3da6:	71 81       	ldd	r23, Z+1	; 0x01
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	0e 5f       	subi	r16, 0xFE	; 254
    3dae:	1f 4f       	sbci	r17, 0xFF	; 255
    3db0:	a3 01       	movw	r20, r6
    3db2:	5d d5       	rcall	.+2746   	; 0x486e <__ultoa_invert>
    3db4:	88 2e       	mov	r8, r24
    3db6:	86 18       	sub	r8, r6
    3db8:	fb 2d       	mov	r31, r11
    3dba:	ff 77       	andi	r31, 0x7F	; 127
    3dbc:	3f 2e       	mov	r3, r31
    3dbe:	36 fe       	sbrs	r3, 6
    3dc0:	0d c0       	rjmp	.+26     	; 0x3ddc <vfprintf+0x2de>
    3dc2:	23 2d       	mov	r18, r3
    3dc4:	2e 7f       	andi	r18, 0xFE	; 254
    3dc6:	a2 2e       	mov	r10, r18
    3dc8:	89 14       	cp	r8, r9
    3dca:	58 f4       	brcc	.+22     	; 0x3de2 <vfprintf+0x2e4>
    3dcc:	34 fe       	sbrs	r3, 4
    3dce:	0b c0       	rjmp	.+22     	; 0x3de6 <vfprintf+0x2e8>
    3dd0:	32 fc       	sbrc	r3, 2
    3dd2:	09 c0       	rjmp	.+18     	; 0x3de6 <vfprintf+0x2e8>
    3dd4:	83 2d       	mov	r24, r3
    3dd6:	8e 7e       	andi	r24, 0xEE	; 238
    3dd8:	a8 2e       	mov	r10, r24
    3dda:	05 c0       	rjmp	.+10     	; 0x3de6 <vfprintf+0x2e8>
    3ddc:	b8 2c       	mov	r11, r8
    3dde:	a3 2c       	mov	r10, r3
    3de0:	03 c0       	rjmp	.+6      	; 0x3de8 <vfprintf+0x2ea>
    3de2:	b8 2c       	mov	r11, r8
    3de4:	01 c0       	rjmp	.+2      	; 0x3de8 <vfprintf+0x2ea>
    3de6:	b9 2c       	mov	r11, r9
    3de8:	a4 fe       	sbrs	r10, 4
    3dea:	0f c0       	rjmp	.+30     	; 0x3e0a <vfprintf+0x30c>
    3dec:	fe 01       	movw	r30, r28
    3dee:	e8 0d       	add	r30, r8
    3df0:	f1 1d       	adc	r31, r1
    3df2:	80 81       	ld	r24, Z
    3df4:	80 33       	cpi	r24, 0x30	; 48
    3df6:	21 f4       	brne	.+8      	; 0x3e00 <vfprintf+0x302>
    3df8:	9a 2d       	mov	r25, r10
    3dfa:	99 7e       	andi	r25, 0xE9	; 233
    3dfc:	a9 2e       	mov	r10, r25
    3dfe:	09 c0       	rjmp	.+18     	; 0x3e12 <vfprintf+0x314>
    3e00:	a2 fe       	sbrs	r10, 2
    3e02:	06 c0       	rjmp	.+12     	; 0x3e10 <vfprintf+0x312>
    3e04:	b3 94       	inc	r11
    3e06:	b3 94       	inc	r11
    3e08:	04 c0       	rjmp	.+8      	; 0x3e12 <vfprintf+0x314>
    3e0a:	8a 2d       	mov	r24, r10
    3e0c:	86 78       	andi	r24, 0x86	; 134
    3e0e:	09 f0       	breq	.+2      	; 0x3e12 <vfprintf+0x314>
    3e10:	b3 94       	inc	r11
    3e12:	a3 fc       	sbrc	r10, 3
    3e14:	10 c0       	rjmp	.+32     	; 0x3e36 <vfprintf+0x338>
    3e16:	a0 fe       	sbrs	r10, 0
    3e18:	06 c0       	rjmp	.+12     	; 0x3e26 <vfprintf+0x328>
    3e1a:	b2 14       	cp	r11, r2
    3e1c:	80 f4       	brcc	.+32     	; 0x3e3e <vfprintf+0x340>
    3e1e:	28 0c       	add	r2, r8
    3e20:	92 2c       	mov	r9, r2
    3e22:	9b 18       	sub	r9, r11
    3e24:	0d c0       	rjmp	.+26     	; 0x3e40 <vfprintf+0x342>
    3e26:	b2 14       	cp	r11, r2
    3e28:	58 f4       	brcc	.+22     	; 0x3e40 <vfprintf+0x342>
    3e2a:	b6 01       	movw	r22, r12
    3e2c:	80 e2       	ldi	r24, 0x20	; 32
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	c9 d4       	rcall	.+2450   	; 0x47c4 <fputc>
    3e32:	b3 94       	inc	r11
    3e34:	f8 cf       	rjmp	.-16     	; 0x3e26 <vfprintf+0x328>
    3e36:	b2 14       	cp	r11, r2
    3e38:	18 f4       	brcc	.+6      	; 0x3e40 <vfprintf+0x342>
    3e3a:	2b 18       	sub	r2, r11
    3e3c:	02 c0       	rjmp	.+4      	; 0x3e42 <vfprintf+0x344>
    3e3e:	98 2c       	mov	r9, r8
    3e40:	21 2c       	mov	r2, r1
    3e42:	a4 fe       	sbrs	r10, 4
    3e44:	0f c0       	rjmp	.+30     	; 0x3e64 <vfprintf+0x366>
    3e46:	b6 01       	movw	r22, r12
    3e48:	80 e3       	ldi	r24, 0x30	; 48
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	bb d4       	rcall	.+2422   	; 0x47c4 <fputc>
    3e4e:	a2 fe       	sbrs	r10, 2
    3e50:	16 c0       	rjmp	.+44     	; 0x3e7e <vfprintf+0x380>
    3e52:	a1 fc       	sbrc	r10, 1
    3e54:	03 c0       	rjmp	.+6      	; 0x3e5c <vfprintf+0x35e>
    3e56:	88 e7       	ldi	r24, 0x78	; 120
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	02 c0       	rjmp	.+4      	; 0x3e60 <vfprintf+0x362>
    3e5c:	88 e5       	ldi	r24, 0x58	; 88
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	b6 01       	movw	r22, r12
    3e62:	0c c0       	rjmp	.+24     	; 0x3e7c <vfprintf+0x37e>
    3e64:	8a 2d       	mov	r24, r10
    3e66:	86 78       	andi	r24, 0x86	; 134
    3e68:	51 f0       	breq	.+20     	; 0x3e7e <vfprintf+0x380>
    3e6a:	a1 fe       	sbrs	r10, 1
    3e6c:	02 c0       	rjmp	.+4      	; 0x3e72 <vfprintf+0x374>
    3e6e:	8b e2       	ldi	r24, 0x2B	; 43
    3e70:	01 c0       	rjmp	.+2      	; 0x3e74 <vfprintf+0x376>
    3e72:	80 e2       	ldi	r24, 0x20	; 32
    3e74:	a7 fc       	sbrc	r10, 7
    3e76:	8d e2       	ldi	r24, 0x2D	; 45
    3e78:	b6 01       	movw	r22, r12
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	a3 d4       	rcall	.+2374   	; 0x47c4 <fputc>
    3e7e:	89 14       	cp	r8, r9
    3e80:	30 f4       	brcc	.+12     	; 0x3e8e <vfprintf+0x390>
    3e82:	b6 01       	movw	r22, r12
    3e84:	80 e3       	ldi	r24, 0x30	; 48
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	9d d4       	rcall	.+2362   	; 0x47c4 <fputc>
    3e8a:	9a 94       	dec	r9
    3e8c:	f8 cf       	rjmp	.-16     	; 0x3e7e <vfprintf+0x380>
    3e8e:	8a 94       	dec	r8
    3e90:	f3 01       	movw	r30, r6
    3e92:	e8 0d       	add	r30, r8
    3e94:	f1 1d       	adc	r31, r1
    3e96:	80 81       	ld	r24, Z
    3e98:	b6 01       	movw	r22, r12
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	93 d4       	rcall	.+2342   	; 0x47c4 <fputc>
    3e9e:	81 10       	cpse	r8, r1
    3ea0:	f6 cf       	rjmp	.-20     	; 0x3e8e <vfprintf+0x390>
    3ea2:	22 20       	and	r2, r2
    3ea4:	09 f4       	brne	.+2      	; 0x3ea8 <vfprintf+0x3aa>
    3ea6:	4e ce       	rjmp	.-868    	; 0x3b44 <vfprintf+0x46>
    3ea8:	b6 01       	movw	r22, r12
    3eaa:	80 e2       	ldi	r24, 0x20	; 32
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	8a d4       	rcall	.+2324   	; 0x47c4 <fputc>
    3eb0:	2a 94       	dec	r2
    3eb2:	f7 cf       	rjmp	.-18     	; 0x3ea2 <vfprintf+0x3a4>
    3eb4:	f6 01       	movw	r30, r12
    3eb6:	86 81       	ldd	r24, Z+6	; 0x06
    3eb8:	97 81       	ldd	r25, Z+7	; 0x07
    3eba:	02 c0       	rjmp	.+4      	; 0x3ec0 <vfprintf+0x3c2>
    3ebc:	8f ef       	ldi	r24, 0xFF	; 255
    3ebe:	9f ef       	ldi	r25, 0xFF	; 255
    3ec0:	2b 96       	adiw	r28, 0x0b	; 11
    3ec2:	cd bf       	out	0x3d, r28	; 61
    3ec4:	de bf       	out	0x3e, r29	; 62
    3ec6:	df 91       	pop	r29
    3ec8:	cf 91       	pop	r28
    3eca:	1f 91       	pop	r17
    3ecc:	0f 91       	pop	r16
    3ece:	ff 90       	pop	r15
    3ed0:	ef 90       	pop	r14
    3ed2:	df 90       	pop	r13
    3ed4:	cf 90       	pop	r12
    3ed6:	bf 90       	pop	r11
    3ed8:	af 90       	pop	r10
    3eda:	9f 90       	pop	r9
    3edc:	8f 90       	pop	r8
    3ede:	7f 90       	pop	r7
    3ee0:	6f 90       	pop	r6
    3ee2:	5f 90       	pop	r5
    3ee4:	4f 90       	pop	r4
    3ee6:	3f 90       	pop	r3
    3ee8:	2f 90       	pop	r2
    3eea:	08 95       	ret

00003eec <putval>:
    3eec:	20 fd       	sbrc	r18, 0
    3eee:	09 c0       	rjmp	.+18     	; 0x3f02 <putval+0x16>
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	23 fd       	sbrc	r18, 3
    3ef4:	05 c0       	rjmp	.+10     	; 0x3f00 <putval+0x14>
    3ef6:	22 ff       	sbrs	r18, 2
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <putval+0x12>
    3efa:	73 83       	std	Z+3, r23	; 0x03
    3efc:	62 83       	std	Z+2, r22	; 0x02
    3efe:	51 83       	std	Z+1, r21	; 0x01
    3f00:	40 83       	st	Z, r20
    3f02:	08 95       	ret

00003f04 <mulacc>:
    3f04:	44 fd       	sbrc	r20, 4
    3f06:	17 c0       	rjmp	.+46     	; 0x3f36 <mulacc+0x32>
    3f08:	46 fd       	sbrc	r20, 6
    3f0a:	17 c0       	rjmp	.+46     	; 0x3f3a <mulacc+0x36>
    3f0c:	ab 01       	movw	r20, r22
    3f0e:	bc 01       	movw	r22, r24
    3f10:	da 01       	movw	r26, r20
    3f12:	fb 01       	movw	r30, r22
    3f14:	aa 0f       	add	r26, r26
    3f16:	bb 1f       	adc	r27, r27
    3f18:	ee 1f       	adc	r30, r30
    3f1a:	ff 1f       	adc	r31, r31
    3f1c:	10 94       	com	r1
    3f1e:	d1 f7       	brne	.-12     	; 0x3f14 <mulacc+0x10>
    3f20:	4a 0f       	add	r20, r26
    3f22:	5b 1f       	adc	r21, r27
    3f24:	6e 1f       	adc	r22, r30
    3f26:	7f 1f       	adc	r23, r31
    3f28:	cb 01       	movw	r24, r22
    3f2a:	ba 01       	movw	r22, r20
    3f2c:	66 0f       	add	r22, r22
    3f2e:	77 1f       	adc	r23, r23
    3f30:	88 1f       	adc	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	09 c0       	rjmp	.+18     	; 0x3f48 <mulacc+0x44>
    3f36:	33 e0       	ldi	r19, 0x03	; 3
    3f38:	01 c0       	rjmp	.+2      	; 0x3f3c <mulacc+0x38>
    3f3a:	34 e0       	ldi	r19, 0x04	; 4
    3f3c:	66 0f       	add	r22, r22
    3f3e:	77 1f       	adc	r23, r23
    3f40:	88 1f       	adc	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	31 50       	subi	r19, 0x01	; 1
    3f46:	d1 f7       	brne	.-12     	; 0x3f3c <mulacc+0x38>
    3f48:	62 0f       	add	r22, r18
    3f4a:	71 1d       	adc	r23, r1
    3f4c:	81 1d       	adc	r24, r1
    3f4e:	91 1d       	adc	r25, r1
    3f50:	08 95       	ret

00003f52 <skip_spaces>:
    3f52:	0f 93       	push	r16
    3f54:	1f 93       	push	r17
    3f56:	cf 93       	push	r28
    3f58:	df 93       	push	r29
    3f5a:	8c 01       	movw	r16, r24
    3f5c:	c8 01       	movw	r24, r16
    3f5e:	f4 d3       	rcall	.+2024   	; 0x4748 <fgetc>
    3f60:	ec 01       	movw	r28, r24
    3f62:	97 fd       	sbrc	r25, 7
    3f64:	06 c0       	rjmp	.+12     	; 0x3f72 <skip_spaces+0x20>
    3f66:	c0 d3       	rcall	.+1920   	; 0x46e8 <isspace>
    3f68:	89 2b       	or	r24, r25
    3f6a:	c1 f7       	brne	.-16     	; 0x3f5c <skip_spaces+0xa>
    3f6c:	b8 01       	movw	r22, r16
    3f6e:	ce 01       	movw	r24, r28
    3f70:	65 d4       	rcall	.+2250   	; 0x483c <ungetc>
    3f72:	ce 01       	movw	r24, r28
    3f74:	df 91       	pop	r29
    3f76:	cf 91       	pop	r28
    3f78:	1f 91       	pop	r17
    3f7a:	0f 91       	pop	r16
    3f7c:	08 95       	ret

00003f7e <conv_int>:
    3f7e:	8f 92       	push	r8
    3f80:	9f 92       	push	r9
    3f82:	af 92       	push	r10
    3f84:	bf 92       	push	r11
    3f86:	ef 92       	push	r14
    3f88:	ff 92       	push	r15
    3f8a:	0f 93       	push	r16
    3f8c:	1f 93       	push	r17
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	8c 01       	movw	r16, r24
    3f94:	d6 2f       	mov	r29, r22
    3f96:	7a 01       	movw	r14, r20
    3f98:	b2 2e       	mov	r11, r18
    3f9a:	d6 d3       	rcall	.+1964   	; 0x4748 <fgetc>
    3f9c:	9c 01       	movw	r18, r24
    3f9e:	33 27       	eor	r19, r19
    3fa0:	2b 32       	cpi	r18, 0x2B	; 43
    3fa2:	31 05       	cpc	r19, r1
    3fa4:	31 f0       	breq	.+12     	; 0x3fb2 <conv_int+0x34>
    3fa6:	2d 32       	cpi	r18, 0x2D	; 45
    3fa8:	31 05       	cpc	r19, r1
    3faa:	59 f4       	brne	.+22     	; 0x3fc2 <conv_int+0x44>
    3fac:	8b 2d       	mov	r24, r11
    3fae:	80 68       	ori	r24, 0x80	; 128
    3fb0:	b8 2e       	mov	r11, r24
    3fb2:	d1 50       	subi	r29, 0x01	; 1
    3fb4:	11 f4       	brne	.+4      	; 0x3fba <conv_int+0x3c>
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	61 c0       	rjmp	.+194    	; 0x407c <__stack+0x7d>
    3fba:	c8 01       	movw	r24, r16
    3fbc:	c5 d3       	rcall	.+1930   	; 0x4748 <fgetc>
    3fbe:	97 fd       	sbrc	r25, 7
    3fc0:	fa cf       	rjmp	.-12     	; 0x3fb6 <conv_int+0x38>
    3fc2:	cb 2d       	mov	r28, r11
    3fc4:	cd 7f       	andi	r28, 0xFD	; 253
    3fc6:	2b 2d       	mov	r18, r11
    3fc8:	20 73       	andi	r18, 0x30	; 48
    3fca:	f9 f4       	brne	.+62     	; 0x400a <__stack+0xb>
    3fcc:	80 33       	cpi	r24, 0x30	; 48
    3fce:	e9 f4       	brne	.+58     	; 0x400a <__stack+0xb>
    3fd0:	aa 24       	eor	r10, r10
    3fd2:	aa 94       	dec	r10
    3fd4:	ad 0e       	add	r10, r29
    3fd6:	09 f4       	brne	.+2      	; 0x3fda <conv_int+0x5c>
    3fd8:	3e c0       	rjmp	.+124    	; 0x4056 <__stack+0x57>
    3fda:	c8 01       	movw	r24, r16
    3fdc:	b5 d3       	rcall	.+1898   	; 0x4748 <fgetc>
    3fde:	97 fd       	sbrc	r25, 7
    3fe0:	3a c0       	rjmp	.+116    	; 0x4056 <__stack+0x57>
    3fe2:	9c 01       	movw	r18, r24
    3fe4:	2f 7d       	andi	r18, 0xDF	; 223
    3fe6:	33 27       	eor	r19, r19
    3fe8:	28 35       	cpi	r18, 0x58	; 88
    3fea:	31 05       	cpc	r19, r1
    3fec:	41 f4       	brne	.+16     	; 0x3ffe <conv_int+0x80>
    3fee:	c2 64       	ori	r28, 0x42	; 66
    3ff0:	d2 50       	subi	r29, 0x02	; 2
    3ff2:	89 f1       	breq	.+98     	; 0x4056 <__stack+0x57>
    3ff4:	c8 01       	movw	r24, r16
    3ff6:	a8 d3       	rcall	.+1872   	; 0x4748 <fgetc>
    3ff8:	97 ff       	sbrs	r25, 7
    3ffa:	07 c0       	rjmp	.+14     	; 0x400a <__stack+0xb>
    3ffc:	2c c0       	rjmp	.+88     	; 0x4056 <__stack+0x57>
    3ffe:	b6 fe       	sbrs	r11, 6
    4000:	02 c0       	rjmp	.+4      	; 0x4006 <__stack+0x7>
    4002:	c2 60       	ori	r28, 0x02	; 2
    4004:	01 c0       	rjmp	.+2      	; 0x4008 <__stack+0x9>
    4006:	c2 61       	ori	r28, 0x12	; 18
    4008:	da 2d       	mov	r29, r10
    400a:	81 2c       	mov	r8, r1
    400c:	91 2c       	mov	r9, r1
    400e:	54 01       	movw	r10, r8
    4010:	20 ed       	ldi	r18, 0xD0	; 208
    4012:	28 0f       	add	r18, r24
    4014:	28 30       	cpi	r18, 0x08	; 8
    4016:	78 f0       	brcs	.+30     	; 0x4036 <__stack+0x37>
    4018:	c4 ff       	sbrs	r28, 4
    401a:	03 c0       	rjmp	.+6      	; 0x4022 <__stack+0x23>
    401c:	b8 01       	movw	r22, r16
    401e:	0e d4       	rcall	.+2076   	; 0x483c <ungetc>
    4020:	17 c0       	rjmp	.+46     	; 0x4050 <__stack+0x51>
    4022:	2a 30       	cpi	r18, 0x0A	; 10
    4024:	40 f0       	brcs	.+16     	; 0x4036 <__stack+0x37>
    4026:	c6 ff       	sbrs	r28, 6
    4028:	f9 cf       	rjmp	.-14     	; 0x401c <__stack+0x1d>
    402a:	2f 7d       	andi	r18, 0xDF	; 223
    402c:	3f ee       	ldi	r19, 0xEF	; 239
    402e:	32 0f       	add	r19, r18
    4030:	36 30       	cpi	r19, 0x06	; 6
    4032:	a0 f7       	brcc	.-24     	; 0x401c <__stack+0x1d>
    4034:	27 50       	subi	r18, 0x07	; 7
    4036:	4c 2f       	mov	r20, r28
    4038:	c5 01       	movw	r24, r10
    403a:	b4 01       	movw	r22, r8
    403c:	63 df       	rcall	.-314    	; 0x3f04 <mulacc>
    403e:	4b 01       	movw	r8, r22
    4040:	5c 01       	movw	r10, r24
    4042:	c2 60       	ori	r28, 0x02	; 2
    4044:	d1 50       	subi	r29, 0x01	; 1
    4046:	51 f0       	breq	.+20     	; 0x405c <__stack+0x5d>
    4048:	c8 01       	movw	r24, r16
    404a:	7e d3       	rcall	.+1788   	; 0x4748 <fgetc>
    404c:	97 ff       	sbrs	r25, 7
    404e:	e0 cf       	rjmp	.-64     	; 0x4010 <__stack+0x11>
    4050:	c1 fd       	sbrc	r28, 1
    4052:	04 c0       	rjmp	.+8      	; 0x405c <__stack+0x5d>
    4054:	b0 cf       	rjmp	.-160    	; 0x3fb6 <conv_int+0x38>
    4056:	81 2c       	mov	r8, r1
    4058:	91 2c       	mov	r9, r1
    405a:	54 01       	movw	r10, r8
    405c:	c7 ff       	sbrs	r28, 7
    405e:	08 c0       	rjmp	.+16     	; 0x4070 <__stack+0x71>
    4060:	b0 94       	com	r11
    4062:	a0 94       	com	r10
    4064:	90 94       	com	r9
    4066:	80 94       	com	r8
    4068:	81 1c       	adc	r8, r1
    406a:	91 1c       	adc	r9, r1
    406c:	a1 1c       	adc	r10, r1
    406e:	b1 1c       	adc	r11, r1
    4070:	2c 2f       	mov	r18, r28
    4072:	b5 01       	movw	r22, r10
    4074:	a4 01       	movw	r20, r8
    4076:	c7 01       	movw	r24, r14
    4078:	39 df       	rcall	.-398    	; 0x3eec <putval>
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	df 91       	pop	r29
    407e:	cf 91       	pop	r28
    4080:	1f 91       	pop	r17
    4082:	0f 91       	pop	r16
    4084:	ff 90       	pop	r15
    4086:	ef 90       	pop	r14
    4088:	bf 90       	pop	r11
    408a:	af 90       	pop	r10
    408c:	9f 90       	pop	r9
    408e:	8f 90       	pop	r8
    4090:	08 95       	ret

00004092 <conv_brk>:
    4092:	5f 92       	push	r5
    4094:	6f 92       	push	r6
    4096:	7f 92       	push	r7
    4098:	8f 92       	push	r8
    409a:	9f 92       	push	r9
    409c:	af 92       	push	r10
    409e:	bf 92       	push	r11
    40a0:	cf 92       	push	r12
    40a2:	df 92       	push	r13
    40a4:	ef 92       	push	r14
    40a6:	ff 92       	push	r15
    40a8:	0f 93       	push	r16
    40aa:	1f 93       	push	r17
    40ac:	cf 93       	push	r28
    40ae:	df 93       	push	r29
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
    40b4:	a0 97       	sbiw	r28, 0x20	; 32
    40b6:	cd bf       	out	0x3d, r28	; 61
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	5c 01       	movw	r10, r24
    40bc:	96 2e       	mov	r9, r22
    40be:	7a 01       	movw	r14, r20
    40c0:	f9 01       	movw	r30, r18
    40c2:	8e 01       	movw	r16, r28
    40c4:	0f 5f       	subi	r16, 0xFF	; 255
    40c6:	1f 4f       	sbci	r17, 0xFF	; 255
    40c8:	68 01       	movw	r12, r16
    40ca:	80 e2       	ldi	r24, 0x20	; 32
    40cc:	d8 01       	movw	r26, r16
    40ce:	1d 92       	st	X+, r1
    40d0:	8a 95       	dec	r24
    40d2:	e9 f7       	brne	.-6      	; 0x40ce <conv_brk+0x3c>
    40d4:	d5 01       	movw	r26, r10
    40d6:	13 96       	adiw	r26, 0x03	; 3
    40d8:	8c 90       	ld	r8, X
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	61 2c       	mov	r6, r1
    40e0:	71 2c       	mov	r7, r1
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	61 e0       	ldi	r22, 0x01	; 1
    40e6:	70 e0       	ldi	r23, 0x00	; 0
    40e8:	83 fc       	sbrc	r8, 3
    40ea:	25 91       	lpm	r18, Z+
    40ec:	83 fe       	sbrs	r8, 3
    40ee:	21 91       	ld	r18, Z+
    40f0:	8f 01       	movw	r16, r30
    40f2:	52 2e       	mov	r5, r18
    40f4:	21 11       	cpse	r18, r1
    40f6:	03 c0       	rjmp	.+6      	; 0x40fe <conv_brk+0x6c>
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	90 c0       	rjmp	.+288    	; 0x421e <conv_brk+0x18c>
    40fe:	2e 35       	cpi	r18, 0x5E	; 94
    4100:	11 f4       	brne	.+4      	; 0x4106 <conv_brk+0x74>
    4102:	00 97       	sbiw	r24, 0x00	; 0
    4104:	51 f1       	breq	.+84     	; 0x415a <conv_brk+0xc8>
    4106:	43 2f       	mov	r20, r19
    4108:	50 e0       	ldi	r21, 0x00	; 0
    410a:	48 17       	cp	r20, r24
    410c:	59 07       	cpc	r21, r25
    410e:	3c f4       	brge	.+14     	; 0x411e <conv_brk+0x8c>
    4110:	2d 35       	cpi	r18, 0x5D	; 93
    4112:	59 f1       	breq	.+86     	; 0x416a <conv_brk+0xd8>
    4114:	2d 32       	cpi	r18, 0x2D	; 45
    4116:	19 f4       	brne	.+6      	; 0x411e <conv_brk+0x8c>
    4118:	77 20       	and	r7, r7
    411a:	09 f1       	breq	.+66     	; 0x415e <conv_brk+0xcc>
    411c:	03 c0       	rjmp	.+6      	; 0x4124 <conv_brk+0x92>
    411e:	77 20       	and	r7, r7
    4120:	09 f4       	brne	.+2      	; 0x4124 <conv_brk+0x92>
    4122:	68 c0       	rjmp	.+208    	; 0x41f4 <conv_brk+0x162>
    4124:	45 2d       	mov	r20, r5
    4126:	46 95       	lsr	r20
    4128:	46 95       	lsr	r20
    412a:	46 95       	lsr	r20
    412c:	d6 01       	movw	r26, r12
    412e:	a4 0f       	add	r26, r20
    4130:	b1 1d       	adc	r27, r1
    4132:	45 2d       	mov	r20, r5
    4134:	47 70       	andi	r20, 0x07	; 7
    4136:	8b 01       	movw	r16, r22
    4138:	02 c0       	rjmp	.+4      	; 0x413e <conv_brk+0xac>
    413a:	00 0f       	add	r16, r16
    413c:	11 1f       	adc	r17, r17
    413e:	4a 95       	dec	r20
    4140:	e2 f7       	brpl	.-8      	; 0x413a <conv_brk+0xa8>
    4142:	a8 01       	movw	r20, r16
    4144:	5c 91       	ld	r21, X
    4146:	45 2b       	or	r20, r21
    4148:	4c 93       	st	X, r20
    414a:	65 14       	cp	r6, r5
    414c:	59 f0       	breq	.+22     	; 0x4164 <conv_brk+0xd2>
    414e:	56 14       	cp	r5, r6
    4150:	10 f4       	brcc	.+4      	; 0x4156 <conv_brk+0xc4>
    4152:	53 94       	inc	r5
    4154:	e7 cf       	rjmp	.-50     	; 0x4124 <conv_brk+0x92>
    4156:	5a 94       	dec	r5
    4158:	e5 cf       	rjmp	.-54     	; 0x4124 <conv_brk+0x92>
    415a:	31 e0       	ldi	r19, 0x01	; 1
    415c:	04 c0       	rjmp	.+8      	; 0x4166 <conv_brk+0xd4>
    415e:	77 24       	eor	r7, r7
    4160:	73 94       	inc	r7
    4162:	01 c0       	rjmp	.+2      	; 0x4166 <conv_brk+0xd4>
    4164:	71 2c       	mov	r7, r1
    4166:	01 96       	adiw	r24, 0x01	; 1
    4168:	bf cf       	rjmp	.-130    	; 0x40e8 <conv_brk+0x56>
    416a:	77 20       	and	r7, r7
    416c:	19 f0       	breq	.+6      	; 0x4174 <conv_brk+0xe2>
    416e:	8e 81       	ldd	r24, Y+6	; 0x06
    4170:	80 62       	ori	r24, 0x20	; 32
    4172:	8e 83       	std	Y+6, r24	; 0x06
    4174:	31 11       	cpse	r19, r1
    4176:	03 c0       	rjmp	.+6      	; 0x417e <conv_brk+0xec>
    4178:	88 24       	eor	r8, r8
    417a:	83 94       	inc	r8
    417c:	17 c0       	rjmp	.+46     	; 0x41ac <conv_brk+0x11a>
    417e:	f6 01       	movw	r30, r12
    4180:	9e 01       	movw	r18, r28
    4182:	2f 5d       	subi	r18, 0xDF	; 223
    4184:	3f 4f       	sbci	r19, 0xFF	; 255
    4186:	80 81       	ld	r24, Z
    4188:	80 95       	com	r24
    418a:	81 93       	st	Z+, r24
    418c:	2e 17       	cp	r18, r30
    418e:	3f 07       	cpc	r19, r31
    4190:	d1 f7       	brne	.-12     	; 0x4186 <conv_brk+0xf4>
    4192:	f2 cf       	rjmp	.-28     	; 0x4178 <conv_brk+0xe6>
    4194:	e1 14       	cp	r14, r1
    4196:	f1 04       	cpc	r15, r1
    4198:	29 f0       	breq	.+10     	; 0x41a4 <conv_brk+0x112>
    419a:	d7 01       	movw	r26, r14
    419c:	8c 93       	st	X, r24
    419e:	f7 01       	movw	r30, r14
    41a0:	31 96       	adiw	r30, 0x01	; 1
    41a2:	7f 01       	movw	r14, r30
    41a4:	9a 94       	dec	r9
    41a6:	81 2c       	mov	r8, r1
    41a8:	99 20       	and	r9, r9
    41aa:	e9 f0       	breq	.+58     	; 0x41e6 <conv_brk+0x154>
    41ac:	c5 01       	movw	r24, r10
    41ae:	cc d2       	rcall	.+1432   	; 0x4748 <fgetc>
    41b0:	97 fd       	sbrc	r25, 7
    41b2:	17 c0       	rjmp	.+46     	; 0x41e2 <conv_brk+0x150>
    41b4:	fc 01       	movw	r30, r24
    41b6:	ff 27       	eor	r31, r31
    41b8:	23 e0       	ldi	r18, 0x03	; 3
    41ba:	f5 95       	asr	r31
    41bc:	e7 95       	ror	r30
    41be:	2a 95       	dec	r18
    41c0:	e1 f7       	brne	.-8      	; 0x41ba <conv_brk+0x128>
    41c2:	ec 0d       	add	r30, r12
    41c4:	fd 1d       	adc	r31, r13
    41c6:	20 81       	ld	r18, Z
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	ac 01       	movw	r20, r24
    41cc:	47 70       	andi	r20, 0x07	; 7
    41ce:	55 27       	eor	r21, r21
    41d0:	02 c0       	rjmp	.+4      	; 0x41d6 <conv_brk+0x144>
    41d2:	35 95       	asr	r19
    41d4:	27 95       	ror	r18
    41d6:	4a 95       	dec	r20
    41d8:	e2 f7       	brpl	.-8      	; 0x41d2 <conv_brk+0x140>
    41da:	20 fd       	sbrc	r18, 0
    41dc:	db cf       	rjmp	.-74     	; 0x4194 <conv_brk+0x102>
    41de:	b5 01       	movw	r22, r10
    41e0:	2d d3       	rcall	.+1626   	; 0x483c <ungetc>
    41e2:	81 10       	cpse	r8, r1
    41e4:	89 cf       	rjmp	.-238    	; 0x40f8 <conv_brk+0x66>
    41e6:	e1 14       	cp	r14, r1
    41e8:	f1 04       	cpc	r15, r1
    41ea:	11 f0       	breq	.+4      	; 0x41f0 <conv_brk+0x15e>
    41ec:	d7 01       	movw	r26, r14
    41ee:	1c 92       	st	X, r1
    41f0:	c8 01       	movw	r24, r16
    41f2:	15 c0       	rjmp	.+42     	; 0x421e <conv_brk+0x18c>
    41f4:	42 2f       	mov	r20, r18
    41f6:	46 95       	lsr	r20
    41f8:	46 95       	lsr	r20
    41fa:	46 95       	lsr	r20
    41fc:	d6 01       	movw	r26, r12
    41fe:	a4 0f       	add	r26, r20
    4200:	b1 1d       	adc	r27, r1
    4202:	42 2f       	mov	r20, r18
    4204:	47 70       	andi	r20, 0x07	; 7
    4206:	8b 01       	movw	r16, r22
    4208:	02 c0       	rjmp	.+4      	; 0x420e <conv_brk+0x17c>
    420a:	00 0f       	add	r16, r16
    420c:	11 1f       	adc	r17, r17
    420e:	4a 95       	dec	r20
    4210:	e2 f7       	brpl	.-8      	; 0x420a <conv_brk+0x178>
    4212:	a8 01       	movw	r20, r16
    4214:	5c 91       	ld	r21, X
    4216:	45 2b       	or	r20, r21
    4218:	4c 93       	st	X, r20
    421a:	62 2e       	mov	r6, r18
    421c:	a4 cf       	rjmp	.-184    	; 0x4166 <conv_brk+0xd4>
    421e:	a0 96       	adiw	r28, 0x20	; 32
    4220:	cd bf       	out	0x3d, r28	; 61
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	df 91       	pop	r29
    4226:	cf 91       	pop	r28
    4228:	1f 91       	pop	r17
    422a:	0f 91       	pop	r16
    422c:	ff 90       	pop	r15
    422e:	ef 90       	pop	r14
    4230:	df 90       	pop	r13
    4232:	cf 90       	pop	r12
    4234:	bf 90       	pop	r11
    4236:	af 90       	pop	r10
    4238:	9f 90       	pop	r9
    423a:	8f 90       	pop	r8
    423c:	7f 90       	pop	r7
    423e:	6f 90       	pop	r6
    4240:	5f 90       	pop	r5
    4242:	08 95       	ret

00004244 <vfscanf>:
    4244:	5f 92       	push	r5
    4246:	6f 92       	push	r6
    4248:	7f 92       	push	r7
    424a:	8f 92       	push	r8
    424c:	9f 92       	push	r9
    424e:	af 92       	push	r10
    4250:	bf 92       	push	r11
    4252:	cf 92       	push	r12
    4254:	df 92       	push	r13
    4256:	ef 92       	push	r14
    4258:	ff 92       	push	r15
    425a:	0f 93       	push	r16
    425c:	1f 93       	push	r17
    425e:	cf 93       	push	r28
    4260:	df 93       	push	r29
    4262:	6c 01       	movw	r12, r24
    4264:	eb 01       	movw	r28, r22
    4266:	5a 01       	movw	r10, r20
    4268:	fc 01       	movw	r30, r24
    426a:	16 82       	std	Z+6, r1	; 0x06
    426c:	17 82       	std	Z+7, r1	; 0x07
    426e:	51 2c       	mov	r5, r1
    4270:	f6 01       	movw	r30, r12
    4272:	e3 80       	ldd	r14, Z+3	; 0x03
    4274:	fe 01       	movw	r30, r28
    4276:	e3 fc       	sbrc	r14, 3
    4278:	85 91       	lpm	r24, Z+
    427a:	e3 fe       	sbrs	r14, 3
    427c:	81 91       	ld	r24, Z+
    427e:	18 2f       	mov	r17, r24
    4280:	ef 01       	movw	r28, r30
    4282:	88 23       	and	r24, r24
    4284:	09 f4       	brne	.+2      	; 0x4288 <vfscanf+0x44>
    4286:	e0 c0       	rjmp	.+448    	; 0x4448 <vfscanf+0x204>
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	2e d2       	rcall	.+1116   	; 0x46e8 <isspace>
    428c:	89 2b       	or	r24, r25
    428e:	19 f0       	breq	.+6      	; 0x4296 <vfscanf+0x52>
    4290:	c6 01       	movw	r24, r12
    4292:	5f de       	rcall	.-834    	; 0x3f52 <skip_spaces>
    4294:	ed cf       	rjmp	.-38     	; 0x4270 <vfscanf+0x2c>
    4296:	15 32       	cpi	r17, 0x25	; 37
    4298:	41 f4       	brne	.+16     	; 0x42aa <vfscanf+0x66>
    429a:	fe 01       	movw	r30, r28
    429c:	e3 fc       	sbrc	r14, 3
    429e:	15 91       	lpm	r17, Z+
    42a0:	e3 fe       	sbrs	r14, 3
    42a2:	11 91       	ld	r17, Z+
    42a4:	ef 01       	movw	r28, r30
    42a6:	15 32       	cpi	r17, 0x25	; 37
    42a8:	71 f4       	brne	.+28     	; 0x42c6 <vfscanf+0x82>
    42aa:	c6 01       	movw	r24, r12
    42ac:	4d d2       	rcall	.+1178   	; 0x4748 <fgetc>
    42ae:	97 fd       	sbrc	r25, 7
    42b0:	c9 c0       	rjmp	.+402    	; 0x4444 <vfscanf+0x200>
    42b2:	41 2f       	mov	r20, r17
    42b4:	50 e0       	ldi	r21, 0x00	; 0
    42b6:	9c 01       	movw	r18, r24
    42b8:	33 27       	eor	r19, r19
    42ba:	24 17       	cp	r18, r20
    42bc:	35 07       	cpc	r19, r21
    42be:	c1 f2       	breq	.-80     	; 0x4270 <vfscanf+0x2c>
    42c0:	b6 01       	movw	r22, r12
    42c2:	bc d2       	rcall	.+1400   	; 0x483c <ungetc>
    42c4:	c1 c0       	rjmp	.+386    	; 0x4448 <vfscanf+0x204>
    42c6:	1a 32       	cpi	r17, 0x2A	; 42
    42c8:	39 f4       	brne	.+14     	; 0x42d8 <vfscanf+0x94>
    42ca:	e3 fc       	sbrc	r14, 3
    42cc:	15 91       	lpm	r17, Z+
    42ce:	e3 fe       	sbrs	r14, 3
    42d0:	11 91       	ld	r17, Z+
    42d2:	ef 01       	movw	r28, r30
    42d4:	01 e0       	ldi	r16, 0x01	; 1
    42d6:	01 c0       	rjmp	.+2      	; 0x42da <vfscanf+0x96>
    42d8:	00 e0       	ldi	r16, 0x00	; 0
    42da:	f1 2c       	mov	r15, r1
    42dc:	20 ed       	ldi	r18, 0xD0	; 208
    42de:	21 0f       	add	r18, r17
    42e0:	2a 30       	cpi	r18, 0x0A	; 10
    42e2:	78 f4       	brcc	.+30     	; 0x4302 <vfscanf+0xbe>
    42e4:	02 60       	ori	r16, 0x02	; 2
    42e6:	6f 2d       	mov	r22, r15
    42e8:	70 e0       	ldi	r23, 0x00	; 0
    42ea:	80 e0       	ldi	r24, 0x00	; 0
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	40 e2       	ldi	r20, 0x20	; 32
    42f0:	09 de       	rcall	.-1006   	; 0x3f04 <mulacc>
    42f2:	f6 2e       	mov	r15, r22
    42f4:	fe 01       	movw	r30, r28
    42f6:	e3 fc       	sbrc	r14, 3
    42f8:	15 91       	lpm	r17, Z+
    42fa:	e3 fe       	sbrs	r14, 3
    42fc:	11 91       	ld	r17, Z+
    42fe:	ef 01       	movw	r28, r30
    4300:	ed cf       	rjmp	.-38     	; 0x42dc <vfscanf+0x98>
    4302:	01 ff       	sbrs	r16, 1
    4304:	03 c0       	rjmp	.+6      	; 0x430c <vfscanf+0xc8>
    4306:	f1 10       	cpse	r15, r1
    4308:	03 c0       	rjmp	.+6      	; 0x4310 <vfscanf+0xcc>
    430a:	9e c0       	rjmp	.+316    	; 0x4448 <vfscanf+0x204>
    430c:	ff 24       	eor	r15, r15
    430e:	fa 94       	dec	r15
    4310:	18 36       	cpi	r17, 0x68	; 104
    4312:	19 f0       	breq	.+6      	; 0x431a <vfscanf+0xd6>
    4314:	1c 36       	cpi	r17, 0x6C	; 108
    4316:	51 f0       	breq	.+20     	; 0x432c <vfscanf+0xe8>
    4318:	10 c0       	rjmp	.+32     	; 0x433a <vfscanf+0xf6>
    431a:	fe 01       	movw	r30, r28
    431c:	e3 fc       	sbrc	r14, 3
    431e:	15 91       	lpm	r17, Z+
    4320:	e3 fe       	sbrs	r14, 3
    4322:	11 91       	ld	r17, Z+
    4324:	ef 01       	movw	r28, r30
    4326:	18 36       	cpi	r17, 0x68	; 104
    4328:	41 f4       	brne	.+16     	; 0x433a <vfscanf+0xf6>
    432a:	08 60       	ori	r16, 0x08	; 8
    432c:	04 60       	ori	r16, 0x04	; 4
    432e:	fe 01       	movw	r30, r28
    4330:	e3 fc       	sbrc	r14, 3
    4332:	15 91       	lpm	r17, Z+
    4334:	e3 fe       	sbrs	r14, 3
    4336:	11 91       	ld	r17, Z+
    4338:	ef 01       	movw	r28, r30
    433a:	11 23       	and	r17, r17
    433c:	09 f4       	brne	.+2      	; 0x4340 <vfscanf+0xfc>
    433e:	84 c0       	rjmp	.+264    	; 0x4448 <vfscanf+0x204>
    4340:	61 2f       	mov	r22, r17
    4342:	70 e0       	ldi	r23, 0x00	; 0
    4344:	88 ee       	ldi	r24, 0xE8	; 232
    4346:	92 e0       	ldi	r25, 0x02	; 2
    4348:	d7 d1       	rcall	.+942    	; 0x46f8 <strchr_P>
    434a:	89 2b       	or	r24, r25
    434c:	09 f4       	brne	.+2      	; 0x4350 <vfscanf+0x10c>
    434e:	7c c0       	rjmp	.+248    	; 0x4448 <vfscanf+0x204>
    4350:	00 fd       	sbrc	r16, 0
    4352:	07 c0       	rjmp	.+14     	; 0x4362 <vfscanf+0x11e>
    4354:	f5 01       	movw	r30, r10
    4356:	80 80       	ld	r8, Z
    4358:	91 80       	ldd	r9, Z+1	; 0x01
    435a:	c5 01       	movw	r24, r10
    435c:	02 96       	adiw	r24, 0x02	; 2
    435e:	5c 01       	movw	r10, r24
    4360:	02 c0       	rjmp	.+4      	; 0x4366 <vfscanf+0x122>
    4362:	81 2c       	mov	r8, r1
    4364:	91 2c       	mov	r9, r1
    4366:	1e 36       	cpi	r17, 0x6E	; 110
    4368:	49 f4       	brne	.+18     	; 0x437c <vfscanf+0x138>
    436a:	f6 01       	movw	r30, r12
    436c:	46 81       	ldd	r20, Z+6	; 0x06
    436e:	57 81       	ldd	r21, Z+7	; 0x07
    4370:	60 e0       	ldi	r22, 0x00	; 0
    4372:	70 e0       	ldi	r23, 0x00	; 0
    4374:	20 2f       	mov	r18, r16
    4376:	c4 01       	movw	r24, r8
    4378:	b9 dd       	rcall	.-1166   	; 0x3eec <putval>
    437a:	7a cf       	rjmp	.-268    	; 0x4270 <vfscanf+0x2c>
    437c:	13 36       	cpi	r17, 0x63	; 99
    437e:	a1 f4       	brne	.+40     	; 0x43a8 <vfscanf+0x164>
    4380:	01 fd       	sbrc	r16, 1
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <vfscanf+0x144>
    4384:	ff 24       	eor	r15, r15
    4386:	f3 94       	inc	r15
    4388:	c6 01       	movw	r24, r12
    438a:	de d1       	rcall	.+956    	; 0x4748 <fgetc>
    438c:	97 fd       	sbrc	r25, 7
    438e:	5a c0       	rjmp	.+180    	; 0x4444 <vfscanf+0x200>
    4390:	81 14       	cp	r8, r1
    4392:	91 04       	cpc	r9, r1
    4394:	29 f0       	breq	.+10     	; 0x43a0 <vfscanf+0x15c>
    4396:	f4 01       	movw	r30, r8
    4398:	80 83       	st	Z, r24
    439a:	c4 01       	movw	r24, r8
    439c:	01 96       	adiw	r24, 0x01	; 1
    439e:	4c 01       	movw	r8, r24
    43a0:	fa 94       	dec	r15
    43a2:	f1 10       	cpse	r15, r1
    43a4:	f1 cf       	rjmp	.-30     	; 0x4388 <vfscanf+0x144>
    43a6:	4a c0       	rjmp	.+148    	; 0x443c <vfscanf+0x1f8>
    43a8:	1b 35       	cpi	r17, 0x5B	; 91
    43aa:	51 f4       	brne	.+20     	; 0x43c0 <vfscanf+0x17c>
    43ac:	9e 01       	movw	r18, r28
    43ae:	a4 01       	movw	r20, r8
    43b0:	6f 2d       	mov	r22, r15
    43b2:	c6 01       	movw	r24, r12
    43b4:	6e de       	rcall	.-804    	; 0x4092 <conv_brk>
    43b6:	ec 01       	movw	r28, r24
    43b8:	89 2b       	or	r24, r25
    43ba:	09 f0       	breq	.+2      	; 0x43be <vfscanf+0x17a>
    43bc:	3f c0       	rjmp	.+126    	; 0x443c <vfscanf+0x1f8>
    43be:	39 c0       	rjmp	.+114    	; 0x4432 <vfscanf+0x1ee>
    43c0:	c6 01       	movw	r24, r12
    43c2:	c7 dd       	rcall	.-1138   	; 0x3f52 <skip_spaces>
    43c4:	97 fd       	sbrc	r25, 7
    43c6:	3e c0       	rjmp	.+124    	; 0x4444 <vfscanf+0x200>
    43c8:	1f 36       	cpi	r17, 0x6F	; 111
    43ca:	49 f1       	breq	.+82     	; 0x441e <vfscanf+0x1da>
    43cc:	28 f4       	brcc	.+10     	; 0x43d8 <vfscanf+0x194>
    43ce:	14 36       	cpi	r17, 0x64	; 100
    43d0:	21 f1       	breq	.+72     	; 0x441a <vfscanf+0x1d6>
    43d2:	19 36       	cpi	r17, 0x69	; 105
    43d4:	39 f1       	breq	.+78     	; 0x4424 <vfscanf+0x1e0>
    43d6:	25 c0       	rjmp	.+74     	; 0x4422 <vfscanf+0x1de>
    43d8:	13 37       	cpi	r17, 0x73	; 115
    43da:	71 f0       	breq	.+28     	; 0x43f8 <vfscanf+0x1b4>
    43dc:	15 37       	cpi	r17, 0x75	; 117
    43de:	e9 f0       	breq	.+58     	; 0x441a <vfscanf+0x1d6>
    43e0:	20 c0       	rjmp	.+64     	; 0x4422 <vfscanf+0x1de>
    43e2:	81 14       	cp	r8, r1
    43e4:	91 04       	cpc	r9, r1
    43e6:	29 f0       	breq	.+10     	; 0x43f2 <vfscanf+0x1ae>
    43e8:	f4 01       	movw	r30, r8
    43ea:	60 82       	st	Z, r6
    43ec:	c4 01       	movw	r24, r8
    43ee:	01 96       	adiw	r24, 0x01	; 1
    43f0:	4c 01       	movw	r8, r24
    43f2:	fa 94       	dec	r15
    43f4:	ff 20       	and	r15, r15
    43f6:	59 f0       	breq	.+22     	; 0x440e <vfscanf+0x1ca>
    43f8:	c6 01       	movw	r24, r12
    43fa:	a6 d1       	rcall	.+844    	; 0x4748 <fgetc>
    43fc:	3c 01       	movw	r6, r24
    43fe:	97 fd       	sbrc	r25, 7
    4400:	06 c0       	rjmp	.+12     	; 0x440e <vfscanf+0x1ca>
    4402:	72 d1       	rcall	.+740    	; 0x46e8 <isspace>
    4404:	89 2b       	or	r24, r25
    4406:	69 f3       	breq	.-38     	; 0x43e2 <vfscanf+0x19e>
    4408:	b6 01       	movw	r22, r12
    440a:	c3 01       	movw	r24, r6
    440c:	17 d2       	rcall	.+1070   	; 0x483c <ungetc>
    440e:	81 14       	cp	r8, r1
    4410:	91 04       	cpc	r9, r1
    4412:	a1 f0       	breq	.+40     	; 0x443c <vfscanf+0x1f8>
    4414:	f4 01       	movw	r30, r8
    4416:	10 82       	st	Z, r1
    4418:	11 c0       	rjmp	.+34     	; 0x443c <vfscanf+0x1f8>
    441a:	00 62       	ori	r16, 0x20	; 32
    441c:	03 c0       	rjmp	.+6      	; 0x4424 <vfscanf+0x1e0>
    441e:	00 61       	ori	r16, 0x10	; 16
    4420:	01 c0       	rjmp	.+2      	; 0x4424 <vfscanf+0x1e0>
    4422:	00 64       	ori	r16, 0x40	; 64
    4424:	20 2f       	mov	r18, r16
    4426:	a4 01       	movw	r20, r8
    4428:	6f 2d       	mov	r22, r15
    442a:	c6 01       	movw	r24, r12
    442c:	a8 dd       	rcall	.-1200   	; 0x3f7e <conv_int>
    442e:	81 11       	cpse	r24, r1
    4430:	05 c0       	rjmp	.+10     	; 0x443c <vfscanf+0x1f8>
    4432:	f6 01       	movw	r30, r12
    4434:	83 81       	ldd	r24, Z+3	; 0x03
    4436:	80 73       	andi	r24, 0x30	; 48
    4438:	29 f4       	brne	.+10     	; 0x4444 <vfscanf+0x200>
    443a:	06 c0       	rjmp	.+12     	; 0x4448 <vfscanf+0x204>
    443c:	00 fd       	sbrc	r16, 0
    443e:	18 cf       	rjmp	.-464    	; 0x4270 <vfscanf+0x2c>
    4440:	53 94       	inc	r5
    4442:	16 cf       	rjmp	.-468    	; 0x4270 <vfscanf+0x2c>
    4444:	55 20       	and	r5, r5
    4446:	19 f0       	breq	.+6      	; 0x444e <vfscanf+0x20a>
    4448:	85 2d       	mov	r24, r5
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	02 c0       	rjmp	.+4      	; 0x4452 <vfscanf+0x20e>
    444e:	8f ef       	ldi	r24, 0xFF	; 255
    4450:	9f ef       	ldi	r25, 0xFF	; 255
    4452:	df 91       	pop	r29
    4454:	cf 91       	pop	r28
    4456:	1f 91       	pop	r17
    4458:	0f 91       	pop	r16
    445a:	ff 90       	pop	r15
    445c:	ef 90       	pop	r14
    445e:	df 90       	pop	r13
    4460:	cf 90       	pop	r12
    4462:	bf 90       	pop	r11
    4464:	af 90       	pop	r10
    4466:	9f 90       	pop	r9
    4468:	8f 90       	pop	r8
    446a:	7f 90       	pop	r7
    446c:	6f 90       	pop	r6
    446e:	5f 90       	pop	r5
    4470:	08 95       	ret

00004472 <calloc>:
    4472:	0f 93       	push	r16
    4474:	1f 93       	push	r17
    4476:	cf 93       	push	r28
    4478:	df 93       	push	r29
    447a:	86 9f       	mul	r24, r22
    447c:	80 01       	movw	r16, r0
    447e:	87 9f       	mul	r24, r23
    4480:	10 0d       	add	r17, r0
    4482:	96 9f       	mul	r25, r22
    4484:	10 0d       	add	r17, r0
    4486:	11 24       	eor	r1, r1
    4488:	c8 01       	movw	r24, r16
    448a:	0d d0       	rcall	.+26     	; 0x44a6 <malloc>
    448c:	ec 01       	movw	r28, r24
    448e:	00 97       	sbiw	r24, 0x00	; 0
    4490:	21 f0       	breq	.+8      	; 0x449a <calloc+0x28>
    4492:	a8 01       	movw	r20, r16
    4494:	60 e0       	ldi	r22, 0x00	; 0
    4496:	70 e0       	ldi	r23, 0x00	; 0
    4498:	45 d1       	rcall	.+650    	; 0x4724 <memset>
    449a:	ce 01       	movw	r24, r28
    449c:	df 91       	pop	r29
    449e:	cf 91       	pop	r28
    44a0:	1f 91       	pop	r17
    44a2:	0f 91       	pop	r16
    44a4:	08 95       	ret

000044a6 <malloc>:
    44a6:	0f 93       	push	r16
    44a8:	1f 93       	push	r17
    44aa:	cf 93       	push	r28
    44ac:	df 93       	push	r29
    44ae:	82 30       	cpi	r24, 0x02	; 2
    44b0:	91 05       	cpc	r25, r1
    44b2:	10 f4       	brcc	.+4      	; 0x44b8 <malloc+0x12>
    44b4:	82 e0       	ldi	r24, 0x02	; 2
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	e0 91 90 21 	lds	r30, 0x2190	; 0x802190 <__flp>
    44bc:	f0 91 91 21 	lds	r31, 0x2191	; 0x802191 <__flp+0x1>
    44c0:	20 e0       	ldi	r18, 0x00	; 0
    44c2:	30 e0       	ldi	r19, 0x00	; 0
    44c4:	a0 e0       	ldi	r26, 0x00	; 0
    44c6:	b0 e0       	ldi	r27, 0x00	; 0
    44c8:	30 97       	sbiw	r30, 0x00	; 0
    44ca:	19 f1       	breq	.+70     	; 0x4512 <malloc+0x6c>
    44cc:	40 81       	ld	r20, Z
    44ce:	51 81       	ldd	r21, Z+1	; 0x01
    44d0:	02 81       	ldd	r16, Z+2	; 0x02
    44d2:	13 81       	ldd	r17, Z+3	; 0x03
    44d4:	48 17       	cp	r20, r24
    44d6:	59 07       	cpc	r21, r25
    44d8:	c8 f0       	brcs	.+50     	; 0x450c <malloc+0x66>
    44da:	84 17       	cp	r24, r20
    44dc:	95 07       	cpc	r25, r21
    44de:	69 f4       	brne	.+26     	; 0x44fa <malloc+0x54>
    44e0:	10 97       	sbiw	r26, 0x00	; 0
    44e2:	31 f0       	breq	.+12     	; 0x44f0 <malloc+0x4a>
    44e4:	12 96       	adiw	r26, 0x02	; 2
    44e6:	0c 93       	st	X, r16
    44e8:	12 97       	sbiw	r26, 0x02	; 2
    44ea:	13 96       	adiw	r26, 0x03	; 3
    44ec:	1c 93       	st	X, r17
    44ee:	27 c0       	rjmp	.+78     	; 0x453e <malloc+0x98>
    44f0:	00 93 90 21 	sts	0x2190, r16	; 0x802190 <__flp>
    44f4:	10 93 91 21 	sts	0x2191, r17	; 0x802191 <__flp+0x1>
    44f8:	22 c0       	rjmp	.+68     	; 0x453e <malloc+0x98>
    44fa:	21 15       	cp	r18, r1
    44fc:	31 05       	cpc	r19, r1
    44fe:	19 f0       	breq	.+6      	; 0x4506 <malloc+0x60>
    4500:	42 17       	cp	r20, r18
    4502:	53 07       	cpc	r21, r19
    4504:	18 f4       	brcc	.+6      	; 0x450c <malloc+0x66>
    4506:	9a 01       	movw	r18, r20
    4508:	bd 01       	movw	r22, r26
    450a:	ef 01       	movw	r28, r30
    450c:	df 01       	movw	r26, r30
    450e:	f8 01       	movw	r30, r16
    4510:	db cf       	rjmp	.-74     	; 0x44c8 <malloc+0x22>
    4512:	21 15       	cp	r18, r1
    4514:	31 05       	cpc	r19, r1
    4516:	f9 f0       	breq	.+62     	; 0x4556 <malloc+0xb0>
    4518:	28 1b       	sub	r18, r24
    451a:	39 0b       	sbc	r19, r25
    451c:	24 30       	cpi	r18, 0x04	; 4
    451e:	31 05       	cpc	r19, r1
    4520:	80 f4       	brcc	.+32     	; 0x4542 <malloc+0x9c>
    4522:	8a 81       	ldd	r24, Y+2	; 0x02
    4524:	9b 81       	ldd	r25, Y+3	; 0x03
    4526:	61 15       	cp	r22, r1
    4528:	71 05       	cpc	r23, r1
    452a:	21 f0       	breq	.+8      	; 0x4534 <malloc+0x8e>
    452c:	fb 01       	movw	r30, r22
    452e:	82 83       	std	Z+2, r24	; 0x02
    4530:	93 83       	std	Z+3, r25	; 0x03
    4532:	04 c0       	rjmp	.+8      	; 0x453c <malloc+0x96>
    4534:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <__flp>
    4538:	90 93 91 21 	sts	0x2191, r25	; 0x802191 <__flp+0x1>
    453c:	fe 01       	movw	r30, r28
    453e:	32 96       	adiw	r30, 0x02	; 2
    4540:	44 c0       	rjmp	.+136    	; 0x45ca <malloc+0x124>
    4542:	fe 01       	movw	r30, r28
    4544:	e2 0f       	add	r30, r18
    4546:	f3 1f       	adc	r31, r19
    4548:	81 93       	st	Z+, r24
    454a:	91 93       	st	Z+, r25
    454c:	22 50       	subi	r18, 0x02	; 2
    454e:	31 09       	sbc	r19, r1
    4550:	28 83       	st	Y, r18
    4552:	39 83       	std	Y+1, r19	; 0x01
    4554:	3a c0       	rjmp	.+116    	; 0x45ca <malloc+0x124>
    4556:	20 91 8e 21 	lds	r18, 0x218E	; 0x80218e <__brkval>
    455a:	30 91 8f 21 	lds	r19, 0x218F	; 0x80218f <__brkval+0x1>
    455e:	23 2b       	or	r18, r19
    4560:	41 f4       	brne	.+16     	; 0x4572 <malloc+0xcc>
    4562:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4566:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    456a:	20 93 8e 21 	sts	0x218E, r18	; 0x80218e <__brkval>
    456e:	30 93 8f 21 	sts	0x218F, r19	; 0x80218f <__brkval+0x1>
    4572:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4576:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    457a:	21 15       	cp	r18, r1
    457c:	31 05       	cpc	r19, r1
    457e:	41 f4       	brne	.+16     	; 0x4590 <malloc+0xea>
    4580:	2d b7       	in	r18, 0x3d	; 61
    4582:	3e b7       	in	r19, 0x3e	; 62
    4584:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4588:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    458c:	24 1b       	sub	r18, r20
    458e:	35 0b       	sbc	r19, r21
    4590:	e0 91 8e 21 	lds	r30, 0x218E	; 0x80218e <__brkval>
    4594:	f0 91 8f 21 	lds	r31, 0x218F	; 0x80218f <__brkval+0x1>
    4598:	e2 17       	cp	r30, r18
    459a:	f3 07       	cpc	r31, r19
    459c:	a0 f4       	brcc	.+40     	; 0x45c6 <malloc+0x120>
    459e:	2e 1b       	sub	r18, r30
    45a0:	3f 0b       	sbc	r19, r31
    45a2:	28 17       	cp	r18, r24
    45a4:	39 07       	cpc	r19, r25
    45a6:	78 f0       	brcs	.+30     	; 0x45c6 <malloc+0x120>
    45a8:	ac 01       	movw	r20, r24
    45aa:	4e 5f       	subi	r20, 0xFE	; 254
    45ac:	5f 4f       	sbci	r21, 0xFF	; 255
    45ae:	24 17       	cp	r18, r20
    45b0:	35 07       	cpc	r19, r21
    45b2:	48 f0       	brcs	.+18     	; 0x45c6 <malloc+0x120>
    45b4:	4e 0f       	add	r20, r30
    45b6:	5f 1f       	adc	r21, r31
    45b8:	40 93 8e 21 	sts	0x218E, r20	; 0x80218e <__brkval>
    45bc:	50 93 8f 21 	sts	0x218F, r21	; 0x80218f <__brkval+0x1>
    45c0:	81 93       	st	Z+, r24
    45c2:	91 93       	st	Z+, r25
    45c4:	02 c0       	rjmp	.+4      	; 0x45ca <malloc+0x124>
    45c6:	e0 e0       	ldi	r30, 0x00	; 0
    45c8:	f0 e0       	ldi	r31, 0x00	; 0
    45ca:	cf 01       	movw	r24, r30
    45cc:	df 91       	pop	r29
    45ce:	cf 91       	pop	r28
    45d0:	1f 91       	pop	r17
    45d2:	0f 91       	pop	r16
    45d4:	08 95       	ret

000045d6 <free>:
    45d6:	cf 93       	push	r28
    45d8:	df 93       	push	r29
    45da:	00 97       	sbiw	r24, 0x00	; 0
    45dc:	09 f4       	brne	.+2      	; 0x45e0 <free+0xa>
    45de:	81 c0       	rjmp	.+258    	; 0x46e2 <free+0x10c>
    45e0:	fc 01       	movw	r30, r24
    45e2:	32 97       	sbiw	r30, 0x02	; 2
    45e4:	12 82       	std	Z+2, r1	; 0x02
    45e6:	13 82       	std	Z+3, r1	; 0x03
    45e8:	a0 91 90 21 	lds	r26, 0x2190	; 0x802190 <__flp>
    45ec:	b0 91 91 21 	lds	r27, 0x2191	; 0x802191 <__flp+0x1>
    45f0:	10 97       	sbiw	r26, 0x00	; 0
    45f2:	81 f4       	brne	.+32     	; 0x4614 <free+0x3e>
    45f4:	20 81       	ld	r18, Z
    45f6:	31 81       	ldd	r19, Z+1	; 0x01
    45f8:	82 0f       	add	r24, r18
    45fa:	93 1f       	adc	r25, r19
    45fc:	20 91 8e 21 	lds	r18, 0x218E	; 0x80218e <__brkval>
    4600:	30 91 8f 21 	lds	r19, 0x218F	; 0x80218f <__brkval+0x1>
    4604:	28 17       	cp	r18, r24
    4606:	39 07       	cpc	r19, r25
    4608:	51 f5       	brne	.+84     	; 0x465e <free+0x88>
    460a:	e0 93 8e 21 	sts	0x218E, r30	; 0x80218e <__brkval>
    460e:	f0 93 8f 21 	sts	0x218F, r31	; 0x80218f <__brkval+0x1>
    4612:	67 c0       	rjmp	.+206    	; 0x46e2 <free+0x10c>
    4614:	ed 01       	movw	r28, r26
    4616:	20 e0       	ldi	r18, 0x00	; 0
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	ce 17       	cp	r28, r30
    461c:	df 07       	cpc	r29, r31
    461e:	40 f4       	brcc	.+16     	; 0x4630 <free+0x5a>
    4620:	4a 81       	ldd	r20, Y+2	; 0x02
    4622:	5b 81       	ldd	r21, Y+3	; 0x03
    4624:	9e 01       	movw	r18, r28
    4626:	41 15       	cp	r20, r1
    4628:	51 05       	cpc	r21, r1
    462a:	f1 f0       	breq	.+60     	; 0x4668 <free+0x92>
    462c:	ea 01       	movw	r28, r20
    462e:	f5 cf       	rjmp	.-22     	; 0x461a <free+0x44>
    4630:	c2 83       	std	Z+2, r28	; 0x02
    4632:	d3 83       	std	Z+3, r29	; 0x03
    4634:	40 81       	ld	r20, Z
    4636:	51 81       	ldd	r21, Z+1	; 0x01
    4638:	84 0f       	add	r24, r20
    463a:	95 1f       	adc	r25, r21
    463c:	c8 17       	cp	r28, r24
    463e:	d9 07       	cpc	r29, r25
    4640:	59 f4       	brne	.+22     	; 0x4658 <free+0x82>
    4642:	88 81       	ld	r24, Y
    4644:	99 81       	ldd	r25, Y+1	; 0x01
    4646:	84 0f       	add	r24, r20
    4648:	95 1f       	adc	r25, r21
    464a:	02 96       	adiw	r24, 0x02	; 2
    464c:	80 83       	st	Z, r24
    464e:	91 83       	std	Z+1, r25	; 0x01
    4650:	8a 81       	ldd	r24, Y+2	; 0x02
    4652:	9b 81       	ldd	r25, Y+3	; 0x03
    4654:	82 83       	std	Z+2, r24	; 0x02
    4656:	93 83       	std	Z+3, r25	; 0x03
    4658:	21 15       	cp	r18, r1
    465a:	31 05       	cpc	r19, r1
    465c:	29 f4       	brne	.+10     	; 0x4668 <free+0x92>
    465e:	e0 93 90 21 	sts	0x2190, r30	; 0x802190 <__flp>
    4662:	f0 93 91 21 	sts	0x2191, r31	; 0x802191 <__flp+0x1>
    4666:	3d c0       	rjmp	.+122    	; 0x46e2 <free+0x10c>
    4668:	e9 01       	movw	r28, r18
    466a:	ea 83       	std	Y+2, r30	; 0x02
    466c:	fb 83       	std	Y+3, r31	; 0x03
    466e:	49 91       	ld	r20, Y+
    4670:	59 91       	ld	r21, Y+
    4672:	c4 0f       	add	r28, r20
    4674:	d5 1f       	adc	r29, r21
    4676:	ec 17       	cp	r30, r28
    4678:	fd 07       	cpc	r31, r29
    467a:	61 f4       	brne	.+24     	; 0x4694 <free+0xbe>
    467c:	80 81       	ld	r24, Z
    467e:	91 81       	ldd	r25, Z+1	; 0x01
    4680:	84 0f       	add	r24, r20
    4682:	95 1f       	adc	r25, r21
    4684:	02 96       	adiw	r24, 0x02	; 2
    4686:	e9 01       	movw	r28, r18
    4688:	88 83       	st	Y, r24
    468a:	99 83       	std	Y+1, r25	; 0x01
    468c:	82 81       	ldd	r24, Z+2	; 0x02
    468e:	93 81       	ldd	r25, Z+3	; 0x03
    4690:	8a 83       	std	Y+2, r24	; 0x02
    4692:	9b 83       	std	Y+3, r25	; 0x03
    4694:	e0 e0       	ldi	r30, 0x00	; 0
    4696:	f0 e0       	ldi	r31, 0x00	; 0
    4698:	12 96       	adiw	r26, 0x02	; 2
    469a:	8d 91       	ld	r24, X+
    469c:	9c 91       	ld	r25, X
    469e:	13 97       	sbiw	r26, 0x03	; 3
    46a0:	00 97       	sbiw	r24, 0x00	; 0
    46a2:	19 f0       	breq	.+6      	; 0x46aa <free+0xd4>
    46a4:	fd 01       	movw	r30, r26
    46a6:	dc 01       	movw	r26, r24
    46a8:	f7 cf       	rjmp	.-18     	; 0x4698 <free+0xc2>
    46aa:	8d 91       	ld	r24, X+
    46ac:	9c 91       	ld	r25, X
    46ae:	11 97       	sbiw	r26, 0x01	; 1
    46b0:	9d 01       	movw	r18, r26
    46b2:	2e 5f       	subi	r18, 0xFE	; 254
    46b4:	3f 4f       	sbci	r19, 0xFF	; 255
    46b6:	82 0f       	add	r24, r18
    46b8:	93 1f       	adc	r25, r19
    46ba:	20 91 8e 21 	lds	r18, 0x218E	; 0x80218e <__brkval>
    46be:	30 91 8f 21 	lds	r19, 0x218F	; 0x80218f <__brkval+0x1>
    46c2:	28 17       	cp	r18, r24
    46c4:	39 07       	cpc	r19, r25
    46c6:	69 f4       	brne	.+26     	; 0x46e2 <free+0x10c>
    46c8:	30 97       	sbiw	r30, 0x00	; 0
    46ca:	29 f4       	brne	.+10     	; 0x46d6 <free+0x100>
    46cc:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <__flp>
    46d0:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <__flp+0x1>
    46d4:	02 c0       	rjmp	.+4      	; 0x46da <free+0x104>
    46d6:	12 82       	std	Z+2, r1	; 0x02
    46d8:	13 82       	std	Z+3, r1	; 0x03
    46da:	a0 93 8e 21 	sts	0x218E, r26	; 0x80218e <__brkval>
    46de:	b0 93 8f 21 	sts	0x218F, r27	; 0x80218f <__brkval+0x1>
    46e2:	df 91       	pop	r29
    46e4:	cf 91       	pop	r28
    46e6:	08 95       	ret

000046e8 <isspace>:
    46e8:	91 11       	cpse	r25, r1
    46ea:	1f c1       	rjmp	.+574    	; 0x492a <__ctype_isfalse>
    46ec:	80 32       	cpi	r24, 0x20	; 32
    46ee:	19 f0       	breq	.+6      	; 0x46f6 <isspace+0xe>
    46f0:	89 50       	subi	r24, 0x09	; 9
    46f2:	85 50       	subi	r24, 0x05	; 5
    46f4:	d0 f7       	brcc	.-12     	; 0x46ea <isspace+0x2>
    46f6:	08 95       	ret

000046f8 <strchr_P>:
    46f8:	fc 01       	movw	r30, r24
    46fa:	05 90       	lpm	r0, Z+
    46fc:	06 16       	cp	r0, r22
    46fe:	21 f0       	breq	.+8      	; 0x4708 <strchr_P+0x10>
    4700:	00 20       	and	r0, r0
    4702:	d9 f7       	brne	.-10     	; 0x46fa <strchr_P+0x2>
    4704:	c0 01       	movw	r24, r0
    4706:	08 95       	ret
    4708:	31 97       	sbiw	r30, 0x01	; 1
    470a:	cf 01       	movw	r24, r30
    470c:	08 95       	ret

0000470e <strnlen_P>:
    470e:	fc 01       	movw	r30, r24
    4710:	05 90       	lpm	r0, Z+
    4712:	61 50       	subi	r22, 0x01	; 1
    4714:	70 40       	sbci	r23, 0x00	; 0
    4716:	01 10       	cpse	r0, r1
    4718:	d8 f7       	brcc	.-10     	; 0x4710 <strnlen_P+0x2>
    471a:	80 95       	com	r24
    471c:	90 95       	com	r25
    471e:	8e 0f       	add	r24, r30
    4720:	9f 1f       	adc	r25, r31
    4722:	08 95       	ret

00004724 <memset>:
    4724:	dc 01       	movw	r26, r24
    4726:	01 c0       	rjmp	.+2      	; 0x472a <memset+0x6>
    4728:	6d 93       	st	X+, r22
    472a:	41 50       	subi	r20, 0x01	; 1
    472c:	50 40       	sbci	r21, 0x00	; 0
    472e:	e0 f7       	brcc	.-8      	; 0x4728 <memset+0x4>
    4730:	08 95       	ret

00004732 <strnlen>:
    4732:	fc 01       	movw	r30, r24
    4734:	61 50       	subi	r22, 0x01	; 1
    4736:	70 40       	sbci	r23, 0x00	; 0
    4738:	01 90       	ld	r0, Z+
    473a:	01 10       	cpse	r0, r1
    473c:	d8 f7       	brcc	.-10     	; 0x4734 <strnlen+0x2>
    473e:	80 95       	com	r24
    4740:	90 95       	com	r25
    4742:	8e 0f       	add	r24, r30
    4744:	9f 1f       	adc	r25, r31
    4746:	08 95       	ret

00004748 <fgetc>:
    4748:	cf 93       	push	r28
    474a:	df 93       	push	r29
    474c:	ec 01       	movw	r28, r24
    474e:	2b 81       	ldd	r18, Y+3	; 0x03
    4750:	20 ff       	sbrs	r18, 0
    4752:	33 c0       	rjmp	.+102    	; 0x47ba <fgetc+0x72>
    4754:	26 ff       	sbrs	r18, 6
    4756:	0a c0       	rjmp	.+20     	; 0x476c <fgetc+0x24>
    4758:	2f 7b       	andi	r18, 0xBF	; 191
    475a:	2b 83       	std	Y+3, r18	; 0x03
    475c:	8e 81       	ldd	r24, Y+6	; 0x06
    475e:	9f 81       	ldd	r25, Y+7	; 0x07
    4760:	01 96       	adiw	r24, 0x01	; 1
    4762:	8e 83       	std	Y+6, r24	; 0x06
    4764:	9f 83       	std	Y+7, r25	; 0x07
    4766:	8a 81       	ldd	r24, Y+2	; 0x02
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	29 c0       	rjmp	.+82     	; 0x47be <fgetc+0x76>
    476c:	22 ff       	sbrs	r18, 2
    476e:	0f c0       	rjmp	.+30     	; 0x478e <fgetc+0x46>
    4770:	e8 81       	ld	r30, Y
    4772:	f9 81       	ldd	r31, Y+1	; 0x01
    4774:	80 81       	ld	r24, Z
    4776:	08 2e       	mov	r0, r24
    4778:	00 0c       	add	r0, r0
    477a:	99 0b       	sbc	r25, r25
    477c:	00 97       	sbiw	r24, 0x00	; 0
    477e:	19 f4       	brne	.+6      	; 0x4786 <fgetc+0x3e>
    4780:	20 62       	ori	r18, 0x20	; 32
    4782:	2b 83       	std	Y+3, r18	; 0x03
    4784:	1a c0       	rjmp	.+52     	; 0x47ba <fgetc+0x72>
    4786:	31 96       	adiw	r30, 0x01	; 1
    4788:	e8 83       	st	Y, r30
    478a:	f9 83       	std	Y+1, r31	; 0x01
    478c:	0e c0       	rjmp	.+28     	; 0x47aa <fgetc+0x62>
    478e:	ea 85       	ldd	r30, Y+10	; 0x0a
    4790:	fb 85       	ldd	r31, Y+11	; 0x0b
    4792:	19 95       	eicall
    4794:	97 ff       	sbrs	r25, 7
    4796:	09 c0       	rjmp	.+18     	; 0x47aa <fgetc+0x62>
    4798:	2b 81       	ldd	r18, Y+3	; 0x03
    479a:	01 96       	adiw	r24, 0x01	; 1
    479c:	11 f0       	breq	.+4      	; 0x47a2 <fgetc+0x5a>
    479e:	80 e2       	ldi	r24, 0x20	; 32
    47a0:	01 c0       	rjmp	.+2      	; 0x47a4 <fgetc+0x5c>
    47a2:	80 e1       	ldi	r24, 0x10	; 16
    47a4:	82 2b       	or	r24, r18
    47a6:	8b 83       	std	Y+3, r24	; 0x03
    47a8:	08 c0       	rjmp	.+16     	; 0x47ba <fgetc+0x72>
    47aa:	2e 81       	ldd	r18, Y+6	; 0x06
    47ac:	3f 81       	ldd	r19, Y+7	; 0x07
    47ae:	2f 5f       	subi	r18, 0xFF	; 255
    47b0:	3f 4f       	sbci	r19, 0xFF	; 255
    47b2:	2e 83       	std	Y+6, r18	; 0x06
    47b4:	3f 83       	std	Y+7, r19	; 0x07
    47b6:	99 27       	eor	r25, r25
    47b8:	02 c0       	rjmp	.+4      	; 0x47be <fgetc+0x76>
    47ba:	8f ef       	ldi	r24, 0xFF	; 255
    47bc:	9f ef       	ldi	r25, 0xFF	; 255
    47be:	df 91       	pop	r29
    47c0:	cf 91       	pop	r28
    47c2:	08 95       	ret

000047c4 <fputc>:
    47c4:	0f 93       	push	r16
    47c6:	1f 93       	push	r17
    47c8:	cf 93       	push	r28
    47ca:	df 93       	push	r29
    47cc:	fb 01       	movw	r30, r22
    47ce:	23 81       	ldd	r18, Z+3	; 0x03
    47d0:	21 fd       	sbrc	r18, 1
    47d2:	03 c0       	rjmp	.+6      	; 0x47da <fputc+0x16>
    47d4:	8f ef       	ldi	r24, 0xFF	; 255
    47d6:	9f ef       	ldi	r25, 0xFF	; 255
    47d8:	2c c0       	rjmp	.+88     	; 0x4832 <fputc+0x6e>
    47da:	22 ff       	sbrs	r18, 2
    47dc:	16 c0       	rjmp	.+44     	; 0x480a <fputc+0x46>
    47de:	46 81       	ldd	r20, Z+6	; 0x06
    47e0:	57 81       	ldd	r21, Z+7	; 0x07
    47e2:	24 81       	ldd	r18, Z+4	; 0x04
    47e4:	35 81       	ldd	r19, Z+5	; 0x05
    47e6:	42 17       	cp	r20, r18
    47e8:	53 07       	cpc	r21, r19
    47ea:	44 f4       	brge	.+16     	; 0x47fc <fputc+0x38>
    47ec:	a0 81       	ld	r26, Z
    47ee:	b1 81       	ldd	r27, Z+1	; 0x01
    47f0:	9d 01       	movw	r18, r26
    47f2:	2f 5f       	subi	r18, 0xFF	; 255
    47f4:	3f 4f       	sbci	r19, 0xFF	; 255
    47f6:	20 83       	st	Z, r18
    47f8:	31 83       	std	Z+1, r19	; 0x01
    47fa:	8c 93       	st	X, r24
    47fc:	26 81       	ldd	r18, Z+6	; 0x06
    47fe:	37 81       	ldd	r19, Z+7	; 0x07
    4800:	2f 5f       	subi	r18, 0xFF	; 255
    4802:	3f 4f       	sbci	r19, 0xFF	; 255
    4804:	26 83       	std	Z+6, r18	; 0x06
    4806:	37 83       	std	Z+7, r19	; 0x07
    4808:	14 c0       	rjmp	.+40     	; 0x4832 <fputc+0x6e>
    480a:	8b 01       	movw	r16, r22
    480c:	ec 01       	movw	r28, r24
    480e:	fb 01       	movw	r30, r22
    4810:	00 84       	ldd	r0, Z+8	; 0x08
    4812:	f1 85       	ldd	r31, Z+9	; 0x09
    4814:	e0 2d       	mov	r30, r0
    4816:	19 95       	eicall
    4818:	89 2b       	or	r24, r25
    481a:	e1 f6       	brne	.-72     	; 0x47d4 <fputc+0x10>
    481c:	d8 01       	movw	r26, r16
    481e:	16 96       	adiw	r26, 0x06	; 6
    4820:	8d 91       	ld	r24, X+
    4822:	9c 91       	ld	r25, X
    4824:	17 97       	sbiw	r26, 0x07	; 7
    4826:	01 96       	adiw	r24, 0x01	; 1
    4828:	16 96       	adiw	r26, 0x06	; 6
    482a:	8d 93       	st	X+, r24
    482c:	9c 93       	st	X, r25
    482e:	17 97       	sbiw	r26, 0x07	; 7
    4830:	ce 01       	movw	r24, r28
    4832:	df 91       	pop	r29
    4834:	cf 91       	pop	r28
    4836:	1f 91       	pop	r17
    4838:	0f 91       	pop	r16
    483a:	08 95       	ret

0000483c <ungetc>:
    483c:	fb 01       	movw	r30, r22
    483e:	23 81       	ldd	r18, Z+3	; 0x03
    4840:	20 ff       	sbrs	r18, 0
    4842:	12 c0       	rjmp	.+36     	; 0x4868 <ungetc+0x2c>
    4844:	26 fd       	sbrc	r18, 6
    4846:	10 c0       	rjmp	.+32     	; 0x4868 <ungetc+0x2c>
    4848:	8f 3f       	cpi	r24, 0xFF	; 255
    484a:	3f ef       	ldi	r19, 0xFF	; 255
    484c:	93 07       	cpc	r25, r19
    484e:	61 f0       	breq	.+24     	; 0x4868 <ungetc+0x2c>
    4850:	82 83       	std	Z+2, r24	; 0x02
    4852:	2f 7d       	andi	r18, 0xDF	; 223
    4854:	20 64       	ori	r18, 0x40	; 64
    4856:	23 83       	std	Z+3, r18	; 0x03
    4858:	26 81       	ldd	r18, Z+6	; 0x06
    485a:	37 81       	ldd	r19, Z+7	; 0x07
    485c:	21 50       	subi	r18, 0x01	; 1
    485e:	31 09       	sbc	r19, r1
    4860:	26 83       	std	Z+6, r18	; 0x06
    4862:	37 83       	std	Z+7, r19	; 0x07
    4864:	99 27       	eor	r25, r25
    4866:	08 95       	ret
    4868:	8f ef       	ldi	r24, 0xFF	; 255
    486a:	9f ef       	ldi	r25, 0xFF	; 255
    486c:	08 95       	ret

0000486e <__ultoa_invert>:
    486e:	fa 01       	movw	r30, r20
    4870:	aa 27       	eor	r26, r26
    4872:	28 30       	cpi	r18, 0x08	; 8
    4874:	51 f1       	breq	.+84     	; 0x48ca <__ultoa_invert+0x5c>
    4876:	20 31       	cpi	r18, 0x10	; 16
    4878:	81 f1       	breq	.+96     	; 0x48da <__ultoa_invert+0x6c>
    487a:	e8 94       	clt
    487c:	6f 93       	push	r22
    487e:	6e 7f       	andi	r22, 0xFE	; 254
    4880:	6e 5f       	subi	r22, 0xFE	; 254
    4882:	7f 4f       	sbci	r23, 0xFF	; 255
    4884:	8f 4f       	sbci	r24, 0xFF	; 255
    4886:	9f 4f       	sbci	r25, 0xFF	; 255
    4888:	af 4f       	sbci	r26, 0xFF	; 255
    488a:	b1 e0       	ldi	r27, 0x01	; 1
    488c:	3e d0       	rcall	.+124    	; 0x490a <__ultoa_invert+0x9c>
    488e:	b4 e0       	ldi	r27, 0x04	; 4
    4890:	3c d0       	rcall	.+120    	; 0x490a <__ultoa_invert+0x9c>
    4892:	67 0f       	add	r22, r23
    4894:	78 1f       	adc	r23, r24
    4896:	89 1f       	adc	r24, r25
    4898:	9a 1f       	adc	r25, r26
    489a:	a1 1d       	adc	r26, r1
    489c:	68 0f       	add	r22, r24
    489e:	79 1f       	adc	r23, r25
    48a0:	8a 1f       	adc	r24, r26
    48a2:	91 1d       	adc	r25, r1
    48a4:	a1 1d       	adc	r26, r1
    48a6:	6a 0f       	add	r22, r26
    48a8:	71 1d       	adc	r23, r1
    48aa:	81 1d       	adc	r24, r1
    48ac:	91 1d       	adc	r25, r1
    48ae:	a1 1d       	adc	r26, r1
    48b0:	20 d0       	rcall	.+64     	; 0x48f2 <__ultoa_invert+0x84>
    48b2:	09 f4       	brne	.+2      	; 0x48b6 <__ultoa_invert+0x48>
    48b4:	68 94       	set
    48b6:	3f 91       	pop	r19
    48b8:	2a e0       	ldi	r18, 0x0A	; 10
    48ba:	26 9f       	mul	r18, r22
    48bc:	11 24       	eor	r1, r1
    48be:	30 19       	sub	r19, r0
    48c0:	30 5d       	subi	r19, 0xD0	; 208
    48c2:	31 93       	st	Z+, r19
    48c4:	de f6       	brtc	.-74     	; 0x487c <__ultoa_invert+0xe>
    48c6:	cf 01       	movw	r24, r30
    48c8:	08 95       	ret
    48ca:	46 2f       	mov	r20, r22
    48cc:	47 70       	andi	r20, 0x07	; 7
    48ce:	40 5d       	subi	r20, 0xD0	; 208
    48d0:	41 93       	st	Z+, r20
    48d2:	b3 e0       	ldi	r27, 0x03	; 3
    48d4:	0f d0       	rcall	.+30     	; 0x48f4 <__ultoa_invert+0x86>
    48d6:	c9 f7       	brne	.-14     	; 0x48ca <__ultoa_invert+0x5c>
    48d8:	f6 cf       	rjmp	.-20     	; 0x48c6 <__ultoa_invert+0x58>
    48da:	46 2f       	mov	r20, r22
    48dc:	4f 70       	andi	r20, 0x0F	; 15
    48de:	40 5d       	subi	r20, 0xD0	; 208
    48e0:	4a 33       	cpi	r20, 0x3A	; 58
    48e2:	18 f0       	brcs	.+6      	; 0x48ea <__ultoa_invert+0x7c>
    48e4:	49 5d       	subi	r20, 0xD9	; 217
    48e6:	31 fd       	sbrc	r19, 1
    48e8:	40 52       	subi	r20, 0x20	; 32
    48ea:	41 93       	st	Z+, r20
    48ec:	02 d0       	rcall	.+4      	; 0x48f2 <__ultoa_invert+0x84>
    48ee:	a9 f7       	brne	.-22     	; 0x48da <__ultoa_invert+0x6c>
    48f0:	ea cf       	rjmp	.-44     	; 0x48c6 <__ultoa_invert+0x58>
    48f2:	b4 e0       	ldi	r27, 0x04	; 4
    48f4:	a6 95       	lsr	r26
    48f6:	97 95       	ror	r25
    48f8:	87 95       	ror	r24
    48fa:	77 95       	ror	r23
    48fc:	67 95       	ror	r22
    48fe:	ba 95       	dec	r27
    4900:	c9 f7       	brne	.-14     	; 0x48f4 <__ultoa_invert+0x86>
    4902:	00 97       	sbiw	r24, 0x00	; 0
    4904:	61 05       	cpc	r22, r1
    4906:	71 05       	cpc	r23, r1
    4908:	08 95       	ret
    490a:	9b 01       	movw	r18, r22
    490c:	ac 01       	movw	r20, r24
    490e:	0a 2e       	mov	r0, r26
    4910:	06 94       	lsr	r0
    4912:	57 95       	ror	r21
    4914:	47 95       	ror	r20
    4916:	37 95       	ror	r19
    4918:	27 95       	ror	r18
    491a:	ba 95       	dec	r27
    491c:	c9 f7       	brne	.-14     	; 0x4910 <__ultoa_invert+0xa2>
    491e:	62 0f       	add	r22, r18
    4920:	73 1f       	adc	r23, r19
    4922:	84 1f       	adc	r24, r20
    4924:	95 1f       	adc	r25, r21
    4926:	a0 1d       	adc	r26, r0
    4928:	08 95       	ret

0000492a <__ctype_isfalse>:
    492a:	99 27       	eor	r25, r25
    492c:	88 27       	eor	r24, r24

0000492e <__ctype_istrue>:
    492e:	08 95       	ret

00004930 <_exit>:
    4930:	f8 94       	cli

00004932 <__stop_program>:
    4932:	ff cf       	rjmp	.-2      	; 0x4932 <__stop_program>
