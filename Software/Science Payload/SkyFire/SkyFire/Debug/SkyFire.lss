
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002578  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00802000  00002578  0000260c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  0080206a  0080206a  00002676  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00002718  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000119be  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000579d  00000000  00000000  000144a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000066b9  00000000  00000000  00019c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dec  00000000  00000000  000202fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032ccb  00000000  00000000  000210e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d94  00000000  00000000  00053db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00057b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002739  00000000  00000000  00057e7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c1       	rjmp	.+636    	; 0x27e <__ctors_end>
       2:	00 00       	nop
       4:	62 c1       	rjmp	.+708    	; 0x2ca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c1       	rjmp	.+704    	; 0x2ca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c1       	rjmp	.+700    	; 0x2ca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c1       	rjmp	.+696    	; 0x2ca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c1       	rjmp	.+692    	; 0x2ca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c1       	rjmp	.+688    	; 0x2ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c1       	rjmp	.+684    	; 0x2ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c1       	rjmp	.+680    	; 0x2ca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c1       	rjmp	.+676    	; 0x2ca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c1       	rjmp	.+672    	; 0x2ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c1       	rjmp	.+668    	; 0x2ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c1       	rjmp	.+664    	; 0x2ca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c1       	rjmp	.+660    	; 0x2ca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c1       	rjmp	.+656    	; 0x2ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c1       	rjmp	.+652    	; 0x2ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c1       	rjmp	.+648    	; 0x2ca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c1       	rjmp	.+644    	; 0x2ca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c1       	rjmp	.+640    	; 0x2ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c1       	rjmp	.+636    	; 0x2ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c1       	rjmp	.+632    	; 0x2ca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c1       	rjmp	.+628    	; 0x2ca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c1       	rjmp	.+624    	; 0x2ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c1       	rjmp	.+620    	; 0x2ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c1       	rjmp	.+616    	; 0x2ca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c1       	rjmp	.+612    	; 0x2ca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c1       	rjmp	.+608    	; 0x2ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c1       	rjmp	.+604    	; 0x2ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c1       	rjmp	.+600    	; 0x2ca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c1       	rjmp	.+596    	; 0x2ca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c1       	rjmp	.+588    	; 0x2ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c1       	rjmp	.+584    	; 0x2ca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c1       	rjmp	.+580    	; 0x2ca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c1       	rjmp	.+576    	; 0x2ca <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e c1       	rjmp	.+572    	; 0x2ca <__bad_interrupt>
      8e:	00 00       	nop
      90:	1c c1       	rjmp	.+568    	; 0x2ca <__bad_interrupt>
      92:	00 00       	nop
      94:	1a c1       	rjmp	.+564    	; 0x2ca <__bad_interrupt>
      96:	00 00       	nop
      98:	18 c1       	rjmp	.+560    	; 0x2ca <__bad_interrupt>
      9a:	00 00       	nop
      9c:	36 c2       	rjmp	.+1132   	; 0x50a <__vector_39>
      9e:	00 00       	nop
      a0:	71 c2       	rjmp	.+1250   	; 0x584 <__vector_40>
      a2:	00 00       	nop
      a4:	ac c2       	rjmp	.+1368   	; 0x5fe <__vector_41>
      a6:	00 00       	nop
      a8:	e7 c2       	rjmp	.+1486   	; 0x678 <__vector_42>
      aa:	00 00       	nop
      ac:	0e c1       	rjmp	.+540    	; 0x2ca <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0c c1       	rjmp	.+536    	; 0x2ca <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0a c1       	rjmp	.+532    	; 0x2ca <__bad_interrupt>
      b6:	00 00       	nop
      b8:	08 c1       	rjmp	.+528    	; 0x2ca <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__vector_47>
      c0:	04 c1       	rjmp	.+520    	; 0x2ca <__bad_interrupt>
      c2:	00 00       	nop
      c4:	02 c1       	rjmp	.+516    	; 0x2ca <__bad_interrupt>
      c6:	00 00       	nop
      c8:	00 c1       	rjmp	.+512    	; 0x2ca <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fe c0       	rjmp	.+508    	; 0x2ca <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fc c0       	rjmp	.+504    	; 0x2ca <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fa c0       	rjmp	.+500    	; 0x2ca <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f8 c0       	rjmp	.+496    	; 0x2ca <__bad_interrupt>
      da:	00 00       	nop
      dc:	f6 c0       	rjmp	.+492    	; 0x2ca <__bad_interrupt>
      de:	00 00       	nop
      e0:	f4 c0       	rjmp	.+488    	; 0x2ca <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f2 c0       	rjmp	.+484    	; 0x2ca <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f0 c0       	rjmp	.+480    	; 0x2ca <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ee c0       	rjmp	.+476    	; 0x2ca <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ec c0       	rjmp	.+472    	; 0x2ca <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ea c0       	rjmp	.+468    	; 0x2ca <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e8 c0       	rjmp	.+464    	; 0x2ca <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e6 c0       	rjmp	.+460    	; 0x2ca <__bad_interrupt>
      fe:	00 00       	nop
     100:	e4 c0       	rjmp	.+456    	; 0x2ca <__bad_interrupt>
     102:	00 00       	nop
     104:	e2 c0       	rjmp	.+452    	; 0x2ca <__bad_interrupt>
     106:	00 00       	nop
     108:	e0 c0       	rjmp	.+448    	; 0x2ca <__bad_interrupt>
     10a:	00 00       	nop
     10c:	de c0       	rjmp	.+444    	; 0x2ca <__bad_interrupt>
     10e:	00 00       	nop
     110:	dc c0       	rjmp	.+440    	; 0x2ca <__bad_interrupt>
     112:	00 00       	nop
     114:	da c0       	rjmp	.+436    	; 0x2ca <__bad_interrupt>
     116:	00 00       	nop
     118:	d8 c0       	rjmp	.+432    	; 0x2ca <__bad_interrupt>
     11a:	00 00       	nop
     11c:	02 c1       	rjmp	.+516    	; 0x322 <__vector_71>
     11e:	00 00       	nop
     120:	3d c1       	rjmp	.+634    	; 0x39c <__vector_72>
     122:	00 00       	nop
     124:	78 c1       	rjmp	.+752    	; 0x416 <__vector_73>
     126:	00 00       	nop
     128:	b3 c1       	rjmp	.+870    	; 0x490 <__vector_74>
     12a:	00 00       	nop
     12c:	ce c0       	rjmp	.+412    	; 0x2ca <__bad_interrupt>
     12e:	00 00       	nop
     130:	cc c0       	rjmp	.+408    	; 0x2ca <__bad_interrupt>
     132:	00 00       	nop
     134:	ca c0       	rjmp	.+404    	; 0x2ca <__bad_interrupt>
     136:	00 00       	nop
     138:	c8 c0       	rjmp	.+400    	; 0x2ca <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c6 c0       	rjmp	.+396    	; 0x2ca <__bad_interrupt>
     13e:	00 00       	nop
     140:	c4 c0       	rjmp	.+392    	; 0x2ca <__bad_interrupt>
     142:	00 00       	nop
     144:	c2 c0       	rjmp	.+388    	; 0x2ca <__bad_interrupt>
     146:	00 00       	nop
     148:	c0 c0       	rjmp	.+384    	; 0x2ca <__bad_interrupt>
     14a:	00 00       	nop
     14c:	be c0       	rjmp	.+380    	; 0x2ca <__bad_interrupt>
     14e:	00 00       	nop
     150:	bc c0       	rjmp	.+376    	; 0x2ca <__bad_interrupt>
     152:	00 00       	nop
     154:	ba c0       	rjmp	.+372    	; 0x2ca <__bad_interrupt>
     156:	00 00       	nop
     158:	b8 c0       	rjmp	.+368    	; 0x2ca <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b6 c0       	rjmp	.+364    	; 0x2ca <__bad_interrupt>
     15e:	00 00       	nop
     160:	b4 c0       	rjmp	.+360    	; 0x2ca <__bad_interrupt>
     162:	00 00       	nop
     164:	b2 c0       	rjmp	.+356    	; 0x2ca <__bad_interrupt>
     166:	00 00       	nop
     168:	b0 c0       	rjmp	.+352    	; 0x2ca <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ae c0       	rjmp	.+348    	; 0x2ca <__bad_interrupt>
     16e:	00 00       	nop
     170:	ac c0       	rjmp	.+344    	; 0x2ca <__bad_interrupt>
     172:	00 00       	nop
     174:	aa c0       	rjmp	.+340    	; 0x2ca <__bad_interrupt>
     176:	00 00       	nop
     178:	a8 c0       	rjmp	.+336    	; 0x2ca <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a6 c0       	rjmp	.+332    	; 0x2ca <__bad_interrupt>
     17e:	00 00       	nop
     180:	a4 c0       	rjmp	.+328    	; 0x2ca <__bad_interrupt>
     182:	00 00       	nop
     184:	a2 c0       	rjmp	.+324    	; 0x2ca <__bad_interrupt>
     186:	00 00       	nop
     188:	a0 c0       	rjmp	.+320    	; 0x2ca <__bad_interrupt>
     18a:	00 00       	nop
     18c:	9e c0       	rjmp	.+316    	; 0x2ca <__bad_interrupt>
     18e:	00 00       	nop
     190:	9c c0       	rjmp	.+312    	; 0x2ca <__bad_interrupt>
     192:	00 00       	nop
     194:	9a c0       	rjmp	.+308    	; 0x2ca <__bad_interrupt>
     196:	00 00       	nop
     198:	98 c0       	rjmp	.+304    	; 0x2ca <__bad_interrupt>
     19a:	00 00       	nop
     19c:	96 c0       	rjmp	.+300    	; 0x2ca <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	94 c0       	rjmp	.+296    	; 0x2ca <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	92 c0       	rjmp	.+292    	; 0x2ca <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	90 c0       	rjmp	.+288    	; 0x2ca <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	8e c0       	rjmp	.+284    	; 0x2ca <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8c c0       	rjmp	.+280    	; 0x2ca <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8a c0       	rjmp	.+276    	; 0x2ca <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	88 c0       	rjmp	.+272    	; 0x2ca <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	86 c0       	rjmp	.+268    	; 0x2ca <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	84 c0       	rjmp	.+264    	; 0x2ca <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	82 c0       	rjmp	.+260    	; 0x2ca <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	80 c0       	rjmp	.+256    	; 0x2ca <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	7e c0       	rjmp	.+252    	; 0x2ca <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7c c0       	rjmp	.+248    	; 0x2ca <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7a c0       	rjmp	.+244    	; 0x2ca <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	78 c0       	rjmp	.+240    	; 0x2ca <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	76 c0       	rjmp	.+236    	; 0x2ca <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	74 c0       	rjmp	.+232    	; 0x2ca <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	72 c0       	rjmp	.+228    	; 0x2ca <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	70 c0       	rjmp	.+224    	; 0x2ca <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	6e c0       	rjmp	.+220    	; 0x2ca <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6c c0       	rjmp	.+216    	; 0x2ca <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6a c0       	rjmp	.+212    	; 0x2ca <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	68 c0       	rjmp	.+208    	; 0x2ca <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <usart_init_rs232+0x144>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__ctors_end>:
     27e:	11 24       	eor	r1, r1
     280:	1f be       	out	0x3f, r1	; 63
     282:	cf ef       	ldi	r28, 0xFF	; 255
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df e3       	ldi	r29, 0x3F	; 63
     288:	de bf       	out	0x3e, r29	; 62
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	0c bf       	out	0x3c, r16	; 60
     28e:	18 be       	out	0x38, r1	; 56
     290:	19 be       	out	0x39, r1	; 57
     292:	1a be       	out	0x3a, r1	; 58
     294:	1b be       	out	0x3b, r1	; 59

00000296 <__do_copy_data>:
     296:	10 e2       	ldi	r17, 0x20	; 32
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e2       	ldi	r27, 0x20	; 32
     29c:	e8 e7       	ldi	r30, 0x78	; 120
     29e:	f5 e2       	ldi	r31, 0x25	; 37
     2a0:	00 e0       	ldi	r16, 0x00	; 0
     2a2:	0b bf       	out	0x3b, r16	; 59
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x14>
     2a6:	07 90       	elpm	r0, Z+
     2a8:	0d 92       	st	X+, r0
     2aa:	aa 36       	cpi	r26, 0x6A	; 106
     2ac:	b1 07       	cpc	r27, r17
     2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0x10>
     2b0:	1b be       	out	0x3b, r1	; 59

000002b2 <__do_clear_bss>:
     2b2:	20 e2       	ldi	r18, 0x20	; 32
     2b4:	aa e6       	ldi	r26, 0x6A	; 106
     2b6:	b0 e2       	ldi	r27, 0x20	; 32
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a5 3a       	cpi	r26, 0xA5	; 165
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <main>
     2c6:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <_exit>

000002ca <__bad_interrupt>:
     2ca:	9a ce       	rjmp	.-716    	; 0x0 <__vectors>

000002cc <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	1f 92       	push	r1
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2d6:	80 91 95 20 	lds	r24, 0x2095	; 0x802095 <stdio_base>
     2da:	90 91 96 20 	lds	r25, 0x2096	; 0x802096 <stdio_base+0x1>
     2de:	e0 91 91 20 	lds	r30, 0x2091	; 0x802091 <ptr_get>
     2e2:	f0 91 92 20 	lds	r31, 0x2092	; 0x802092 <ptr_get+0x1>
     2e6:	be 01       	movw	r22, r28
     2e8:	6f 5f       	subi	r22, 0xFF	; 255
     2ea:	7f 4f       	sbci	r23, 0xFF	; 255
     2ec:	19 95       	eicall
	return c;
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
}
     2f0:	08 2e       	mov	r0, r24
     2f2:	00 0c       	add	r0, r0
     2f4:	99 0b       	sbc	r25, r25
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2fe:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     300:	80 91 95 20 	lds	r24, 0x2095	; 0x802095 <stdio_base>
     304:	90 91 96 20 	lds	r25, 0x2096	; 0x802096 <stdio_base+0x1>
     308:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <ptr_put>
     30c:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <ptr_put+0x1>
     310:	19 95       	eicall
     312:	99 23       	and	r25, r25
     314:	1c f0       	brlt	.+6      	; 0x31c <_write+0x1e>
		return -1;
	}
	return 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     320:	08 95       	ret

00000322 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	08 b6       	in	r0, 0x38	; 56
     32e:	0f 92       	push	r0
     330:	18 be       	out	0x38, r1	; 56
     332:	09 b6       	in	r0, 0x39	; 57
     334:	0f 92       	push	r0
     336:	19 be       	out	0x39, r1	; 57
     338:	0b b6       	in	r0, 0x3b	; 59
     33a:	0f 92       	push	r0
     33c:	1b be       	out	0x3b, r1	; 59
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	4f 93       	push	r20
     344:	5f 93       	push	r21
     346:	6f 93       	push	r22
     348:	7f 93       	push	r23
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25
     34e:	af 93       	push	r26
     350:	bf 93       	push	r27
     352:	ef 93       	push	r30
     354:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     356:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     35a:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     35e:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <adca_callback>
     362:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <adca_callback+0x1>
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	19 95       	eicall
}
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	bf 91       	pop	r27
     374:	af 91       	pop	r26
     376:	9f 91       	pop	r25
     378:	8f 91       	pop	r24
     37a:	7f 91       	pop	r23
     37c:	6f 91       	pop	r22
     37e:	5f 91       	pop	r21
     380:	4f 91       	pop	r20
     382:	3f 91       	pop	r19
     384:	2f 91       	pop	r18
     386:	0f 90       	pop	r0
     388:	0b be       	out	0x3b, r0	; 59
     38a:	0f 90       	pop	r0
     38c:	09 be       	out	0x39, r0	; 57
     38e:	0f 90       	pop	r0
     390:	08 be       	out	0x38, r0	; 56
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	08 b6       	in	r0, 0x38	; 56
     3a8:	0f 92       	push	r0
     3aa:	18 be       	out	0x38, r1	; 56
     3ac:	09 b6       	in	r0, 0x39	; 57
     3ae:	0f 92       	push	r0
     3b0:	19 be       	out	0x39, r1	; 57
     3b2:	0b b6       	in	r0, 0x3b	; 59
     3b4:	0f 92       	push	r0
     3b6:	1b be       	out	0x3b, r1	; 59
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3d0:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3d4:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3d8:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <adca_callback>
     3dc:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <adca_callback+0x1>
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	19 95       	eicall
}
     3e8:	ff 91       	pop	r31
     3ea:	ef 91       	pop	r30
     3ec:	bf 91       	pop	r27
     3ee:	af 91       	pop	r26
     3f0:	9f 91       	pop	r25
     3f2:	8f 91       	pop	r24
     3f4:	7f 91       	pop	r23
     3f6:	6f 91       	pop	r22
     3f8:	5f 91       	pop	r21
     3fa:	4f 91       	pop	r20
     3fc:	3f 91       	pop	r19
     3fe:	2f 91       	pop	r18
     400:	0f 90       	pop	r0
     402:	0b be       	out	0x3b, r0	; 59
     404:	0f 90       	pop	r0
     406:	09 be       	out	0x39, r0	; 57
     408:	0f 90       	pop	r0
     40a:	08 be       	out	0x38, r0	; 56
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	08 b6       	in	r0, 0x38	; 56
     422:	0f 92       	push	r0
     424:	18 be       	out	0x38, r1	; 56
     426:	09 b6       	in	r0, 0x39	; 57
     428:	0f 92       	push	r0
     42a:	19 be       	out	0x39, r1	; 57
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	1b be       	out	0x3b, r1	; 59
     432:	2f 93       	push	r18
     434:	3f 93       	push	r19
     436:	4f 93       	push	r20
     438:	5f 93       	push	r21
     43a:	6f 93       	push	r22
     43c:	7f 93       	push	r23
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	af 93       	push	r26
     444:	bf 93       	push	r27
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     44a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     44e:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     452:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <adca_callback>
     456:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <adca_callback+0x1>
     45a:	64 e0       	ldi	r22, 0x04	; 4
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	19 95       	eicall
}
     462:	ff 91       	pop	r31
     464:	ef 91       	pop	r30
     466:	bf 91       	pop	r27
     468:	af 91       	pop	r26
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	7f 91       	pop	r23
     470:	6f 91       	pop	r22
     472:	5f 91       	pop	r21
     474:	4f 91       	pop	r20
     476:	3f 91       	pop	r19
     478:	2f 91       	pop	r18
     47a:	0f 90       	pop	r0
     47c:	0b be       	out	0x3b, r0	; 59
     47e:	0f 90       	pop	r0
     480:	09 be       	out	0x39, r0	; 57
     482:	0f 90       	pop	r0
     484:	08 be       	out	0x38, r0	; 56
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	08 b6       	in	r0, 0x38	; 56
     49c:	0f 92       	push	r0
     49e:	18 be       	out	0x38, r1	; 56
     4a0:	09 b6       	in	r0, 0x39	; 57
     4a2:	0f 92       	push	r0
     4a4:	19 be       	out	0x39, r1	; 57
     4a6:	0b b6       	in	r0, 0x3b	; 59
     4a8:	0f 92       	push	r0
     4aa:	1b be       	out	0x3b, r1	; 59
     4ac:	2f 93       	push	r18
     4ae:	3f 93       	push	r19
     4b0:	4f 93       	push	r20
     4b2:	5f 93       	push	r21
     4b4:	6f 93       	push	r22
     4b6:	7f 93       	push	r23
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4c4:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4c8:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4cc:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <adca_callback>
     4d0:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <adca_callback+0x1>
     4d4:	68 e0       	ldi	r22, 0x08	; 8
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	19 95       	eicall
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	bf 91       	pop	r27
     4e2:	af 91       	pop	r26
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	7f 91       	pop	r23
     4ea:	6f 91       	pop	r22
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	0f 90       	pop	r0
     4f6:	0b be       	out	0x3b, r0	; 59
     4f8:	0f 90       	pop	r0
     4fa:	09 be       	out	0x39, r0	; 57
     4fc:	0f 90       	pop	r0
     4fe:	08 be       	out	0x38, r0	; 56
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	08 b6       	in	r0, 0x38	; 56
     516:	0f 92       	push	r0
     518:	18 be       	out	0x38, r1	; 56
     51a:	09 b6       	in	r0, 0x39	; 57
     51c:	0f 92       	push	r0
     51e:	19 be       	out	0x39, r1	; 57
     520:	0b b6       	in	r0, 0x3b	; 59
     522:	0f 92       	push	r0
     524:	1b be       	out	0x3b, r1	; 59
     526:	2f 93       	push	r18
     528:	3f 93       	push	r19
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     53e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     542:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     546:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <adcb_callback>
     54a:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <adcb_callback+0x1>
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	80 e4       	ldi	r24, 0x40	; 64
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	19 95       	eicall
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0b be       	out	0x3b, r0	; 59
     572:	0f 90       	pop	r0
     574:	09 be       	out	0x39, r0	; 57
     576:	0f 90       	pop	r0
     578:	08 be       	out	0x38, r0	; 56
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	08 b6       	in	r0, 0x38	; 56
     590:	0f 92       	push	r0
     592:	18 be       	out	0x38, r1	; 56
     594:	09 b6       	in	r0, 0x39	; 57
     596:	0f 92       	push	r0
     598:	19 be       	out	0x39, r1	; 57
     59a:	0b b6       	in	r0, 0x3b	; 59
     59c:	0f 92       	push	r0
     59e:	1b be       	out	0x3b, r1	; 59
     5a0:	2f 93       	push	r18
     5a2:	3f 93       	push	r19
     5a4:	4f 93       	push	r20
     5a6:	5f 93       	push	r21
     5a8:	6f 93       	push	r22
     5aa:	7f 93       	push	r23
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5b8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     5bc:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     5c0:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <adcb_callback>
     5c4:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <adcb_callback+0x1>
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	80 e4       	ldi	r24, 0x40	; 64
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	19 95       	eicall
}
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0b be       	out	0x3b, r0	; 59
     5ec:	0f 90       	pop	r0
     5ee:	09 be       	out	0x39, r0	; 57
     5f0:	0f 90       	pop	r0
     5f2:	08 be       	out	0x38, r0	; 56
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	08 b6       	in	r0, 0x38	; 56
     60a:	0f 92       	push	r0
     60c:	18 be       	out	0x38, r1	; 56
     60e:	09 b6       	in	r0, 0x39	; 57
     610:	0f 92       	push	r0
     612:	19 be       	out	0x39, r1	; 57
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	1b be       	out	0x3b, r1	; 59
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     632:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     636:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     63a:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <adcb_callback>
     63e:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <adcb_callback+0x1>
     642:	64 e0       	ldi	r22, 0x04	; 4
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	19 95       	eicall
}
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0b be       	out	0x3b, r0	; 59
     666:	0f 90       	pop	r0
     668:	09 be       	out	0x39, r0	; 57
     66a:	0f 90       	pop	r0
     66c:	08 be       	out	0x38, r0	; 56
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	08 b6       	in	r0, 0x38	; 56
     684:	0f 92       	push	r0
     686:	18 be       	out	0x38, r1	; 56
     688:	09 b6       	in	r0, 0x39	; 57
     68a:	0f 92       	push	r0
     68c:	19 be       	out	0x39, r1	; 57
     68e:	0b b6       	in	r0, 0x3b	; 59
     690:	0f 92       	push	r0
     692:	1b be       	out	0x3b, r1	; 59
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	ef 93       	push	r30
     6aa:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6ac:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     6b0:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     6b4:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <adcb_callback>
     6b8:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <adcb_callback+0x1>
     6bc:	68 e0       	ldi	r22, 0x08	; 8
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	19 95       	eicall
}
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0b be       	out	0x3b, r0	; 59
     6e0:	0f 90       	pop	r0
     6e2:	09 be       	out	0x39, r0	; 57
     6e4:	0f 90       	pop	r0
     6e6:	08 be       	out	0x38, r0	; 56
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     6f2:	fc 01       	movw	r30, r24
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	95 ff       	sbrs	r25, 5
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <usart_putchar+0x2>
     6fa:	60 83       	st	Z, r22
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	08 95       	ret

00000702 <usart_getchar>:
     702:	fc 01       	movw	r30, r24
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	99 23       	and	r25, r25
     708:	ec f7       	brge	.-6      	; 0x704 <usart_getchar+0x2>
     70a:	80 81       	ld	r24, Z
     70c:	08 95       	ret

0000070e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     70e:	4f 92       	push	r4
     710:	5f 92       	push	r5
     712:	6f 92       	push	r6
     714:	7f 92       	push	r7
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	7c 01       	movw	r14, r24
     72a:	4a 01       	movw	r8, r20
     72c:	5b 01       	movw	r10, r22
     72e:	28 01       	movw	r4, r16
     730:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     732:	fc 01       	movw	r30, r24
     734:	84 81       	ldd	r24, Z+4	; 0x04
     736:	82 ff       	sbrs	r24, 2
     738:	16 c0       	rjmp	.+44     	; 0x766 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     73a:	d9 01       	movw	r26, r18
     73c:	c8 01       	movw	r24, r16
     73e:	68 94       	set
     740:	12 f8       	bld	r1, 2
     742:	b6 95       	lsr	r27
     744:	a7 95       	ror	r26
     746:	97 95       	ror	r25
     748:	87 95       	ror	r24
     74a:	16 94       	lsr	r1
     74c:	d1 f7       	brne	.-12     	; 0x742 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     74e:	b9 01       	movw	r22, r18
     750:	a8 01       	movw	r20, r16
     752:	03 2e       	mov	r0, r19
     754:	36 e1       	ldi	r19, 0x16	; 22
     756:	76 95       	lsr	r23
     758:	67 95       	ror	r22
     75a:	57 95       	ror	r21
     75c:	47 95       	ror	r20
     75e:	3a 95       	dec	r19
     760:	d1 f7       	brne	.-12     	; 0x756 <usart_set_baudrate+0x48>
     762:	30 2d       	mov	r19, r0
     764:	15 c0       	rjmp	.+42     	; 0x790 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     766:	d9 01       	movw	r26, r18
     768:	c8 01       	movw	r24, r16
     76a:	68 94       	set
     76c:	13 f8       	bld	r1, 3
     76e:	b6 95       	lsr	r27
     770:	a7 95       	ror	r26
     772:	97 95       	ror	r25
     774:	87 95       	ror	r24
     776:	16 94       	lsr	r1
     778:	d1 f7       	brne	.-12     	; 0x76e <usart_set_baudrate+0x60>
		min_rate /= 2;
     77a:	b9 01       	movw	r22, r18
     77c:	a8 01       	movw	r20, r16
     77e:	03 2e       	mov	r0, r19
     780:	37 e1       	ldi	r19, 0x17	; 23
     782:	76 95       	lsr	r23
     784:	67 95       	ror	r22
     786:	57 95       	ror	r21
     788:	47 95       	ror	r20
     78a:	3a 95       	dec	r19
     78c:	d1 f7       	brne	.-12     	; 0x782 <usart_set_baudrate+0x74>
     78e:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     790:	88 15       	cp	r24, r8
     792:	99 05       	cpc	r25, r9
     794:	aa 05       	cpc	r26, r10
     796:	bb 05       	cpc	r27, r11
     798:	08 f4       	brcc	.+2      	; 0x79c <usart_set_baudrate+0x8e>
     79a:	a6 c0       	rjmp	.+332    	; 0x8e8 <usart_set_baudrate+0x1da>
     79c:	84 16       	cp	r8, r20
     79e:	95 06       	cpc	r9, r21
     7a0:	a6 06       	cpc	r10, r22
     7a2:	b7 06       	cpc	r11, r23
     7a4:	08 f4       	brcc	.+2      	; 0x7a8 <usart_set_baudrate+0x9a>
     7a6:	a2 c0       	rjmp	.+324    	; 0x8ec <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     7a8:	f7 01       	movw	r30, r14
     7aa:	84 81       	ldd	r24, Z+4	; 0x04
     7ac:	82 fd       	sbrc	r24, 2
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <usart_set_baudrate+0xaa>
		baud *= 2;
     7b0:	88 0c       	add	r8, r8
     7b2:	99 1c       	adc	r9, r9
     7b4:	aa 1c       	adc	r10, r10
     7b6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     7b8:	c3 01       	movw	r24, r6
     7ba:	b2 01       	movw	r22, r4
     7bc:	a5 01       	movw	r20, r10
     7be:	94 01       	movw	r18, r8
     7c0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     7c4:	2f 3f       	cpi	r18, 0xFF	; 255
     7c6:	31 05       	cpc	r19, r1
     7c8:	41 05       	cpc	r20, r1
     7ca:	51 05       	cpc	r21, r1
     7cc:	08 f4       	brcc	.+2      	; 0x7d0 <usart_set_baudrate+0xc2>
     7ce:	90 c0       	rjmp	.+288    	; 0x8f0 <usart_set_baudrate+0x1e2>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	c9 ef       	ldi	r28, 0xF9	; 249
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <usart_set_baudrate+0xd8>
     7dc:	28 17       	cp	r18, r24
     7de:	39 07       	cpc	r19, r25
     7e0:	4a 07       	cpc	r20, r26
     7e2:	5b 07       	cpc	r21, r27
     7e4:	58 f0       	brcs	.+22     	; 0x7fc <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	aa 1f       	adc	r26, r26
     7ec:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     7ee:	cd 3f       	cpi	r28, 0xFD	; 253
     7f0:	0c f4       	brge	.+2      	; 0x7f4 <usart_set_baudrate+0xe6>
			limit |= 1;
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7f6:	c7 30       	cpi	r28, 0x07	; 7
     7f8:	89 f7       	brne	.-30     	; 0x7dc <usart_set_baudrate+0xce>
     7fa:	4f c0       	rjmp	.+158    	; 0x89a <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     7fc:	cc 23       	and	r28, r28
     7fe:	0c f0       	brlt	.+2      	; 0x802 <usart_set_baudrate+0xf4>
     800:	4c c0       	rjmp	.+152    	; 0x89a <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     802:	d5 01       	movw	r26, r10
     804:	c4 01       	movw	r24, r8
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	aa 1f       	adc	r26, r26
     80c:	bb 1f       	adc	r27, r27
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	aa 1f       	adc	r26, r26
     81c:	bb 1f       	adc	r27, r27
     81e:	48 1a       	sub	r4, r24
     820:	59 0a       	sbc	r5, r25
     822:	6a 0a       	sbc	r6, r26
     824:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     826:	ce 3f       	cpi	r28, 0xFE	; 254
     828:	f4 f4       	brge	.+60     	; 0x866 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     82a:	8d ef       	ldi	r24, 0xFD	; 253
     82c:	9f ef       	ldi	r25, 0xFF	; 255
     82e:	8c 1b       	sub	r24, r28
     830:	91 09       	sbc	r25, r1
     832:	c7 fd       	sbrc	r28, 7
     834:	93 95       	inc	r25
     836:	04 c0       	rjmp	.+8      	; 0x840 <usart_set_baudrate+0x132>
     838:	44 0c       	add	r4, r4
     83a:	55 1c       	adc	r5, r5
     83c:	66 1c       	adc	r6, r6
     83e:	77 1c       	adc	r7, r7
     840:	8a 95       	dec	r24
     842:	d2 f7       	brpl	.-12     	; 0x838 <usart_set_baudrate+0x12a>
     844:	d5 01       	movw	r26, r10
     846:	c4 01       	movw	r24, r8
     848:	b6 95       	lsr	r27
     84a:	a7 95       	ror	r26
     84c:	97 95       	ror	r25
     84e:	87 95       	ror	r24
     850:	bc 01       	movw	r22, r24
     852:	cd 01       	movw	r24, r26
     854:	64 0d       	add	r22, r4
     856:	75 1d       	adc	r23, r5
     858:	86 1d       	adc	r24, r6
     85a:	97 1d       	adc	r25, r7
     85c:	a5 01       	movw	r20, r10
     85e:	94 01       	movw	r18, r8
     860:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__udivmodsi4>
     864:	37 c0       	rjmp	.+110    	; 0x8d4 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	8c 0f       	add	r24, r28
     86a:	a5 01       	movw	r20, r10
     86c:	94 01       	movw	r18, r8
     86e:	04 c0       	rjmp	.+8      	; 0x878 <usart_set_baudrate+0x16a>
     870:	22 0f       	add	r18, r18
     872:	33 1f       	adc	r19, r19
     874:	44 1f       	adc	r20, r20
     876:	55 1f       	adc	r21, r21
     878:	8a 95       	dec	r24
     87a:	d2 f7       	brpl	.-12     	; 0x870 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     87c:	da 01       	movw	r26, r20
     87e:	c9 01       	movw	r24, r18
     880:	b6 95       	lsr	r27
     882:	a7 95       	ror	r26
     884:	97 95       	ror	r25
     886:	87 95       	ror	r24
     888:	bc 01       	movw	r22, r24
     88a:	cd 01       	movw	r24, r26
     88c:	64 0d       	add	r22, r4
     88e:	75 1d       	adc	r23, r5
     890:	86 1d       	adc	r24, r6
     892:	97 1d       	adc	r25, r7
     894:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__udivmodsi4>
     898:	1d c0       	rjmp	.+58     	; 0x8d4 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     89a:	83 e0       	ldi	r24, 0x03	; 3
     89c:	8c 0f       	add	r24, r28
     89e:	a5 01       	movw	r20, r10
     8a0:	94 01       	movw	r18, r8
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <usart_set_baudrate+0x19e>
     8a4:	22 0f       	add	r18, r18
     8a6:	33 1f       	adc	r19, r19
     8a8:	44 1f       	adc	r20, r20
     8aa:	55 1f       	adc	r21, r21
     8ac:	8a 95       	dec	r24
     8ae:	d2 f7       	brpl	.-12     	; 0x8a4 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     8b0:	da 01       	movw	r26, r20
     8b2:	c9 01       	movw	r24, r18
     8b4:	b6 95       	lsr	r27
     8b6:	a7 95       	ror	r26
     8b8:	97 95       	ror	r25
     8ba:	87 95       	ror	r24
     8bc:	bc 01       	movw	r22, r24
     8be:	cd 01       	movw	r24, r26
     8c0:	64 0d       	add	r22, r4
     8c2:	75 1d       	adc	r23, r5
     8c4:	86 1d       	adc	r24, r6
     8c6:	97 1d       	adc	r25, r7
     8c8:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__udivmodsi4>
     8cc:	21 50       	subi	r18, 0x01	; 1
     8ce:	31 09       	sbc	r19, r1
     8d0:	41 09       	sbc	r20, r1
     8d2:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     8d4:	83 2f       	mov	r24, r19
     8d6:	8f 70       	andi	r24, 0x0F	; 15
     8d8:	c2 95       	swap	r28
     8da:	c0 7f       	andi	r28, 0xF0	; 240
     8dc:	c8 2b       	or	r28, r24
     8de:	f7 01       	movw	r30, r14
     8e0:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8e2:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	18 c0       	rjmp	.+48     	; 0x918 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	16 c0       	rjmp	.+44     	; 0x918 <usart_set_baudrate+0x20a>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	14 c0       	rjmp	.+40     	; 0x918 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8f0:	d5 01       	movw	r26, r10
     8f2:	c4 01       	movw	r24, r8
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	aa 1f       	adc	r26, r26
     8fa:	bb 1f       	adc	r27, r27
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	aa 1f       	adc	r26, r26
     902:	bb 1f       	adc	r27, r27
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	aa 1f       	adc	r26, r26
     90a:	bb 1f       	adc	r27, r27
     90c:	48 1a       	sub	r4, r24
     90e:	59 0a       	sbc	r5, r25
     910:	6a 0a       	sbc	r6, r26
     912:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     914:	c9 ef       	ldi	r28, 0xF9	; 249
     916:	89 cf       	rjmp	.-238    	; 0x82a <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	bf 90       	pop	r11
     924:	af 90       	pop	r10
     926:	9f 90       	pop	r9
     928:	8f 90       	pop	r8
     92a:	7f 90       	pop	r7
     92c:	6f 90       	pop	r6
     92e:	5f 90       	pop	r5
     930:	4f 90       	pop	r4
     932:	08 95       	ret

00000934 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
     93e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	09 f4       	brne	.+2      	; 0x946 <usart_init_rs232+0x12>
     944:	36 c1       	rjmp	.+620    	; 0xbb2 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     946:	80 3c       	cpi	r24, 0xC0	; 192
     948:	91 05       	cpc	r25, r1
     94a:	21 f4       	brne	.+8      	; 0x954 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     94c:	60 e1       	ldi	r22, 0x10	; 16
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	f5 d2       	rcall	.+1514   	; 0xf3c <sysclk_enable_module>
     952:	2f c1       	rjmp	.+606    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     954:	c0 34       	cpi	r28, 0x40	; 64
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	d8 07       	cpc	r29, r24
     95a:	21 f4       	brne	.+8      	; 0x964 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     95c:	68 e0       	ldi	r22, 0x08	; 8
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	ed d2       	rcall	.+1498   	; 0xf3c <sysclk_enable_module>
     962:	27 c1       	rjmp	.+590    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     964:	c1 15       	cp	r28, r1
     966:	e4 e0       	ldi	r30, 0x04	; 4
     968:	de 07       	cpc	r29, r30
     96a:	21 f4       	brne	.+8      	; 0x974 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     96c:	64 e0       	ldi	r22, 0x04	; 4
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	e5 d2       	rcall	.+1482   	; 0xf3c <sysclk_enable_module>
     972:	1f c1       	rjmp	.+574    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     974:	c0 38       	cpi	r28, 0x80	; 128
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     97a:	21 f4       	brne	.+8      	; 0x984 <usart_init_rs232+0x50>
     97c:	62 e0       	ldi	r22, 0x02	; 2
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	dd d2       	rcall	.+1466   	; 0xf3c <sysclk_enable_module>
     982:	17 c1       	rjmp	.+558    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     984:	c1 15       	cp	r28, r1
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     98a:	21 f4       	brne	.+8      	; 0x994 <usart_init_rs232+0x60>
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	d5 d2       	rcall	.+1450   	; 0xf3c <sysclk_enable_module>
     992:	0f c1       	rjmp	.+542    	; 0xbb2 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     994:	c0 38       	cpi	r28, 0x80	; 128
     996:	e3 e0       	ldi	r30, 0x03	; 3
     998:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     99a:	21 f4       	brne	.+8      	; 0x9a4 <usart_init_rs232+0x70>
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	cd d2       	rcall	.+1434   	; 0xf3c <sysclk_enable_module>
     9a2:	07 c1       	rjmp	.+526    	; 0xbb2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     9a4:	c0 39       	cpi	r28, 0x90	; 144
     9a6:	f3 e0       	ldi	r31, 0x03	; 3
     9a8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <usart_init_rs232+0x80>
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	c5 d2       	rcall	.+1418   	; 0xf3c <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     9b2:	ff c0       	rjmp	.+510    	; 0xbb2 <usart_init_rs232+0x27e>
     9b4:	c1 15       	cp	r28, r1
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9ba:	21 f4       	brne	.+8      	; 0x9c4 <usart_init_rs232+0x90>
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	bd d2       	rcall	.+1402   	; 0xf3c <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     9c2:	f7 c0       	rjmp	.+494    	; 0xbb2 <usart_init_rs232+0x27e>
     9c4:	c0 34       	cpi	r28, 0x40	; 64
     9c6:	e2 e0       	ldi	r30, 0x02	; 2
     9c8:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     9ca:	21 f4       	brne	.+8      	; 0x9d4 <usart_init_rs232+0xa0>
     9cc:	62 e0       	ldi	r22, 0x02	; 2
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	b5 d2       	rcall	.+1386   	; 0xf3c <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     9d2:	ef c0       	rjmp	.+478    	; 0xbb2 <usart_init_rs232+0x27e>
     9d4:	c1 15       	cp	r28, r1
     9d6:	f3 e0       	ldi	r31, 0x03	; 3
     9d8:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     9da:	21 f4       	brne	.+8      	; 0x9e4 <usart_init_rs232+0xb0>
     9dc:	64 e0       	ldi	r22, 0x04	; 4
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	ad d2       	rcall	.+1370   	; 0xf3c <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9e2:	e7 c0       	rjmp	.+462    	; 0xbb2 <usart_init_rs232+0x27e>
     9e4:	c0 32       	cpi	r28, 0x20	; 32
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <usart_init_rs232+0xc0>
     9ec:	64 e0       	ldi	r22, 0x04	; 4
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	a5 d2       	rcall	.+1354   	; 0xf3c <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9f2:	df c0       	rjmp	.+446    	; 0xbb2 <usart_init_rs232+0x27e>
     9f4:	c1 15       	cp	r28, r1
     9f6:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9f8:	de 07       	cpc	r29, r30
     9fa:	21 f4       	brne	.+8      	; 0xa04 <usart_init_rs232+0xd0>
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	9d d2       	rcall	.+1338   	; 0xf3c <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     a02:	d7 c0       	rjmp	.+430    	; 0xbb2 <usart_init_rs232+0x27e>
     a04:	c1 15       	cp	r28, r1
     a06:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     a08:	df 07       	cpc	r29, r31
     a0a:	21 f4       	brne	.+8      	; 0xa14 <usart_init_rs232+0xe0>
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	95 d2       	rcall	.+1322   	; 0xf3c <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     a12:	cf c0       	rjmp	.+414    	; 0xbb2 <usart_init_rs232+0x27e>
     a14:	c1 15       	cp	r28, r1
     a16:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     a18:	d8 07       	cpc	r29, r24
     a1a:	21 f4       	brne	.+8      	; 0xa24 <usart_init_rs232+0xf0>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	8d d2       	rcall	.+1306   	; 0xf3c <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     a22:	c7 c0       	rjmp	.+398    	; 0xbb2 <usart_init_rs232+0x27e>
     a24:	c1 15       	cp	r28, r1
     a26:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     a28:	de 07       	cpc	r29, r30
     a2a:	21 f4       	brne	.+8      	; 0xa34 <usart_init_rs232+0x100>
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     a30:	85 d2       	rcall	.+1290   	; 0xf3c <sysclk_enable_module>
     a32:	bf c0       	rjmp	.+382    	; 0xbb2 <usart_init_rs232+0x27e>
     a34:	c0 34       	cpi	r28, 0x40	; 64
     a36:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a38:	df 07       	cpc	r29, r31
     a3a:	21 f4       	brne	.+8      	; 0xa44 <usart_init_rs232+0x110>
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a40:	7d d2       	rcall	.+1274   	; 0xf3c <sysclk_enable_module>
     a42:	b7 c0       	rjmp	.+366    	; 0xbb2 <usart_init_rs232+0x27e>
     a44:	c0 34       	cpi	r28, 0x40	; 64
     a46:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a48:	d8 07       	cpc	r29, r24
     a4a:	21 f4       	brne	.+8      	; 0xa54 <usart_init_rs232+0x120>
     a4c:	62 e0       	ldi	r22, 0x02	; 2
     a4e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     a50:	75 d2       	rcall	.+1258   	; 0xf3c <sysclk_enable_module>
     a52:	af c0       	rjmp	.+350    	; 0xbb2 <usart_init_rs232+0x27e>
     a54:	c0 34       	cpi	r28, 0x40	; 64
     a56:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     a58:	de 07       	cpc	r29, r30
     a5a:	21 f4       	brne	.+8      	; 0xa64 <usart_init_rs232+0x130>
     a5c:	62 e0       	ldi	r22, 0x02	; 2
     a5e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     a60:	6d d2       	rcall	.+1242   	; 0xf3c <sysclk_enable_module>
     a62:	a7 c0       	rjmp	.+334    	; 0xbb2 <usart_init_rs232+0x27e>
     a64:	c0 34       	cpi	r28, 0x40	; 64
     a66:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     a68:	df 07       	cpc	r29, r31
     a6a:	21 f4       	brne	.+8      	; 0xa74 <usart_init_rs232+0x140>
     a6c:	62 e0       	ldi	r22, 0x02	; 2
     a6e:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a70:	65 d2       	rcall	.+1226   	; 0xf3c <sysclk_enable_module>
     a72:	9f c0       	rjmp	.+318    	; 0xbb2 <usart_init_rs232+0x27e>
     a74:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	d8 07       	cpc	r29, r24
     a7a:	21 f4       	brne	.+8      	; 0xa84 <usart_init_rs232+0x150>
     a7c:	64 e0       	ldi	r22, 0x04	; 4
     a7e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a80:	5d d2       	rcall	.+1210   	; 0xf3c <sysclk_enable_module>
     a82:	97 c0       	rjmp	.+302    	; 0xbb2 <usart_init_rs232+0x27e>
     a84:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a86:	e9 e0       	ldi	r30, 0x09	; 9
     a88:	de 07       	cpc	r29, r30
     a8a:	21 f4       	brne	.+8      	; 0xa94 <usart_init_rs232+0x160>
     a8c:	64 e0       	ldi	r22, 0x04	; 4
     a8e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a90:	55 d2       	rcall	.+1194   	; 0xf3c <sysclk_enable_module>
     a92:	8f c0       	rjmp	.+286    	; 0xbb2 <usart_init_rs232+0x27e>
     a94:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a96:	fa e0       	ldi	r31, 0x0A	; 10
     a98:	df 07       	cpc	r29, r31
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <usart_init_rs232+0x170>
     a9c:	64 e0       	ldi	r22, 0x04	; 4
     a9e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     aa0:	4d d2       	rcall	.+1178   	; 0xf3c <sysclk_enable_module>
     aa2:	87 c0       	rjmp	.+270    	; 0xbb2 <usart_init_rs232+0x27e>
     aa4:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     aa6:	8b e0       	ldi	r24, 0x0B	; 11
     aa8:	d8 07       	cpc	r29, r24
     aaa:	21 f4       	brne	.+8      	; 0xab4 <usart_init_rs232+0x180>
     aac:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     aae:	86 e0       	ldi	r24, 0x06	; 6
     ab0:	45 d2       	rcall	.+1162   	; 0xf3c <sysclk_enable_module>
     ab2:	7f c0       	rjmp	.+254    	; 0xbb2 <usart_init_rs232+0x27e>
     ab4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     ab6:	e8 e0       	ldi	r30, 0x08	; 8
     ab8:	de 07       	cpc	r29, r30
     aba:	21 f4       	brne	.+8      	; 0xac4 <usart_init_rs232+0x190>
     abc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	3d d2       	rcall	.+1146   	; 0xf3c <sysclk_enable_module>
     ac2:	77 c0       	rjmp	.+238    	; 0xbb2 <usart_init_rs232+0x27e>
     ac4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ac6:	f9 e0       	ldi	r31, 0x09	; 9
     ac8:	df 07       	cpc	r29, r31
     aca:	21 f4       	brne	.+8      	; 0xad4 <usart_init_rs232+0x1a0>
     acc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     ace:	84 e0       	ldi	r24, 0x04	; 4
     ad0:	35 d2       	rcall	.+1130   	; 0xf3c <sysclk_enable_module>
     ad2:	6f c0       	rjmp	.+222    	; 0xbb2 <usart_init_rs232+0x27e>
     ad4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ad6:	8a e0       	ldi	r24, 0x0A	; 10
     ad8:	d8 07       	cpc	r29, r24
     ada:	21 f4       	brne	.+8      	; 0xae4 <usart_init_rs232+0x1b0>
     adc:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     ade:	85 e0       	ldi	r24, 0x05	; 5
     ae0:	2d d2       	rcall	.+1114   	; 0xf3c <sysclk_enable_module>
     ae2:	67 c0       	rjmp	.+206    	; 0xbb2 <usart_init_rs232+0x27e>
     ae4:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     ae6:	eb e0       	ldi	r30, 0x0B	; 11
     ae8:	de 07       	cpc	r29, r30
     aea:	21 f4       	brne	.+8      	; 0xaf4 <usart_init_rs232+0x1c0>
     aec:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	25 d2       	rcall	.+1098   	; 0xf3c <sysclk_enable_module>
     af2:	5f c0       	rjmp	.+190    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     af4:	c0 3a       	cpi	r28, 0xA0	; 160
     af6:	f8 e0       	ldi	r31, 0x08	; 8
     af8:	df 07       	cpc	r29, r31
     afa:	21 f4       	brne	.+8      	; 0xb04 <usart_init_rs232+0x1d0>
     afc:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	1d d2       	rcall	.+1082   	; 0xf3c <sysclk_enable_module>
     b02:	57 c0       	rjmp	.+174    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     b04:	c0 3a       	cpi	r28, 0xA0	; 160
     b06:	89 e0       	ldi	r24, 0x09	; 9
     b08:	d8 07       	cpc	r29, r24
     b0a:	21 f4       	brne	.+8      	; 0xb14 <usart_init_rs232+0x1e0>
     b0c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	15 d2       	rcall	.+1066   	; 0xf3c <sysclk_enable_module>
     b12:	4f c0       	rjmp	.+158    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b14:	c0 3a       	cpi	r28, 0xA0	; 160
     b16:	ea e0       	ldi	r30, 0x0A	; 10
     b18:	de 07       	cpc	r29, r30
     b1a:	21 f4       	brne	.+8      	; 0xb24 <usart_init_rs232+0x1f0>
     b1c:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     b1e:	85 e0       	ldi	r24, 0x05	; 5
     b20:	0d d2       	rcall	.+1050   	; 0xf3c <sysclk_enable_module>
     b22:	47 c0       	rjmp	.+142    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     b24:	c0 3a       	cpi	r28, 0xA0	; 160
     b26:	fb e0       	ldi	r31, 0x0B	; 11
     b28:	df 07       	cpc	r29, r31
     b2a:	21 f4       	brne	.+8      	; 0xb34 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     b2c:	60 e1       	ldi	r22, 0x10	; 16
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	05 d2       	rcall	.+1034   	; 0xf3c <sysclk_enable_module>
     b32:	3f c0       	rjmp	.+126    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     b34:	c0 3b       	cpi	r28, 0xB0	; 176
     b36:	88 e0       	ldi	r24, 0x08	; 8
     b38:	d8 07       	cpc	r29, r24
     b3a:	21 f4       	brne	.+8      	; 0xb44 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b3c:	60 e2       	ldi	r22, 0x20	; 32
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	fd d1       	rcall	.+1018   	; 0xf3c <sysclk_enable_module>
     b42:	37 c0       	rjmp	.+110    	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b44:	c0 3b       	cpi	r28, 0xB0	; 176
     b46:	e9 e0       	ldi	r30, 0x09	; 9
     b48:	de 07       	cpc	r29, r30
     b4a:	21 f4       	brne	.+8      	; 0xb54 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     b4c:	60 e2       	ldi	r22, 0x20	; 32
     b4e:	84 e0       	ldi	r24, 0x04	; 4
     b50:	f5 d1       	rcall	.+1002   	; 0xf3c <sysclk_enable_module>
     b52:	2f c0       	rjmp	.+94     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     b54:	c0 3b       	cpi	r28, 0xB0	; 176
     b56:	fa e0       	ldi	r31, 0x0A	; 10
     b58:	df 07       	cpc	r29, r31
     b5a:	21 f4       	brne	.+8      	; 0xb64 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     b5c:	60 e2       	ldi	r22, 0x20	; 32
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	ed d1       	rcall	.+986    	; 0xf3c <sysclk_enable_module>
     b62:	27 c0       	rjmp	.+78     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     b64:	c0 3b       	cpi	r28, 0xB0	; 176
     b66:	8b e0       	ldi	r24, 0x0B	; 11
     b68:	d8 07       	cpc	r29, r24
     b6a:	21 f4       	brne	.+8      	; 0xb74 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b6c:	60 e2       	ldi	r22, 0x20	; 32
     b6e:	86 e0       	ldi	r24, 0x06	; 6
     b70:	e5 d1       	rcall	.+970    	; 0xf3c <sysclk_enable_module>
     b72:	1f c0       	rjmp	.+62     	; 0xbb2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b74:	c0 38       	cpi	r28, 0x80	; 128
     b76:	e4 e0       	ldi	r30, 0x04	; 4
     b78:	de 07       	cpc	r29, r30
     b7a:	21 f4       	brne	.+8      	; 0xb84 <usart_init_rs232+0x250>
     b7c:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	dd d1       	rcall	.+954    	; 0xf3c <sysclk_enable_module>
     b82:	17 c0       	rjmp	.+46     	; 0xbb2 <usart_init_rs232+0x27e>
     b84:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     b86:	f4 e0       	ldi	r31, 0x04	; 4
     b88:	df 07       	cpc	r29, r31
     b8a:	21 f4       	brne	.+8      	; 0xb94 <usart_init_rs232+0x260>
     b8c:	60 e4       	ldi	r22, 0x40	; 64
     b8e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b90:	d5 d1       	rcall	.+938    	; 0xf3c <sysclk_enable_module>
     b92:	0f c0       	rjmp	.+30     	; 0xbb2 <usart_init_rs232+0x27e>
     b94:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	d8 07       	cpc	r29, r24
     b9a:	21 f4       	brne	.+8      	; 0xba4 <usart_init_rs232+0x270>
     b9c:	60 e4       	ldi	r22, 0x40	; 64
     b9e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     ba0:	cd d1       	rcall	.+922    	; 0xf3c <sysclk_enable_module>
     ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <usart_init_rs232+0x27e>
     ba4:	c0 3b       	cpi	r28, 0xB0	; 176
     ba6:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     ba8:	de 07       	cpc	r29, r30
     baa:	19 f4       	brne	.+6      	; 0xbb2 <usart_init_rs232+0x27e>
     bac:	60 e4       	ldi	r22, 0x40	; 64
     bae:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     bb0:	c5 d1       	rcall	.+906    	; 0xf3c <sysclk_enable_module>
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     bb6:	8d 83       	std	Y+5, r24	; 0x05
     bb8:	f8 01       	movw	r30, r16
     bba:	95 81       	ldd	r25, Z+5	; 0x05
     bbc:	84 81       	ldd	r24, Z+4	; 0x04
     bbe:	89 2b       	or	r24, r25
     bc0:	96 81       	ldd	r25, Z+6	; 0x06
     bc2:	91 11       	cpse	r25, r1
     bc4:	98 e0       	ldi	r25, 0x08	; 8
     bc6:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     bc8:	8d 83       	std	Y+5, r24	; 0x05
     bca:	f8 01       	movw	r30, r16
     bcc:	40 81       	ld	r20, Z
     bce:	51 81       	ldd	r21, Z+1	; 0x01
     bd0:	62 81       	ldd	r22, Z+2	; 0x02
     bd2:	73 81       	ldd	r23, Z+3	; 0x03
     bd4:	00 e0       	ldi	r16, 0x00	; 0
     bd6:	18 e4       	ldi	r17, 0x48	; 72
     bd8:	28 ee       	ldi	r18, 0xE8	; 232
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	ce 01       	movw	r24, r28
     bde:	97 dd       	rcall	.-1234   	; 0x70e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	98 60       	ori	r25, 0x08	; 8
     be4:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	90 61       	ori	r25, 0x10	; 16
     bea:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret

00000bf6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     bf8:	61 50       	subi	r22, 0x01	; 1
     bfa:	71 09       	sbc	r23, r1
     bfc:	81 09       	sbc	r24, r1
     bfe:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     c00:	61 15       	cp	r22, r1
     c02:	71 05       	cpc	r23, r1
     c04:	81 05       	cpc	r24, r1
     c06:	91 05       	cpc	r25, r1
     c08:	b9 f7       	brne	.-18     	; 0xbf8 <__portable_avr_delay_cycles+0x2>
     c0a:	08 95       	ret

00000c0c <flip_ms5607>:
	rx_data |= spi_read();
	flip_ms5607();
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     c0c:	e0 e4       	ldi	r30, 0x40	; 64
     c0e:	f6 e0       	ldi	r31, 0x06	; 6
     c10:	94 81       	ldd	r25, Z+4	; 0x04
     c12:	80 e1       	ldi	r24, 0x10	; 16
     c14:	89 27       	eor	r24, r25
     c16:	84 83       	std	Z+4, r24	; 0x04
     c18:	08 95       	ret

00000c1a <ms5607_init>:
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	// Resets the ms5607
	flip_ms5607();
     c1a:	f8 df       	rcall	.-16     	; 0xc0c <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     c1c:	8e e1       	ldi	r24, 0x1E	; 30
     c1e:	78 d0       	rcall	.+240    	; 0xd10 <spi_write>
	delay_ms(3);
     c20:	60 e8       	ldi	r22, 0x80	; 128
     c22:	7e e3       	ldi	r23, 0x3E	; 62
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     c28:	e6 df       	rcall	.-52     	; 0xbf6 <__portable_avr_delay_cycles>
     c2a:	f0 df       	rcall	.-32     	; 0xc0c <flip_ms5607>
	delay_ms(2);
     c2c:	6b ea       	ldi	r22, 0xAB	; 171
     c2e:	79 e2       	ldi	r23, 0x29	; 41
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	e0 cf       	rjmp	.-64     	; 0xbf6 <__portable_avr_delay_cycles>
     c36:	08 95       	ret

00000c38 <ms5607_read>:
}

uint16_t ms5607_read(uint16_t comm)
{
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     c3e:	e6 df       	rcall	.-52     	; 0xc0c <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     c40:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     c42:	66 d0       	rcall	.+204    	; 0xd10 <spi_write>
     c44:	5a d0       	rcall	.+180    	; 0xcfa <spi_read>
     c46:	c8 2f       	mov	r28, r24
     c48:	d0 e0       	ldi	r29, 0x00	; 0
     c4a:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     c4c:	cc 27       	eor	r28, r28
     c4e:	55 d0       	rcall	.+170    	; 0xcfa <spi_read>
     c50:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     c52:	dc df       	rcall	.-72     	; 0xc0c <flip_ms5607>
     c54:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <ms5607_convert_d1>:
     c5c:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     c64:	d3 df       	rcall	.-90     	; 0xc0c <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     c66:	88 e4       	ldi	r24, 0x48	; 72
     c68:	53 d0       	rcall	.+166    	; 0xd10 <spi_write>
	delay_ms(10);
     c6a:	66 e5       	ldi	r22, 0x56	; 86
     c6c:	70 ed       	ldi	r23, 0xD0	; 208
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     c72:	c1 df       	rcall	.-126    	; 0xbf6 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     c74:	cb df       	rcall	.-106    	; 0xc0c <flip_ms5607>
     c76:	ca df       	rcall	.-108    	; 0xc0c <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	4a d0       	rcall	.+148    	; 0xd10 <spi_write>
     c7c:	3e d0       	rcall	.+124    	; 0xcfa <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     c7e:	c8 2e       	mov	r12, r24
     c80:	d1 2c       	mov	r13, r1
     c82:	e1 2c       	mov	r14, r1
     c84:	f1 2c       	mov	r15, r1
     c86:	76 01       	movw	r14, r12
     c88:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     c8a:	cc 24       	eor	r12, r12
     c8c:	36 d0       	rcall	.+108    	; 0xcfa <spi_read>
     c8e:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     c90:	34 d0       	rcall	.+104    	; 0xcfa <spi_read>
     c92:	c8 2a       	or	r12, r24
     c94:	bb df       	rcall	.-138    	; 0xc0c <flip_ms5607>
	flip_ms5607();
     c96:	c7 01       	movw	r24, r14
     c98:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	08 95       	ret

00000ca4 <ms5607_convert_d2>:
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     cac:	af df       	rcall	.-162    	; 0xc0c <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     cae:	88 e5       	ldi	r24, 0x58	; 88
     cb0:	2f d0       	rcall	.+94     	; 0xd10 <spi_write>
	delay_ms(10);
     cb2:	66 e5       	ldi	r22, 0x56	; 86
     cb4:	70 ed       	ldi	r23, 0xD0	; 208
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     cba:	9d df       	rcall	.-198    	; 0xbf6 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     cbc:	a7 df       	rcall	.-178    	; 0xc0c <flip_ms5607>
     cbe:	a6 df       	rcall	.-180    	; 0xc0c <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	26 d0       	rcall	.+76     	; 0xd10 <spi_write>
     cc4:	1a d0       	rcall	.+52     	; 0xcfa <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     cc6:	c8 2e       	mov	r12, r24
     cc8:	d1 2c       	mov	r13, r1
     cca:	e1 2c       	mov	r14, r1
     ccc:	f1 2c       	mov	r15, r1
     cce:	76 01       	movw	r14, r12
     cd0:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     cd2:	cc 24       	eor	r12, r12
     cd4:	12 d0       	rcall	.+36     	; 0xcfa <spi_read>
     cd6:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     cd8:	10 d0       	rcall	.+32     	; 0xcfa <spi_read>
     cda:	c8 2a       	or	r12, r24
     cdc:	97 df       	rcall	.-210    	; 0xc0c <flip_ms5607>
	flip_ms5607();
     cde:	c7 01       	movw	r24, r14
     ce0:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	08 95       	ret

00000cec <spi_init>:
     cec:	68 e0       	ldi	r22, 0x08	; 8
     cee:	83 e0       	ldi	r24, 0x03	; 3
	SPIC.CTRL = 0x51; //enables SPI and puts a  prescaler of 16
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     cf0:	25 d1       	rcall	.+586    	; 0xf3c <sysclk_enable_module>
     cf2:	81 e5       	ldi	r24, 0x51	; 81
     cf4:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     cf8:	08 95       	ret

00000cfa <spi_read>:
}

uint8_t spi_read(void)
{
	SPIC.DATA = 0xFF; // make the DATA register something we know
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait for the SPI interrupt flag to let us know the transfer is complete
     d00:	e0 ec       	ldi	r30, 0xC0	; 192
     d02:	f8 e0       	ldi	r31, 0x08	; 8
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	88 23       	and	r24, r24
     d08:	ec f7       	brge	.-6      	; 0xd04 <spi_read+0xa>
	
	return SPIC.DATA; // return the data from this function
     d0a:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     d0e:	08 95       	ret

00000d10 <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     d10:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     d14:	e0 ec       	ldi	r30, 0xC0	; 192
     d16:	f8 e0       	ldi	r31, 0x08	; 8
     d18:	82 81       	ldd	r24, Z+2	; 0x02
     d1a:	88 23       	and	r24, r24
     d1c:	ec f7       	brge	.-6      	; 0xd18 <spi_write+0x8>
     d1e:	08 95       	ret

00000d20 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     d26:	ed dc       	rcall	.-1574   	; 0x702 <usart_getchar>
     d28:	88 83       	st	Y, r24
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     d30:	e0 cc       	rjmp	.-1600   	; 0x6f2 <usart_putchar>
}
     d32:	08 95       	ret

00000d34 <data_terminal_init>:

#include <asf.h>
#include "uart.h"

void data_terminal_init()
{
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	27 97       	sbiw	r28, 0x07	; 7
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     d42:	60 e1       	ldi	r22, 0x10	; 16
     d44:	85 e0       	ldi	r24, 0x05	; 5
     d46:	fa d0       	rcall	.+500    	; 0xf3c <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     d48:	e0 e8       	ldi	r30, 0x80	; 128
     d4a:	f6 e0       	ldi	r31, 0x06	; 6
     d4c:	80 81       	ld	r24, Z
     d4e:	88 60       	ori	r24, 0x08	; 8
     d50:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     d52:	80 ea       	ldi	r24, 0xA0	; 160
     d54:	9a e0       	ldi	r25, 0x0A	; 10
     d56:	80 93 95 20 	sts	0x2095, r24	; 0x802095 <stdio_base>
     d5a:	90 93 96 20 	sts	0x2096, r25	; 0x802096 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     d5e:	88 e9       	ldi	r24, 0x98	; 152
     d60:	96 e0       	ldi	r25, 0x06	; 6
     d62:	80 93 93 20 	sts	0x2093, r24	; 0x802093 <ptr_put>
     d66:	90 93 94 20 	sts	0x2094, r25	; 0x802094 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     d6a:	80 e9       	ldi	r24, 0x90	; 144
     d6c:	96 e0       	ldi	r25, 0x06	; 6
     d6e:	80 93 91 20 	sts	0x2091, r24	; 0x802091 <ptr_get>
     d72:	90 93 92 20 	sts	0x2092, r25	; 0x802092 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     d76:	e6 e0       	ldi	r30, 0x06	; 6
     d78:	f0 e2       	ldi	r31, 0x20	; 32
     d7a:	84 81       	ldd	r24, Z+4	; 0x04
     d7c:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     d7e:	85 81       	ldd	r24, Z+5	; 0x05
     d80:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     d82:	86 81       	ldd	r24, Z+6	; 0x06
     d84:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	a2 81       	ldd	r26, Z+2	; 0x02
     d8c:	b3 81       	ldd	r27, Z+3	; 0x03
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	ab 83       	std	Y+3, r26	; 0x03
     d94:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     d96:	60 e1       	ldi	r22, 0x10	; 16
     d98:	85 e0       	ldi	r24, 0x05	; 5
     d9a:	d0 d0       	rcall	.+416    	; 0xf3c <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     d9c:	be 01       	movw	r22, r28
     d9e:	6f 5f       	subi	r22, 0xFF	; 255
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	80 ea       	ldi	r24, 0xA0	; 160
     da4:	9a e0       	ldi	r25, 0x0A	; 10
     da6:	c6 dd       	rcall	.-1140   	; 0x934 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     da8:	66 e6       	ldi	r22, 0x66	; 102
     daa:	71 e0       	ldi	r23, 0x01	; 1
     dac:	8f e7       	ldi	r24, 0x7F	; 127
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	6b d7       	rcall	.+3798   	; 0x1c88 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
	
     db2:	27 96       	adiw	r28, 0x07	; 7
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <rbu8_init>:
			if (buffer->tail == buffer->array_length){
				buffer->tail = 0;
			}// end if
		} // end if
	} // end for
} // end write_to_ring_buffer
     dbe:	fc 01       	movw	r30, r24
     dc0:	12 82       	std	Z+2, r1	; 0x02
     dc2:	13 82       	std	Z+3, r1	; 0x03
     dc4:	14 82       	std	Z+4, r1	; 0x04
     dc6:	15 82       	std	Z+5, r1	; 0x05
     dc8:	66 83       	std	Z+6, r22	; 0x06
     dca:	77 83       	std	Z+7, r23	; 0x07
     dcc:	40 83       	st	Z, r20
     dce:	51 83       	std	Z+1, r21	; 0x01
     dd0:	08 95       	ret

00000dd2 <rb16_write>:
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	fc 01       	movw	r30, r24
     dd8:	41 15       	cp	r20, r1
     dda:	51 05       	cpc	r21, r1
     ddc:	b1 f1       	breq	.+108    	; 0xe4a <rb16_write+0x78>
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	db 01       	movw	r26, r22
     dea:	a8 0f       	add	r26, r24
     dec:	b9 1f       	adc	r27, r25
     dee:	8d 91       	ld	r24, X+
     df0:	9c 91       	ld	r25, X
     df2:	a2 81       	ldd	r26, Z+2	; 0x02
     df4:	b3 81       	ldd	r27, Z+3	; 0x03
     df6:	aa 0f       	add	r26, r26
     df8:	bb 1f       	adc	r27, r27
     dfa:	c6 81       	ldd	r28, Z+6	; 0x06
     dfc:	d7 81       	ldd	r29, Z+7	; 0x07
     dfe:	ac 0f       	add	r26, r28
     e00:	bd 1f       	adc	r27, r29
     e02:	8d 93       	st	X+, r24
     e04:	9c 93       	st	X, r25
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	82 83       	std	Z+2, r24	; 0x02
     e0e:	93 83       	std	Z+3, r25	; 0x03
     e10:	a0 81       	ld	r26, Z
     e12:	b1 81       	ldd	r27, Z+1	; 0x01
     e14:	8a 17       	cp	r24, r26
     e16:	9b 07       	cpc	r25, r27
     e18:	11 f4       	brne	.+4      	; 0xe1e <rb16_write+0x4c>
     e1a:	12 82       	std	Z+2, r1	; 0x02
     e1c:	13 82       	std	Z+3, r1	; 0x03
     e1e:	82 81       	ldd	r24, Z+2	; 0x02
     e20:	93 81       	ldd	r25, Z+3	; 0x03
     e22:	c4 81       	ldd	r28, Z+4	; 0x04
     e24:	d5 81       	ldd	r29, Z+5	; 0x05
     e26:	8c 17       	cp	r24, r28
     e28:	9d 07       	cpc	r25, r29
     e2a:	49 f4       	brne	.+18     	; 0xe3e <rb16_write+0x6c>
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	a8 17       	cp	r26, r24
     e30:	b9 07       	cpc	r27, r25
     e32:	19 f0       	breq	.+6      	; 0xe3a <rb16_write+0x68>
     e34:	84 83       	std	Z+4, r24	; 0x04
     e36:	95 83       	std	Z+5, r25	; 0x05
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <rb16_write+0x6c>
     e3a:	14 82       	std	Z+4, r1	; 0x04
     e3c:	15 82       	std	Z+5, r1	; 0x05
     e3e:	2f 5f       	subi	r18, 0xFF	; 255
     e40:	82 2f       	mov	r24, r18
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	84 17       	cp	r24, r20
     e46:	95 07       	cpc	r25, r21
     e48:	68 f2       	brcs	.-102    	; 0xde4 <rb16_write+0x12>
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	08 95       	ret

00000e50 <rb16_init>:
     e50:	fc 01       	movw	r30, r24
     e52:	12 82       	std	Z+2, r1	; 0x02
     e54:	13 82       	std	Z+3, r1	; 0x03
     e56:	14 82       	std	Z+4, r1	; 0x04
     e58:	15 82       	std	Z+5, r1	; 0x05
     e5a:	66 83       	std	Z+6, r22	; 0x06
     e5c:	77 83       	std	Z+7, r23	; 0x07
     e5e:	40 83       	st	Z, r20
     e60:	51 83       	std	Z+1, r21	; 0x01
     e62:	08 95       	ret

00000e64 <rb16_get_nth>:
     e64:	dc 01       	movw	r26, r24
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	ed 91       	ld	r30, X+
     e6a:	fc 91       	ld	r31, X
     e6c:	13 97       	sbiw	r26, 0x03	; 3
     e6e:	cb 01       	movw	r24, r22
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	e8 17       	cp	r30, r24
     e74:	f9 07       	cpc	r31, r25
     e76:	78 f0       	brcs	.+30     	; 0xe96 <rb16_get_nth+0x32>
     e78:	e1 50       	subi	r30, 0x01	; 1
     e7a:	f0 48       	sbci	r31, 0x80	; 128
     e7c:	e6 1b       	sub	r30, r22
     e7e:	f7 0b       	sbc	r31, r23
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	16 96       	adiw	r26, 0x06	; 6
     e86:	8d 91       	ld	r24, X+
     e88:	9c 91       	ld	r25, X
     e8a:	17 97       	sbiw	r26, 0x07	; 7
     e8c:	e8 0f       	add	r30, r24
     e8e:	f9 1f       	adc	r31, r25
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	08 95       	ret
     e96:	2d 91       	ld	r18, X+
     e98:	3c 91       	ld	r19, X
     e9a:	11 97       	sbiw	r26, 0x01	; 1
     e9c:	e2 0f       	add	r30, r18
     e9e:	f3 1f       	adc	r31, r19
     ea0:	e1 50       	subi	r30, 0x01	; 1
     ea2:	f0 48       	sbci	r31, 0x80	; 128
     ea4:	e6 1b       	sub	r30, r22
     ea6:	f7 0b       	sbc	r31, r23
     ea8:	ee 0f       	add	r30, r30
     eaa:	ff 1f       	adc	r31, r31
     eac:	16 96       	adiw	r26, 0x06	; 6
     eae:	8d 91       	ld	r24, X+
     eb0:	9c 91       	ld	r25, X
     eb2:	17 97       	sbiw	r26, 0x07	; 7
     eb4:	e8 0f       	add	r30, r24
     eb6:	f9 1f       	adc	r31, r25
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	08 95       	ret

00000ebe <rb32_init>:
void rb32_init(RingBuffer32_t* buffer, int32_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
     ebe:	fc 01       	movw	r30, r24
	buffer->head = 0; //Beginning of array
     ec0:	12 82       	std	Z+2, r1	; 0x02
     ec2:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
     ec4:	14 82       	std	Z+4, r1	; 0x04
     ec6:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
     ec8:	66 83       	std	Z+6, r22	; 0x06
     eca:	77 83       	std	Z+7, r23	; 0x07
	buffer->array_length = backing_array_length;
     ecc:	40 83       	st	Z, r20
     ece:	51 83       	std	Z+1, r21	; 0x01
     ed0:	08 95       	ret

00000ed2 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	1f 92       	push	r1
     ed8:	1f 92       	push	r1
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     ee4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     ee8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     eec:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     ef0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     ef4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     ef8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     efc:	8f b7       	in	r24, 0x3f	; 63
     efe:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     f00:	f8 94       	cli
	return flags;
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     f04:	e0 e5       	ldi	r30, 0x50	; 80
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	82 60       	ori	r24, 0x02	; 2
     f0c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f0e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     f10:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     f12:	81 ff       	sbrs	r24, 1
     f14:	fd cf       	rjmp	.-6      	; 0xf10 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	80 e4       	ldi	r24, 0x40	; 64
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	25 d0       	rcall	.+74     	; 0xf68 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f1e:	8f b7       	in	r24, 0x3f	; 63
     f20:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f22:	f8 94       	cli
	return flags;
     f24:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     f26:	e0 e5       	ldi	r30, 0x50	; 80
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8e 7f       	andi	r24, 0xFE	; 254
     f2e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f30:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	1f 92       	push	r1
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f46:	9f b7       	in	r25, 0x3f	; 63
     f48:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     f4a:	f8 94       	cli
	return flags;
     f4c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     f4e:	e8 2f       	mov	r30, r24
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	e0 59       	subi	r30, 0x90	; 144
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	60 95       	com	r22
     f58:	80 81       	ld	r24, Z
     f5a:	68 23       	and	r22, r24
     f5c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f5e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     f60:	0f 90       	pop	r0
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     f68:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     f6a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     f6c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     f6e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     f70:	60 83       	st	Z, r22
	ret                             // Return to caller
     f72:	08 95       	ret

00000f74 <__portable_avr_delay_cycles>:
}

void report(char** string){
	record(string);
	transmit(string);
}
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <__portable_avr_delay_cycles+0xa>
     f76:	61 50       	subi	r22, 0x01	; 1
     f78:	71 09       	sbc	r23, r1
     f7a:	81 09       	sbc	r24, r1
     f7c:	91 09       	sbc	r25, r1
     f7e:	61 15       	cp	r22, r1
     f80:	71 05       	cpc	r23, r1
     f82:	81 05       	cpc	r24, r1
     f84:	91 05       	cpc	r25, r1
     f86:	b9 f7       	brne	.-18     	; 0xf76 <__portable_avr_delay_cycles+0x2>
     f88:	08 95       	ret

00000f8a <pressure_init>:
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	45 de       	rcall	.-886    	; 0xc1a <ms5607_init>
     f90:	82 ea       	ldi	r24, 0xA2	; 162
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	51 de       	rcall	.-862    	; 0xc38 <ms5607_read>
     f96:	c0 e8       	ldi	r28, 0x80	; 128
     f98:	d0 e2       	ldi	r29, 0x20	; 32
     f9a:	88 83       	st	Y, r24
     f9c:	99 83       	std	Y+1, r25	; 0x01
     f9e:	84 ea       	ldi	r24, 0xA4	; 164
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	4a de       	rcall	.-876    	; 0xc38 <ms5607_read>
     fa4:	8a 83       	std	Y+2, r24	; 0x02
     fa6:	9b 83       	std	Y+3, r25	; 0x03
     fa8:	86 ea       	ldi	r24, 0xA6	; 166
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	45 de       	rcall	.-886    	; 0xc38 <ms5607_read>
     fae:	8c 83       	std	Y+4, r24	; 0x04
     fb0:	9d 83       	std	Y+5, r25	; 0x05
     fb2:	88 ea       	ldi	r24, 0xA8	; 168
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	40 de       	rcall	.-896    	; 0xc38 <ms5607_read>
     fb8:	8e 83       	std	Y+6, r24	; 0x06
     fba:	9f 83       	std	Y+7, r25	; 0x07
     fbc:	8a ea       	ldi	r24, 0xAA	; 170
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	3b de       	rcall	.-906    	; 0xc38 <ms5607_read>
     fc2:	88 87       	std	Y+8, r24	; 0x08
     fc4:	99 87       	std	Y+9, r25	; 0x09
     fc6:	8c ea       	ldi	r24, 0xAC	; 172
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	36 de       	rcall	.-916    	; 0xc38 <ms5607_read>
     fcc:	8a 87       	std	Y+10, r24	; 0x0a
     fce:	9b 87       	std	Y+11, r25	; 0x0b
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <get_pressure>:
     fd6:	4f 92       	push	r4
     fd8:	5f 92       	push	r5
     fda:	6f 92       	push	r6
     fdc:	7f 92       	push	r7
     fde:	8f 92       	push	r8
     fe0:	9f 92       	push	r9
     fe2:	af 92       	push	r10
     fe4:	bf 92       	push	r11
     fe6:	cf 92       	push	r12
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	34 de       	rcall	.-920    	; 0xc5c <ms5607_convert_d1>
     ff4:	6b 01       	movw	r12, r22
     ff6:	7c 01       	movw	r14, r24
     ff8:	55 de       	rcall	.-854    	; 0xca4 <ms5607_convert_d2>
     ffa:	a6 d3       	rcall	.+1868   	; 0x1748 <__floatunsisf>
     ffc:	4b 01       	movw	r8, r22
     ffe:	5c 01       	movw	r10, r24
    1000:	c0 e8       	ldi	r28, 0x80	; 128
    1002:	d0 e2       	ldi	r29, 0x20	; 32
    1004:	68 85       	ldd	r22, Y+8	; 0x08
    1006:	79 85       	ldd	r23, Y+9	; 0x09
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9d d3       	rcall	.+1850   	; 0x1748 <__floatunsisf>
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	53 e4       	ldi	r21, 0x43	; 67
    1016:	26 d4       	rcall	.+2124   	; 0x1864 <__mulsf3>
    1018:	9b 01       	movw	r18, r22
    101a:	ac 01       	movw	r20, r24
    101c:	c5 01       	movw	r24, r10
    101e:	b4 01       	movw	r22, r8
    1020:	95 d2       	rcall	.+1322   	; 0x154c <__subsf3>
    1022:	4b 01       	movw	r8, r22
    1024:	5c 01       	movw	r10, r24
    1026:	6c 81       	ldd	r22, Y+4	; 0x04
    1028:	7d 81       	ldd	r23, Y+5	; 0x05
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	8c d3       	rcall	.+1816   	; 0x1748 <__floatunsisf>
    1030:	a5 01       	movw	r20, r10
    1032:	94 01       	movw	r18, r8
    1034:	17 d4       	rcall	.+2094   	; 0x1864 <__mulsf3>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	5c e3       	ldi	r21, 0x3C	; 60
    103e:	12 d4       	rcall	.+2084   	; 0x1864 <__mulsf3>
    1040:	2b 01       	movw	r4, r22
    1042:	3c 01       	movw	r6, r24
    1044:	68 81       	ld	r22, Y
    1046:	79 81       	ldd	r23, Y+1	; 0x01
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	7d d3       	rcall	.+1786   	; 0x1748 <__floatunsisf>
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e8       	ldi	r20, 0x80	; 128
    1054:	57 e4       	ldi	r21, 0x47	; 71
    1056:	06 d4       	rcall	.+2060   	; 0x1864 <__mulsf3>
    1058:	9b 01       	movw	r18, r22
    105a:	ac 01       	movw	r20, r24
    105c:	c3 01       	movw	r24, r6
    105e:	b2 01       	movw	r22, r4
    1060:	76 d2       	rcall	.+1260   	; 0x154e <__addsf3>
    1062:	2b 01       	movw	r4, r22
    1064:	3c 01       	movw	r6, r24
    1066:	c7 01       	movw	r24, r14
    1068:	b6 01       	movw	r22, r12
    106a:	6e d3       	rcall	.+1756   	; 0x1748 <__floatunsisf>
    106c:	9b 01       	movw	r18, r22
    106e:	ac 01       	movw	r20, r24
    1070:	c3 01       	movw	r24, r6
    1072:	b2 01       	movw	r22, r4
    1074:	f7 d3       	rcall	.+2030   	; 0x1864 <__mulsf3>
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	55 e3       	ldi	r21, 0x35	; 53
    107e:	f2 d3       	rcall	.+2020   	; 0x1864 <__mulsf3>
    1080:	6b 01       	movw	r12, r22
    1082:	7c 01       	movw	r14, r24
    1084:	6e 81       	ldd	r22, Y+6	; 0x06
    1086:	7f 81       	ldd	r23, Y+7	; 0x07
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	5d d3       	rcall	.+1722   	; 0x1748 <__floatunsisf>
    108e:	a5 01       	movw	r20, r10
    1090:	94 01       	movw	r18, r8
    1092:	e8 d3       	rcall	.+2000   	; 0x1864 <__mulsf3>
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e8       	ldi	r20, 0x80	; 128
    109a:	5c e3       	ldi	r21, 0x3C	; 60
    109c:	e3 d3       	rcall	.+1990   	; 0x1864 <__mulsf3>
    109e:	4b 01       	movw	r8, r22
    10a0:	5c 01       	movw	r10, r24
    10a2:	6a 81       	ldd	r22, Y+2	; 0x02
    10a4:	7b 81       	ldd	r23, Y+3	; 0x03
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	4e d3       	rcall	.+1692   	; 0x1748 <__floatunsisf>
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	58 e4       	ldi	r21, 0x48	; 72
    10b4:	d7 d3       	rcall	.+1966   	; 0x1864 <__mulsf3>
    10b6:	9b 01       	movw	r18, r22
    10b8:	ac 01       	movw	r20, r24
    10ba:	c5 01       	movw	r24, r10
    10bc:	b4 01       	movw	r22, r8
    10be:	47 d2       	rcall	.+1166   	; 0x154e <__addsf3>
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	c7 01       	movw	r24, r14
    10c6:	b6 01       	movw	r22, r12
    10c8:	41 d2       	rcall	.+1154   	; 0x154c <__subsf3>
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	58 e3       	ldi	r21, 0x38	; 56
    10d2:	c8 d3       	rcall	.+1936   	; 0x1864 <__mulsf3>
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	9f 90       	pop	r9
    10e6:	8f 90       	pop	r8
    10e8:	7f 90       	pop	r7
    10ea:	6f 90       	pop	r6
    10ec:	5f 90       	pop	r5
    10ee:	4f 90       	pop	r4
    10f0:	08 95       	ret

000010f2 <get_altitude>:
    10f2:	4f 92       	push	r4
    10f4:	5f 92       	push	r5
    10f6:	6f 92       	push	r6
    10f8:	7f 92       	push	r7
    10fa:	8f 92       	push	r8
    10fc:	9f 92       	push	r9
    10fe:	af 92       	push	r10
    1100:	bf 92       	push	r11
    1102:	cf 92       	push	r12
    1104:	df 92       	push	r13
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	2b 01       	movw	r4, r22
    110c:	3c 01       	movw	r6, r24
    110e:	c0 90 12 20 	lds	r12, 0x2012	; 0x802012 <L>
    1112:	d0 90 13 20 	lds	r13, 0x2013	; 0x802013 <L+0x1>
    1116:	e0 90 14 20 	lds	r14, 0x2014	; 0x802014 <L+0x2>
    111a:	f0 90 15 20 	lds	r15, 0x2015	; 0x802015 <L+0x3>
    111e:	20 91 16 20 	lds	r18, 0x2016	; 0x802016 <R>
    1122:	30 91 17 20 	lds	r19, 0x2017	; 0x802017 <R+0x1>
    1126:	40 91 18 20 	lds	r20, 0x2018	; 0x802018 <R+0x2>
    112a:	50 91 19 20 	lds	r21, 0x2019	; 0x802019 <R+0x3>
    112e:	c7 01       	movw	r24, r14
    1130:	b6 01       	movw	r22, r12
    1132:	98 d3       	rcall	.+1840   	; 0x1864 <__mulsf3>
    1134:	20 91 0e 20 	lds	r18, 0x200E	; 0x80200e <g_0>
    1138:	30 91 0f 20 	lds	r19, 0x200F	; 0x80200f <g_0+0x1>
    113c:	40 91 10 20 	lds	r20, 0x2010	; 0x802010 <g_0+0x2>
    1140:	50 91 11 20 	lds	r21, 0x2011	; 0x802011 <g_0+0x3>
    1144:	68 d2       	rcall	.+1232   	; 0x1616 <__divsf3>
    1146:	4b 01       	movw	r8, r22
    1148:	5c 01       	movw	r10, r24
    114a:	a3 01       	movw	r20, r6
    114c:	92 01       	movw	r18, r4
    114e:	60 91 1e 20 	lds	r22, 0x201E	; 0x80201e <ground_p>
    1152:	70 91 1f 20 	lds	r23, 0x201F	; 0x80201f <ground_p+0x1>
    1156:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <ground_p+0x2>
    115a:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <ground_p+0x3>
    115e:	5b d2       	rcall	.+1206   	; 0x1616 <__divsf3>
    1160:	a5 01       	movw	r20, r10
    1162:	94 01       	movw	r18, r8
    1164:	e2 d3       	rcall	.+1988   	; 0x192a <pow>
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e8       	ldi	r20, 0x80	; 128
    116c:	5f e3       	ldi	r21, 0x3F	; 63
    116e:	ee d1       	rcall	.+988    	; 0x154c <__subsf3>
    1170:	20 91 1a 20 	lds	r18, 0x201A	; 0x80201a <ground_t>
    1174:	30 91 1b 20 	lds	r19, 0x201B	; 0x80201b <ground_t+0x1>
    1178:	40 91 1c 20 	lds	r20, 0x201C	; 0x80201c <ground_t+0x2>
    117c:	50 91 1d 20 	lds	r21, 0x201D	; 0x80201d <ground_t+0x3>
    1180:	71 d3       	rcall	.+1762   	; 0x1864 <__mulsf3>
    1182:	a7 01       	movw	r20, r14
    1184:	96 01       	movw	r18, r12
    1186:	47 d2       	rcall	.+1166   	; 0x1616 <__divsf3>
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	bf 90       	pop	r11
    1192:	af 90       	pop	r10
    1194:	9f 90       	pop	r9
    1196:	8f 90       	pop	r8
    1198:	7f 90       	pop	r7
    119a:	6f 90       	pop	r6
    119c:	5f 90       	pop	r5
    119e:	4f 90       	pop	r4
    11a0:	08 95       	ret

000011a2 <get_velocity>:
    11a2:	2f 92       	push	r2
    11a4:	3f 92       	push	r3
    11a6:	4f 92       	push	r4
    11a8:	5f 92       	push	r5
    11aa:	6f 92       	push	r6
    11ac:	7f 92       	push	r7
    11ae:	8f 92       	push	r8
    11b0:	9f 92       	push	r9
    11b2:	af 92       	push	r10
    11b4:	bf 92       	push	r11
    11b6:	cf 92       	push	r12
    11b8:	df 92       	push	r13
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <get_velocity+0x26>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <get_velocity+0x28>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	6c 01       	movw	r12, r24
    11d0:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <data_samples>
    11d4:	88 23       	and	r24, r24
    11d6:	09 f4       	brne	.+2      	; 0x11da <get_velocity+0x38>
    11d8:	68 c0       	rjmp	.+208    	; 0x12aa <get_velocity+0x108>
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	10 e0       	ldi	r17, 0x00	; 0
    11de:	41 2c       	mov	r4, r1
    11e0:	51 2c       	mov	r5, r1
    11e2:	32 01       	movw	r6, r4
    11e4:	86 2e       	mov	r8, r22
    11e6:	91 2c       	mov	r9, r1
    11e8:	a1 2c       	mov	r10, r1
    11ea:	b1 2c       	mov	r11, r1
    11ec:	89 82       	std	Y+1, r8	; 0x01
    11ee:	9a 82       	std	Y+2, r9	; 0x02
    11f0:	ab 82       	std	Y+3, r10	; 0x03
    11f2:	bc 82       	std	Y+4, r11	; 0x04
    11f4:	b8 01       	movw	r22, r16
    11f6:	c6 01       	movw	r24, r12
    11f8:	35 de       	rcall	.-918    	; 0xe64 <rb16_get_nth>
    11fa:	5c 01       	movw	r10, r24
    11fc:	18 01       	movw	r2, r16
    11fe:	2f ef       	ldi	r18, 0xFF	; 255
    1200:	22 1a       	sub	r2, r18
    1202:	32 0a       	sbc	r3, r18
    1204:	b1 01       	movw	r22, r2
    1206:	c6 01       	movw	r24, r12
    1208:	2d de       	rcall	.-934    	; 0xe64 <rb16_get_nth>
    120a:	7c 01       	movw	r14, r24
    120c:	b8 01       	movw	r22, r16
    120e:	6e 5f       	subi	r22, 0xFE	; 254
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	c6 01       	movw	r24, r12
    1214:	27 de       	rcall	.-946    	; 0xe64 <rb16_get_nth>
    1216:	a5 01       	movw	r20, r10
    1218:	bb 0c       	add	r11, r11
    121a:	66 0b       	sbc	r22, r22
    121c:	77 0b       	sbc	r23, r23
    121e:	8a 01       	movw	r16, r20
    1220:	9b 01       	movw	r18, r22
    1222:	00 0f       	add	r16, r16
    1224:	11 1f       	adc	r17, r17
    1226:	22 1f       	adc	r18, r18
    1228:	33 1f       	adc	r19, r19
    122a:	40 0f       	add	r20, r16
    122c:	51 1f       	adc	r21, r17
    122e:	62 1f       	adc	r22, r18
    1230:	73 1f       	adc	r23, r19
    1232:	87 01       	movw	r16, r14
    1234:	ff 0c       	add	r15, r15
    1236:	22 0b       	sbc	r18, r18
    1238:	33 0b       	sbc	r19, r19
    123a:	78 01       	movw	r14, r16
    123c:	89 01       	movw	r16, r18
    123e:	ee 0c       	add	r14, r14
    1240:	ff 1c       	adc	r15, r15
    1242:	00 1f       	adc	r16, r16
    1244:	11 1f       	adc	r17, r17
    1246:	ee 0c       	add	r14, r14
    1248:	ff 1c       	adc	r15, r15
    124a:	00 1f       	adc	r16, r16
    124c:	11 1f       	adc	r17, r17
    124e:	4a 01       	movw	r8, r20
    1250:	5b 01       	movw	r10, r22
    1252:	8e 18       	sub	r8, r14
    1254:	9f 08       	sbc	r9, r15
    1256:	a0 0a       	sbc	r10, r16
    1258:	b1 0a       	sbc	r11, r17
    125a:	ac 01       	movw	r20, r24
    125c:	99 0f       	add	r25, r25
    125e:	66 0b       	sbc	r22, r22
    1260:	77 0b       	sbc	r23, r23
    1262:	d5 01       	movw	r26, r10
    1264:	c4 01       	movw	r24, r8
    1266:	84 0f       	add	r24, r20
    1268:	95 1f       	adc	r25, r21
    126a:	a6 1f       	adc	r26, r22
    126c:	b7 1f       	adc	r27, r23
    126e:	9c 01       	movw	r18, r24
    1270:	ad 01       	movw	r20, r26
    1272:	69 81       	ldd	r22, Y+1	; 0x01
    1274:	7a 81       	ldd	r23, Y+2	; 0x02
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	bc d4       	rcall	.+2424   	; 0x1bf4 <__mulsi3>
    127c:	67 d2       	rcall	.+1230   	; 0x174c <__floatsisf>
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	5f e3       	ldi	r21, 0x3F	; 63
    1286:	ee d2       	rcall	.+1500   	; 0x1864 <__mulsf3>
    1288:	9b 01       	movw	r18, r22
    128a:	ac 01       	movw	r20, r24
    128c:	c3 01       	movw	r24, r6
    128e:	b2 01       	movw	r22, r4
    1290:	5e d1       	rcall	.+700    	; 0x154e <__addsf3>
    1292:	2b 01       	movw	r4, r22
    1294:	3c 01       	movw	r6, r24
    1296:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <data_samples>
    129a:	81 01       	movw	r16, r2
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	22 16       	cp	r2, r18
    12a2:	33 06       	cpc	r3, r19
    12a4:	08 f4       	brcc	.+2      	; 0x12a8 <get_velocity+0x106>
    12a6:	a6 cf       	rjmp	.-180    	; 0x11f4 <get_velocity+0x52>
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <get_velocity+0x10e>
    12aa:	41 2c       	mov	r4, r1
    12ac:	51 2c       	mov	r5, r1
    12ae:	32 01       	movw	r6, r4
    12b0:	68 2f       	mov	r22, r24
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	49 d2       	rcall	.+1170   	; 0x174c <__floatsisf>
    12ba:	9b 01       	movw	r18, r22
    12bc:	ac 01       	movw	r20, r24
    12be:	c3 01       	movw	r24, r6
    12c0:	b2 01       	movw	r22, r4
    12c2:	a9 d1       	rcall	.+850    	; 0x1616 <__divsf3>
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	48 ec       	ldi	r20, 0xC8	; 200
    12ca:	52 e4       	ldi	r21, 0x42	; 66
    12cc:	a4 d1       	rcall	.+840    	; 0x1616 <__divsf3>
    12ce:	26 96       	adiw	r28, 0x06	; 6
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	df 90       	pop	r13
    12e2:	cf 90       	pop	r12
    12e4:	bf 90       	pop	r11
    12e6:	af 90       	pop	r10
    12e8:	9f 90       	pop	r9
    12ea:	8f 90       	pop	r8
    12ec:	7f 90       	pop	r7
    12ee:	6f 90       	pop	r6
    12f0:	5f 90       	pop	r5
    12f2:	4f 90       	pop	r4
    12f4:	3f 90       	pop	r3
    12f6:	2f 90       	pop	r2
    12f8:	08 95       	ret

000012fa <clock_init>:
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    12fa:	61 e0       	ldi	r22, 0x01	; 1
    12fc:	85 e0       	ldi	r24, 0x05	; 5
    12fe:	1e de       	rcall	.-964    	; 0xf3c <sysclk_enable_module>
	 printf("%u\n", a);
}

void clock_init(void){
	sysclk_enable_peripheral_clock(&TCE0); // starts peripheral clock
	sei();
    1300:	78 94       	sei

	TCE0.CTRLA = 0x07; // divisor set to 1024
    1302:	e0 e0       	ldi	r30, 0x00	; 0
    1304:	fa e0       	ldi	r31, 0x0A	; 10
    1306:	87 e0       	ldi	r24, 0x07	; 7
    1308:	80 83       	st	Z, r24
	TCE0.PER = 31249; // 1 Hz
    130a:	81 e1       	ldi	r24, 0x11	; 17
    130c:	9a e7       	ldi	r25, 0x7A	; 122
    130e:	86 a3       	std	Z+38, r24	; 0x26
    1310:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	86 83       	std	Z+6, r24	; 0x06
    1316:	08 95       	ret

00001318 <system_init>:


// Sensor functions
void system_init(void){
	// Initialization of systems
	sysclk_init(); // initializes the system clock
    1318:	dc dd       	rcall	.-1096   	; 0xed2 <sysclk_init>
	delay_ms(2); // delays the rest of the processes to ensure a started clock
    131a:	6b ea       	ldi	r22, 0xAB	; 171
    131c:	79 e2       	ldi	r23, 0x29	; 41
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	28 de       	rcall	.-944    	; 0xf74 <__portable_avr_delay_cycles>
	
	// Initialization of pins
	PORTC.DIR = 0xBB; // makes Port C have pins, 7, 5, 4, 3, 1, 0 be output (0b10111011)
    1324:	e0 e4       	ldi	r30, 0x40	; 64
    1326:	f6 e0       	ldi	r31, 0x06	; 6
    1328:	8b eb       	ldi	r24, 0xBB	; 187
    132a:	80 83       	st	Z, r24
	PORTC.OUT = 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
    132c:	80 e1       	ldi	r24, 0x10	; 16
    132e:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL = PMIC_LOLVLEN_bm; // enables lo level interrupts
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	// Driver Initialization
	data_terminal_init();
    1336:	fe dc       	rcall	.-1540   	; 0xd34 <data_terminal_init>
	delay_ms(2);
    1338:	6b ea       	ldi	r22, 0xAB	; 171
    133a:	79 e2       	ldi	r23, 0x29	; 41
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	19 de       	rcall	.-974    	; 0xf74 <__portable_avr_delay_cycles>
	
//	adc_init();
	delay_ms(2);
    1342:	6b ea       	ldi	r22, 0xAB	; 171
    1344:	79 e2       	ldi	r23, 0x29	; 41
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
	
	spi_init();
    134a:	14 de       	rcall	.-984    	; 0xf74 <__portable_avr_delay_cycles>
	delay_ms(2);
    134c:	cf dc       	rcall	.-1634   	; 0xcec <spi_init>
    134e:	6b ea       	ldi	r22, 0xAB	; 171
    1350:	79 e2       	ldi	r23, 0x29	; 41
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
	
	pressure_init();
    1356:	0e de       	rcall	.-996    	; 0xf74 <__portable_avr_delay_cycles>
    1358:	18 de       	rcall	.-976    	; 0xf8a <pressure_init>
	delay_ms(2);
    135a:	6b ea       	ldi	r22, 0xAB	; 171
    135c:	79 e2       	ldi	r23, 0x29	; 41
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
	
	clock_init();
    1362:	08 de       	rcall	.-1008   	; 0xf74 <__portable_avr_delay_cycles>
    1364:	ca df       	rcall	.-108    	; 0x12fa <clock_init>
	
	delay_ms(10);
    1366:	66 e5       	ldi	r22, 0x56	; 86
    1368:	70 ed       	ldi	r23, 0xD0	; 208
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 de       	rcall	.-1020   	; 0xf74 <__portable_avr_delay_cycles>
    1370:	32 de       	rcall	.-924    	; 0xfd6 <get_pressure>
	
	// Initialization of variables
	ground_p = get_pressure();
    1372:	60 93 1e 20 	sts	0x201E, r22	; 0x80201e <ground_p>
    1376:	70 93 1f 20 	sts	0x201F, r23	; 0x80201f <ground_p+0x1>
    137a:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <ground_p+0x2>
    137e:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <ground_p+0x3>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
	ground_t = get_temperature();
    1386:	a0 e7       	ldi	r26, 0x70	; 112
    1388:	b1 e4       	ldi	r27, 0x41	; 65
    138a:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <ground_t>
    138e:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <ground_t+0x1>
    1392:	a0 93 1c 20 	sts	0x201C, r26	; 0x80201c <ground_t+0x2>
    1396:	b0 93 1d 20 	sts	0x201D, r27	; 0x80201d <ground_t+0x3>
	ground_a = get_altitude(get_pressure());
    139a:	1d de       	rcall	.-966    	; 0xfd6 <get_pressure>
    139c:	aa de       	rcall	.-684    	; 0x10f2 <get_altitude>
    139e:	60 93 8c 20 	sts	0x208C, r22	; 0x80208c <ground_a>
    13a2:	70 93 8d 20 	sts	0x208D, r23	; 0x80208d <ground_a+0x1>
    13a6:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <ground_a+0x2>
    13aa:	90 93 8f 20 	sts	0x208F, r25	; 0x80208f <ground_a+0x3>
    13ae:	08 95       	ret

000013b0 <main>:
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
char* str;					// Output String


////////////////////////////// Functions ///////////////////////////////
int main (void)
{
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	ce 55       	subi	r28, 0x5E	; 94
    13ba:	d1 09       	sbc	r29, r1
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	de bf       	out	0x3e, r29	; 62
	system_init();
    13c0:	ab df       	rcall	.-170    	; 0x1318 <system_init>
	
	printf("time, pressure, temperature, altitude, velocity\n");
    13c2:	86 e2       	ldi	r24, 0x26	; 38
    13c4:	90 e2       	ldi	r25, 0x20	; 32
    13c6:	bd d4       	rcall	.+2426   	; 0x1d42 <puts>
	
	uint8_t mem_array[] = {0,0,0,0,0,0,0,0,0,0};
    13c8:	be 01       	movw	r22, r28
    13ca:	6f 5f       	subi	r22, 0xFF	; 255
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	8a e0       	ldi	r24, 0x0A	; 10
    13d0:	fb 01       	movw	r30, r22
    13d2:	11 92       	st	Z+, r1
    13d4:	8a 95       	dec	r24
    13d6:	e9 f7       	brne	.-6      	; 0x13d2 <main+0x22>
	RingBufferu8_t gcs_comms;
	rbu8_init(&gcs_comms, mem_array, (uint16_t) 10);
    13d8:	4a e0       	ldi	r20, 0x0A	; 10
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	ce 01       	movw	r24, r28
    13de:	0b 96       	adiw	r24, 0x0b	; 11
    13e0:	ee dc       	rcall	.-1572   	; 0xdbe <rbu8_init>
	
	int16_t alt_array[] = {0,0,0,0,0,0,0,0,0,0};
    13e2:	be 01       	movw	r22, r28
    13e4:	6d 5e       	subi	r22, 0xED	; 237
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	84 e1       	ldi	r24, 0x14	; 20
    13ea:	fb 01       	movw	r30, r22
    13ec:	11 92       	st	Z+, r1
    13ee:	8a 95       	dec	r24
    13f0:	e9 f7       	brne	.-6      	; 0x13ec <main+0x3c>
	RingBuffer16_t altitudes;	// in centimeters
	rb16_init(&altitudes, alt_array, (uint16_t) 10);
    13f2:	4a e0       	ldi	r20, 0x0A	; 10
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	ce 01       	movw	r24, r28
    13f8:	87 96       	adiw	r24, 0x27	; 39
    13fa:	2a dd       	rcall	.-1452   	; 0xe50 <rb16_init>
	
	int32_t press_array[] = {0,0,0,0,0,0,0,0,0,0};
    13fc:	be 01       	movw	r22, r28
    13fe:	61 5d       	subi	r22, 0xD1	; 209
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	88 e2       	ldi	r24, 0x28	; 40
    1404:	fb 01       	movw	r30, r22
    1406:	11 92       	st	Z+, r1
    1408:	8a 95       	dec	r24
    140a:	e9 f7       	brne	.-6      	; 0x1406 <main+0x56>
	RingBuffer32_t pressures;	// in centimeters
	rb32_init(&pressures, press_array, (uint16_t) 10);
    140c:	4a e0       	ldi	r20, 0x0A	; 10
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	ce 01       	movw	r24, r28
    1412:	89 5a       	subi	r24, 0xA9	; 169
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	53 dd       	rcall	.-1370   	; 0xebe <rb32_init>
		velocity = get_velocity(&altitudes, 8);
		
		packets++;
		// Prints information
		//printf("5343,%i,%i,%i,%li,%i,%i,%li,%li,%li,%i,%i,%i,%i,%i,%i,%i",time,packets,(int16_t)alt*10,(int32_t) press,(int16_t) temp*10,volt,gps_t,gps_lat,gps_long,gps_alt,gps_sats,pitch,roll,rpm,state,angle)
		printf("%i,%i,%li,%u,%i,%i\n", timer, packets, (int32_t) (press), (uint16_t) (temp * 100), (int16_t) (alt*100), (int16_t) (velocity*100)); // Data Logging Test
    1418:	0f 2e       	mov	r0, r31
    141a:	f6 e5       	ldi	r31, 0x56	; 86
    141c:	ef 2e       	mov	r14, r31
    141e:	f0 e2       	ldi	r31, 0x20	; 32
    1420:	ff 2e       	mov	r15, r31
    1422:	f0 2d       	mov	r31, r0
	RingBuffer32_t pressures;	// in centimeters
	rb32_init(&pressures, press_array, (uint16_t) 10);
	
	while(1){
		//Gives each flight state their unique tasks
		switch(state){
    1424:	80 91 90 20 	lds	r24, 0x2090	; 0x802090 <state>
    1428:	84 30       	cpi	r24, 0x04	; 4
    142a:	10 f0       	brcs	.+4      	; 0x1430 <main+0x80>
			case 2:
				break;
			case 3:
				break;
			default:
				state = 0;
    142c:	10 92 90 20 	sts	0x2090, r1	; 0x802090 <state>
		
		// Stores the pressure
		
		
		// Stores Altitude
		a = (int16_t) (alt*100);
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	48 ec       	ldi	r20, 0xC8	; 200
    1436:	52 e4       	ldi	r21, 0x42	; 66
    1438:	60 91 70 20 	lds	r22, 0x2070	; 0x802070 <alt>
    143c:	70 91 71 20 	lds	r23, 0x2071	; 0x802071 <alt+0x1>
    1440:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <alt+0x2>
    1444:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <alt+0x3>
    1448:	0d d2       	rcall	.+1050   	; 0x1864 <__mulsf3>
    144a:	4d d1       	rcall	.+666    	; 0x16e6 <__fixsfsi>
    144c:	60 93 6e 20 	sts	0x206E, r22	; 0x80206e <a>
    1450:	70 93 6f 20 	sts	0x206F, r23	; 0x80206f <a+0x1>
		rb16_write(&altitudes, &a, 1); // Writes altitude in buffer
    1454:	41 e0       	ldi	r20, 0x01	; 1
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	6e e6       	ldi	r22, 0x6E	; 110
    145a:	70 e2       	ldi	r23, 0x20	; 32
    145c:	ce 01       	movw	r24, r28
    145e:	87 96       	adiw	r24, 0x27	; 39
    1460:	b8 dc       	rcall	.-1680   	; 0xdd2 <rb16_write>
		
		// Calculates Velocity
		velocity = get_velocity(&altitudes, 8);
    1462:	68 e0       	ldi	r22, 0x08	; 8
    1464:	ce 01       	movw	r24, r28
    1466:	87 96       	adiw	r24, 0x27	; 39
    1468:	9c de       	rcall	.-712    	; 0x11a2 <get_velocity>
    146a:	60 93 6a 20 	sts	0x206A, r22	; 0x80206a <__data_end>
    146e:	70 93 6b 20 	sts	0x206B, r23	; 0x80206b <__data_end+0x1>
    1472:	80 93 6c 20 	sts	0x206C, r24	; 0x80206c <__data_end+0x2>
    1476:	90 93 6d 20 	sts	0x206D, r25	; 0x80206d <__data_end+0x3>
    147a:	00 91 7c 20 	lds	r16, 0x207C	; 0x80207c <packets>
		
		packets++;
    147e:	10 91 7d 20 	lds	r17, 0x207D	; 0x80207d <packets+0x1>
    1482:	0f 5f       	subi	r16, 0xFF	; 255
    1484:	1f 4f       	sbci	r17, 0xFF	; 255
    1486:	00 93 7c 20 	sts	0x207C, r16	; 0x80207c <packets>
    148a:	10 93 7d 20 	sts	0x207D, r17	; 0x80207d <packets+0x1>
		// Prints information
		//printf("5343,%i,%i,%i,%li,%i,%i,%li,%li,%li,%i,%i,%i,%i,%i,%i,%i",time,packets,(int16_t)alt*10,(int32_t) press,(int16_t) temp*10,volt,gps_t,gps_lat,gps_long,gps_alt,gps_sats,pitch,roll,rpm,state,angle)
		printf("%i,%i,%li,%u,%i,%i\n", timer, packets, (int32_t) (press), (uint16_t) (temp * 100), (int16_t) (alt*100), (int16_t) (velocity*100)); // Data Logging Test
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	48 ec       	ldi	r20, 0xC8	; 200
    1494:	52 e4       	ldi	r21, 0x42	; 66
    1496:	e6 d1       	rcall	.+972    	; 0x1864 <__mulsf3>
    1498:	26 d1       	rcall	.+588    	; 0x16e6 <__fixsfsi>
    149a:	7f 93       	push	r23
    149c:	6f 93       	push	r22
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	48 ec       	ldi	r20, 0xC8	; 200
    14a4:	52 e4       	ldi	r21, 0x42	; 66
    14a6:	60 91 70 20 	lds	r22, 0x2070	; 0x802070 <alt>
    14aa:	70 91 71 20 	lds	r23, 0x2071	; 0x802071 <alt+0x1>
    14ae:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <alt+0x2>
    14b2:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <alt+0x3>
    14b6:	d6 d1       	rcall	.+940    	; 0x1864 <__mulsf3>
    14b8:	16 d1       	rcall	.+556    	; 0x16e6 <__fixsfsi>
    14ba:	7f 93       	push	r23
    14bc:	6f 93       	push	r22
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	48 ec       	ldi	r20, 0xC8	; 200
    14c4:	52 e4       	ldi	r21, 0x42	; 66
    14c6:	60 91 74 20 	lds	r22, 0x2074	; 0x802074 <temp>
    14ca:	70 91 75 20 	lds	r23, 0x2075	; 0x802075 <temp+0x1>
    14ce:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <temp+0x2>
    14d2:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <temp+0x3>
    14d6:	c6 d1       	rcall	.+908    	; 0x1864 <__mulsf3>
    14d8:	0b d1       	rcall	.+534    	; 0x16f0 <__fixunssfsi>
    14da:	7f 93       	push	r23
    14dc:	6f 93       	push	r22
    14de:	60 91 78 20 	lds	r22, 0x2078	; 0x802078 <press>
    14e2:	70 91 79 20 	lds	r23, 0x2079	; 0x802079 <press+0x1>
    14e6:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <press+0x2>
    14ea:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <press+0x3>
    14ee:	fb d0       	rcall	.+502    	; 0x16e6 <__fixsfsi>
    14f0:	9f 93       	push	r25
    14f2:	8f 93       	push	r24
    14f4:	7f 93       	push	r23
    14f6:	6f 93       	push	r22
    14f8:	1f 93       	push	r17
    14fa:	0f 93       	push	r16
    14fc:	80 91 7f 20 	lds	r24, 0x207F	; 0x80207f <timer+0x1>
    1500:	8f 93       	push	r24
    1502:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <timer>
    1506:	8f 93       	push	r24
    1508:	ff 92       	push	r15
    150a:	ef 92       	push	r14
    150c:	07 d4       	rcall	.+2062   	; 0x1d1c <printf>
    150e:	cd bf       	out	0x3d, r28	; 61
		//printf("P (Pa): %5li, T (K/100): %5u, A (m): %5i, V (m/s): %5i\n", (int32_t) (press), (uint16_t) (temp * 100), (int16_t) (alt*100), (int16_t) (velocity*100));
		//printf("Time: %i, Packet: %i\n", time, packets);
		//record(&str);
		//delay_ms(240);
	}
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	88 cf       	rjmp	.-240    	; 0x1424 <main+0x74>

00001514 <__vector_47>:
    1514:	1f 92       	push	r1
	TCE0.CTRLA = 0x07; // divisor set to 1024
	TCE0.PER = 31249; // 1 Hz
	TCE0.INTCTRLA = TC_OVFINTLVL_LO_gc; // CCA int flag Lo level
}

ISR(TCE0_OVF_vect){
    1516:	0f 92       	push	r0
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	0f 92       	push	r0
    151c:	11 24       	eor	r1, r1
    151e:	08 b6       	in	r0, 0x38	; 56
    1520:	0f 92       	push	r0
    1522:	18 be       	out	0x38, r1	; 56
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
	timer++;
    1528:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <timer>
    152c:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <timer+0x1>
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	80 93 7e 20 	sts	0x207E, r24	; 0x80207e <timer>
    1536:	90 93 7f 20 	sts	0x207F, r25	; 0x80207f <timer+0x1>
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	0f 90       	pop	r0
    1540:	08 be       	out	0x38, r0	; 56
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <__subsf3>:
    154c:	50 58       	subi	r21, 0x80	; 128

0000154e <__addsf3>:
    154e:	bb 27       	eor	r27, r27
    1550:	aa 27       	eor	r26, r26
    1552:	0e d0       	rcall	.+28     	; 0x1570 <__addsf3x>
    1554:	4d c1       	rjmp	.+666    	; 0x17f0 <__fp_round>
    1556:	3e d1       	rcall	.+636    	; 0x17d4 <__fp_pscA>
    1558:	30 f0       	brcs	.+12     	; 0x1566 <__addsf3+0x18>
    155a:	43 d1       	rcall	.+646    	; 0x17e2 <__fp_pscB>
    155c:	20 f0       	brcs	.+8      	; 0x1566 <__addsf3+0x18>
    155e:	31 f4       	brne	.+12     	; 0x156c <__addsf3+0x1e>
    1560:	9f 3f       	cpi	r25, 0xFF	; 255
    1562:	11 f4       	brne	.+4      	; 0x1568 <__addsf3+0x1a>
    1564:	1e f4       	brtc	.+6      	; 0x156c <__addsf3+0x1e>
    1566:	33 c1       	rjmp	.+614    	; 0x17ce <__fp_nan>
    1568:	0e f4       	brtc	.+2      	; 0x156c <__addsf3+0x1e>
    156a:	e0 95       	com	r30
    156c:	e7 fb       	bst	r30, 7
    156e:	29 c1       	rjmp	.+594    	; 0x17c2 <__fp_inf>

00001570 <__addsf3x>:
    1570:	e9 2f       	mov	r30, r25
    1572:	4f d1       	rcall	.+670    	; 0x1812 <__fp_split3>
    1574:	80 f3       	brcs	.-32     	; 0x1556 <__addsf3+0x8>
    1576:	ba 17       	cp	r27, r26
    1578:	62 07       	cpc	r22, r18
    157a:	73 07       	cpc	r23, r19
    157c:	84 07       	cpc	r24, r20
    157e:	95 07       	cpc	r25, r21
    1580:	18 f0       	brcs	.+6      	; 0x1588 <__addsf3x+0x18>
    1582:	71 f4       	brne	.+28     	; 0x15a0 <__addsf3x+0x30>
    1584:	9e f5       	brtc	.+102    	; 0x15ec <__addsf3x+0x7c>
    1586:	67 c1       	rjmp	.+718    	; 0x1856 <__fp_zero>
    1588:	0e f4       	brtc	.+2      	; 0x158c <__addsf3x+0x1c>
    158a:	e0 95       	com	r30
    158c:	0b 2e       	mov	r0, r27
    158e:	ba 2f       	mov	r27, r26
    1590:	a0 2d       	mov	r26, r0
    1592:	0b 01       	movw	r0, r22
    1594:	b9 01       	movw	r22, r18
    1596:	90 01       	movw	r18, r0
    1598:	0c 01       	movw	r0, r24
    159a:	ca 01       	movw	r24, r20
    159c:	a0 01       	movw	r20, r0
    159e:	11 24       	eor	r1, r1
    15a0:	ff 27       	eor	r31, r31
    15a2:	59 1b       	sub	r21, r25
    15a4:	99 f0       	breq	.+38     	; 0x15cc <__addsf3x+0x5c>
    15a6:	59 3f       	cpi	r21, 0xF9	; 249
    15a8:	50 f4       	brcc	.+20     	; 0x15be <__addsf3x+0x4e>
    15aa:	50 3e       	cpi	r21, 0xE0	; 224
    15ac:	68 f1       	brcs	.+90     	; 0x1608 <__addsf3x+0x98>
    15ae:	1a 16       	cp	r1, r26
    15b0:	f0 40       	sbci	r31, 0x00	; 0
    15b2:	a2 2f       	mov	r26, r18
    15b4:	23 2f       	mov	r18, r19
    15b6:	34 2f       	mov	r19, r20
    15b8:	44 27       	eor	r20, r20
    15ba:	58 5f       	subi	r21, 0xF8	; 248
    15bc:	f3 cf       	rjmp	.-26     	; 0x15a4 <__addsf3x+0x34>
    15be:	46 95       	lsr	r20
    15c0:	37 95       	ror	r19
    15c2:	27 95       	ror	r18
    15c4:	a7 95       	ror	r26
    15c6:	f0 40       	sbci	r31, 0x00	; 0
    15c8:	53 95       	inc	r21
    15ca:	c9 f7       	brne	.-14     	; 0x15be <__addsf3x+0x4e>
    15cc:	7e f4       	brtc	.+30     	; 0x15ec <__addsf3x+0x7c>
    15ce:	1f 16       	cp	r1, r31
    15d0:	ba 0b       	sbc	r27, r26
    15d2:	62 0b       	sbc	r22, r18
    15d4:	73 0b       	sbc	r23, r19
    15d6:	84 0b       	sbc	r24, r20
    15d8:	ba f0       	brmi	.+46     	; 0x1608 <__addsf3x+0x98>
    15da:	91 50       	subi	r25, 0x01	; 1
    15dc:	a1 f0       	breq	.+40     	; 0x1606 <__addsf3x+0x96>
    15de:	ff 0f       	add	r31, r31
    15e0:	bb 1f       	adc	r27, r27
    15e2:	66 1f       	adc	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	c2 f7       	brpl	.-16     	; 0x15da <__addsf3x+0x6a>
    15ea:	0e c0       	rjmp	.+28     	; 0x1608 <__addsf3x+0x98>
    15ec:	ba 0f       	add	r27, r26
    15ee:	62 1f       	adc	r22, r18
    15f0:	73 1f       	adc	r23, r19
    15f2:	84 1f       	adc	r24, r20
    15f4:	48 f4       	brcc	.+18     	; 0x1608 <__addsf3x+0x98>
    15f6:	87 95       	ror	r24
    15f8:	77 95       	ror	r23
    15fa:	67 95       	ror	r22
    15fc:	b7 95       	ror	r27
    15fe:	f7 95       	ror	r31
    1600:	9e 3f       	cpi	r25, 0xFE	; 254
    1602:	08 f0       	brcs	.+2      	; 0x1606 <__addsf3x+0x96>
    1604:	b3 cf       	rjmp	.-154    	; 0x156c <__addsf3+0x1e>
    1606:	93 95       	inc	r25
    1608:	88 0f       	add	r24, r24
    160a:	08 f0       	brcs	.+2      	; 0x160e <__addsf3x+0x9e>
    160c:	99 27       	eor	r25, r25
    160e:	ee 0f       	add	r30, r30
    1610:	97 95       	ror	r25
    1612:	87 95       	ror	r24
    1614:	08 95       	ret

00001616 <__divsf3>:
    1616:	0c d0       	rcall	.+24     	; 0x1630 <__divsf3x>
    1618:	eb c0       	rjmp	.+470    	; 0x17f0 <__fp_round>
    161a:	e3 d0       	rcall	.+454    	; 0x17e2 <__fp_pscB>
    161c:	40 f0       	brcs	.+16     	; 0x162e <__divsf3+0x18>
    161e:	da d0       	rcall	.+436    	; 0x17d4 <__fp_pscA>
    1620:	30 f0       	brcs	.+12     	; 0x162e <__divsf3+0x18>
    1622:	21 f4       	brne	.+8      	; 0x162c <__divsf3+0x16>
    1624:	5f 3f       	cpi	r21, 0xFF	; 255
    1626:	19 f0       	breq	.+6      	; 0x162e <__divsf3+0x18>
    1628:	cc c0       	rjmp	.+408    	; 0x17c2 <__fp_inf>
    162a:	51 11       	cpse	r21, r1
    162c:	15 c1       	rjmp	.+554    	; 0x1858 <__fp_szero>
    162e:	cf c0       	rjmp	.+414    	; 0x17ce <__fp_nan>

00001630 <__divsf3x>:
    1630:	f0 d0       	rcall	.+480    	; 0x1812 <__fp_split3>
    1632:	98 f3       	brcs	.-26     	; 0x161a <__divsf3+0x4>

00001634 <__divsf3_pse>:
    1634:	99 23       	and	r25, r25
    1636:	c9 f3       	breq	.-14     	; 0x162a <__divsf3+0x14>
    1638:	55 23       	and	r21, r21
    163a:	b1 f3       	breq	.-20     	; 0x1628 <__divsf3+0x12>
    163c:	95 1b       	sub	r25, r21
    163e:	55 0b       	sbc	r21, r21
    1640:	bb 27       	eor	r27, r27
    1642:	aa 27       	eor	r26, r26
    1644:	62 17       	cp	r22, r18
    1646:	73 07       	cpc	r23, r19
    1648:	84 07       	cpc	r24, r20
    164a:	38 f0       	brcs	.+14     	; 0x165a <__divsf3_pse+0x26>
    164c:	9f 5f       	subi	r25, 0xFF	; 255
    164e:	5f 4f       	sbci	r21, 0xFF	; 255
    1650:	22 0f       	add	r18, r18
    1652:	33 1f       	adc	r19, r19
    1654:	44 1f       	adc	r20, r20
    1656:	aa 1f       	adc	r26, r26
    1658:	a9 f3       	breq	.-22     	; 0x1644 <__divsf3_pse+0x10>
    165a:	33 d0       	rcall	.+102    	; 0x16c2 <__divsf3_pse+0x8e>
    165c:	0e 2e       	mov	r0, r30
    165e:	3a f0       	brmi	.+14     	; 0x166e <__divsf3_pse+0x3a>
    1660:	e0 e8       	ldi	r30, 0x80	; 128
    1662:	30 d0       	rcall	.+96     	; 0x16c4 <__divsf3_pse+0x90>
    1664:	91 50       	subi	r25, 0x01	; 1
    1666:	50 40       	sbci	r21, 0x00	; 0
    1668:	e6 95       	lsr	r30
    166a:	00 1c       	adc	r0, r0
    166c:	ca f7       	brpl	.-14     	; 0x1660 <__divsf3_pse+0x2c>
    166e:	29 d0       	rcall	.+82     	; 0x16c2 <__divsf3_pse+0x8e>
    1670:	fe 2f       	mov	r31, r30
    1672:	27 d0       	rcall	.+78     	; 0x16c2 <__divsf3_pse+0x8e>
    1674:	66 0f       	add	r22, r22
    1676:	77 1f       	adc	r23, r23
    1678:	88 1f       	adc	r24, r24
    167a:	bb 1f       	adc	r27, r27
    167c:	26 17       	cp	r18, r22
    167e:	37 07       	cpc	r19, r23
    1680:	48 07       	cpc	r20, r24
    1682:	ab 07       	cpc	r26, r27
    1684:	b0 e8       	ldi	r27, 0x80	; 128
    1686:	09 f0       	breq	.+2      	; 0x168a <__divsf3_pse+0x56>
    1688:	bb 0b       	sbc	r27, r27
    168a:	80 2d       	mov	r24, r0
    168c:	bf 01       	movw	r22, r30
    168e:	ff 27       	eor	r31, r31
    1690:	93 58       	subi	r25, 0x83	; 131
    1692:	5f 4f       	sbci	r21, 0xFF	; 255
    1694:	2a f0       	brmi	.+10     	; 0x16a0 <__divsf3_pse+0x6c>
    1696:	9e 3f       	cpi	r25, 0xFE	; 254
    1698:	51 05       	cpc	r21, r1
    169a:	68 f0       	brcs	.+26     	; 0x16b6 <__divsf3_pse+0x82>
    169c:	92 c0       	rjmp	.+292    	; 0x17c2 <__fp_inf>
    169e:	dc c0       	rjmp	.+440    	; 0x1858 <__fp_szero>
    16a0:	5f 3f       	cpi	r21, 0xFF	; 255
    16a2:	ec f3       	brlt	.-6      	; 0x169e <__divsf3_pse+0x6a>
    16a4:	98 3e       	cpi	r25, 0xE8	; 232
    16a6:	dc f3       	brlt	.-10     	; 0x169e <__divsf3_pse+0x6a>
    16a8:	86 95       	lsr	r24
    16aa:	77 95       	ror	r23
    16ac:	67 95       	ror	r22
    16ae:	b7 95       	ror	r27
    16b0:	f7 95       	ror	r31
    16b2:	9f 5f       	subi	r25, 0xFF	; 255
    16b4:	c9 f7       	brne	.-14     	; 0x16a8 <__divsf3_pse+0x74>
    16b6:	88 0f       	add	r24, r24
    16b8:	91 1d       	adc	r25, r1
    16ba:	96 95       	lsr	r25
    16bc:	87 95       	ror	r24
    16be:	97 f9       	bld	r25, 7
    16c0:	08 95       	ret
    16c2:	e1 e0       	ldi	r30, 0x01	; 1
    16c4:	66 0f       	add	r22, r22
    16c6:	77 1f       	adc	r23, r23
    16c8:	88 1f       	adc	r24, r24
    16ca:	bb 1f       	adc	r27, r27
    16cc:	62 17       	cp	r22, r18
    16ce:	73 07       	cpc	r23, r19
    16d0:	84 07       	cpc	r24, r20
    16d2:	ba 07       	cpc	r27, r26
    16d4:	20 f0       	brcs	.+8      	; 0x16de <__divsf3_pse+0xaa>
    16d6:	62 1b       	sub	r22, r18
    16d8:	73 0b       	sbc	r23, r19
    16da:	84 0b       	sbc	r24, r20
    16dc:	ba 0b       	sbc	r27, r26
    16de:	ee 1f       	adc	r30, r30
    16e0:	88 f7       	brcc	.-30     	; 0x16c4 <__divsf3_pse+0x90>
    16e2:	e0 95       	com	r30
    16e4:	08 95       	ret

000016e6 <__fixsfsi>:
    16e6:	04 d0       	rcall	.+8      	; 0x16f0 <__fixunssfsi>
    16e8:	68 94       	set
    16ea:	b1 11       	cpse	r27, r1
    16ec:	b5 c0       	rjmp	.+362    	; 0x1858 <__fp_szero>
    16ee:	08 95       	ret

000016f0 <__fixunssfsi>:
    16f0:	98 d0       	rcall	.+304    	; 0x1822 <__fp_splitA>
    16f2:	88 f0       	brcs	.+34     	; 0x1716 <__fixunssfsi+0x26>
    16f4:	9f 57       	subi	r25, 0x7F	; 127
    16f6:	90 f0       	brcs	.+36     	; 0x171c <__fixunssfsi+0x2c>
    16f8:	b9 2f       	mov	r27, r25
    16fa:	99 27       	eor	r25, r25
    16fc:	b7 51       	subi	r27, 0x17	; 23
    16fe:	a0 f0       	brcs	.+40     	; 0x1728 <__fixunssfsi+0x38>
    1700:	d1 f0       	breq	.+52     	; 0x1736 <__fixunssfsi+0x46>
    1702:	66 0f       	add	r22, r22
    1704:	77 1f       	adc	r23, r23
    1706:	88 1f       	adc	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	1a f0       	brmi	.+6      	; 0x1712 <__fixunssfsi+0x22>
    170c:	ba 95       	dec	r27
    170e:	c9 f7       	brne	.-14     	; 0x1702 <__fixunssfsi+0x12>
    1710:	12 c0       	rjmp	.+36     	; 0x1736 <__fixunssfsi+0x46>
    1712:	b1 30       	cpi	r27, 0x01	; 1
    1714:	81 f0       	breq	.+32     	; 0x1736 <__fixunssfsi+0x46>
    1716:	9f d0       	rcall	.+318    	; 0x1856 <__fp_zero>
    1718:	b1 e0       	ldi	r27, 0x01	; 1
    171a:	08 95       	ret
    171c:	9c c0       	rjmp	.+312    	; 0x1856 <__fp_zero>
    171e:	67 2f       	mov	r22, r23
    1720:	78 2f       	mov	r23, r24
    1722:	88 27       	eor	r24, r24
    1724:	b8 5f       	subi	r27, 0xF8	; 248
    1726:	39 f0       	breq	.+14     	; 0x1736 <__fixunssfsi+0x46>
    1728:	b9 3f       	cpi	r27, 0xF9	; 249
    172a:	cc f3       	brlt	.-14     	; 0x171e <__fixunssfsi+0x2e>
    172c:	86 95       	lsr	r24
    172e:	77 95       	ror	r23
    1730:	67 95       	ror	r22
    1732:	b3 95       	inc	r27
    1734:	d9 f7       	brne	.-10     	; 0x172c <__fixunssfsi+0x3c>
    1736:	3e f4       	brtc	.+14     	; 0x1746 <__fixunssfsi+0x56>
    1738:	90 95       	com	r25
    173a:	80 95       	com	r24
    173c:	70 95       	com	r23
    173e:	61 95       	neg	r22
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	8f 4f       	sbci	r24, 0xFF	; 255
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	08 95       	ret

00001748 <__floatunsisf>:
    1748:	e8 94       	clt
    174a:	09 c0       	rjmp	.+18     	; 0x175e <__floatsisf+0x12>

0000174c <__floatsisf>:
    174c:	97 fb       	bst	r25, 7
    174e:	3e f4       	brtc	.+14     	; 0x175e <__floatsisf+0x12>
    1750:	90 95       	com	r25
    1752:	80 95       	com	r24
    1754:	70 95       	com	r23
    1756:	61 95       	neg	r22
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	8f 4f       	sbci	r24, 0xFF	; 255
    175c:	9f 4f       	sbci	r25, 0xFF	; 255
    175e:	99 23       	and	r25, r25
    1760:	a9 f0       	breq	.+42     	; 0x178c <__floatsisf+0x40>
    1762:	f9 2f       	mov	r31, r25
    1764:	96 e9       	ldi	r25, 0x96	; 150
    1766:	bb 27       	eor	r27, r27
    1768:	93 95       	inc	r25
    176a:	f6 95       	lsr	r31
    176c:	87 95       	ror	r24
    176e:	77 95       	ror	r23
    1770:	67 95       	ror	r22
    1772:	b7 95       	ror	r27
    1774:	f1 11       	cpse	r31, r1
    1776:	f8 cf       	rjmp	.-16     	; 0x1768 <__floatsisf+0x1c>
    1778:	fa f4       	brpl	.+62     	; 0x17b8 <__floatsisf+0x6c>
    177a:	bb 0f       	add	r27, r27
    177c:	11 f4       	brne	.+4      	; 0x1782 <__floatsisf+0x36>
    177e:	60 ff       	sbrs	r22, 0
    1780:	1b c0       	rjmp	.+54     	; 0x17b8 <__floatsisf+0x6c>
    1782:	6f 5f       	subi	r22, 0xFF	; 255
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	8f 4f       	sbci	r24, 0xFF	; 255
    1788:	9f 4f       	sbci	r25, 0xFF	; 255
    178a:	16 c0       	rjmp	.+44     	; 0x17b8 <__floatsisf+0x6c>
    178c:	88 23       	and	r24, r24
    178e:	11 f0       	breq	.+4      	; 0x1794 <__floatsisf+0x48>
    1790:	96 e9       	ldi	r25, 0x96	; 150
    1792:	11 c0       	rjmp	.+34     	; 0x17b6 <__floatsisf+0x6a>
    1794:	77 23       	and	r23, r23
    1796:	21 f0       	breq	.+8      	; 0x17a0 <__floatsisf+0x54>
    1798:	9e e8       	ldi	r25, 0x8E	; 142
    179a:	87 2f       	mov	r24, r23
    179c:	76 2f       	mov	r23, r22
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <__floatsisf+0x5e>
    17a0:	66 23       	and	r22, r22
    17a2:	71 f0       	breq	.+28     	; 0x17c0 <__floatsisf+0x74>
    17a4:	96 e8       	ldi	r25, 0x86	; 134
    17a6:	86 2f       	mov	r24, r22
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	2a f0       	brmi	.+10     	; 0x17b8 <__floatsisf+0x6c>
    17ae:	9a 95       	dec	r25
    17b0:	66 0f       	add	r22, r22
    17b2:	77 1f       	adc	r23, r23
    17b4:	88 1f       	adc	r24, r24
    17b6:	da f7       	brpl	.-10     	; 0x17ae <__floatsisf+0x62>
    17b8:	88 0f       	add	r24, r24
    17ba:	96 95       	lsr	r25
    17bc:	87 95       	ror	r24
    17be:	97 f9       	bld	r25, 7
    17c0:	08 95       	ret

000017c2 <__fp_inf>:
    17c2:	97 f9       	bld	r25, 7
    17c4:	9f 67       	ori	r25, 0x7F	; 127
    17c6:	80 e8       	ldi	r24, 0x80	; 128
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	08 95       	ret

000017ce <__fp_nan>:
    17ce:	9f ef       	ldi	r25, 0xFF	; 255
    17d0:	80 ec       	ldi	r24, 0xC0	; 192
    17d2:	08 95       	ret

000017d4 <__fp_pscA>:
    17d4:	00 24       	eor	r0, r0
    17d6:	0a 94       	dec	r0
    17d8:	16 16       	cp	r1, r22
    17da:	17 06       	cpc	r1, r23
    17dc:	18 06       	cpc	r1, r24
    17de:	09 06       	cpc	r0, r25
    17e0:	08 95       	ret

000017e2 <__fp_pscB>:
    17e2:	00 24       	eor	r0, r0
    17e4:	0a 94       	dec	r0
    17e6:	12 16       	cp	r1, r18
    17e8:	13 06       	cpc	r1, r19
    17ea:	14 06       	cpc	r1, r20
    17ec:	05 06       	cpc	r0, r21
    17ee:	08 95       	ret

000017f0 <__fp_round>:
    17f0:	09 2e       	mov	r0, r25
    17f2:	03 94       	inc	r0
    17f4:	00 0c       	add	r0, r0
    17f6:	11 f4       	brne	.+4      	; 0x17fc <__fp_round+0xc>
    17f8:	88 23       	and	r24, r24
    17fa:	52 f0       	brmi	.+20     	; 0x1810 <__fp_round+0x20>
    17fc:	bb 0f       	add	r27, r27
    17fe:	40 f4       	brcc	.+16     	; 0x1810 <__fp_round+0x20>
    1800:	bf 2b       	or	r27, r31
    1802:	11 f4       	brne	.+4      	; 0x1808 <__fp_round+0x18>
    1804:	60 ff       	sbrs	r22, 0
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <__fp_round+0x20>
    1808:	6f 5f       	subi	r22, 0xFF	; 255
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	8f 4f       	sbci	r24, 0xFF	; 255
    180e:	9f 4f       	sbci	r25, 0xFF	; 255
    1810:	08 95       	ret

00001812 <__fp_split3>:
    1812:	57 fd       	sbrc	r21, 7
    1814:	90 58       	subi	r25, 0x80	; 128
    1816:	44 0f       	add	r20, r20
    1818:	55 1f       	adc	r21, r21
    181a:	59 f0       	breq	.+22     	; 0x1832 <__fp_splitA+0x10>
    181c:	5f 3f       	cpi	r21, 0xFF	; 255
    181e:	71 f0       	breq	.+28     	; 0x183c <__fp_splitA+0x1a>
    1820:	47 95       	ror	r20

00001822 <__fp_splitA>:
    1822:	88 0f       	add	r24, r24
    1824:	97 fb       	bst	r25, 7
    1826:	99 1f       	adc	r25, r25
    1828:	61 f0       	breq	.+24     	; 0x1842 <__fp_splitA+0x20>
    182a:	9f 3f       	cpi	r25, 0xFF	; 255
    182c:	79 f0       	breq	.+30     	; 0x184c <__fp_splitA+0x2a>
    182e:	87 95       	ror	r24
    1830:	08 95       	ret
    1832:	12 16       	cp	r1, r18
    1834:	13 06       	cpc	r1, r19
    1836:	14 06       	cpc	r1, r20
    1838:	55 1f       	adc	r21, r21
    183a:	f2 cf       	rjmp	.-28     	; 0x1820 <__fp_split3+0xe>
    183c:	46 95       	lsr	r20
    183e:	f1 df       	rcall	.-30     	; 0x1822 <__fp_splitA>
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <__fp_splitA+0x30>
    1842:	16 16       	cp	r1, r22
    1844:	17 06       	cpc	r1, r23
    1846:	18 06       	cpc	r1, r24
    1848:	99 1f       	adc	r25, r25
    184a:	f1 cf       	rjmp	.-30     	; 0x182e <__fp_splitA+0xc>
    184c:	86 95       	lsr	r24
    184e:	71 05       	cpc	r23, r1
    1850:	61 05       	cpc	r22, r1
    1852:	08 94       	sec
    1854:	08 95       	ret

00001856 <__fp_zero>:
    1856:	e8 94       	clt

00001858 <__fp_szero>:
    1858:	bb 27       	eor	r27, r27
    185a:	66 27       	eor	r22, r22
    185c:	77 27       	eor	r23, r23
    185e:	cb 01       	movw	r24, r22
    1860:	97 f9       	bld	r25, 7
    1862:	08 95       	ret

00001864 <__mulsf3>:
    1864:	0b d0       	rcall	.+22     	; 0x187c <__mulsf3x>
    1866:	c4 cf       	rjmp	.-120    	; 0x17f0 <__fp_round>
    1868:	b5 df       	rcall	.-150    	; 0x17d4 <__fp_pscA>
    186a:	28 f0       	brcs	.+10     	; 0x1876 <__mulsf3+0x12>
    186c:	ba df       	rcall	.-140    	; 0x17e2 <__fp_pscB>
    186e:	18 f0       	brcs	.+6      	; 0x1876 <__mulsf3+0x12>
    1870:	95 23       	and	r25, r21
    1872:	09 f0       	breq	.+2      	; 0x1876 <__mulsf3+0x12>
    1874:	a6 cf       	rjmp	.-180    	; 0x17c2 <__fp_inf>
    1876:	ab cf       	rjmp	.-170    	; 0x17ce <__fp_nan>
    1878:	11 24       	eor	r1, r1
    187a:	ee cf       	rjmp	.-36     	; 0x1858 <__fp_szero>

0000187c <__mulsf3x>:
    187c:	ca df       	rcall	.-108    	; 0x1812 <__fp_split3>
    187e:	a0 f3       	brcs	.-24     	; 0x1868 <__mulsf3+0x4>

00001880 <__mulsf3_pse>:
    1880:	95 9f       	mul	r25, r21
    1882:	d1 f3       	breq	.-12     	; 0x1878 <__mulsf3+0x14>
    1884:	95 0f       	add	r25, r21
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	55 1f       	adc	r21, r21
    188a:	62 9f       	mul	r22, r18
    188c:	f0 01       	movw	r30, r0
    188e:	72 9f       	mul	r23, r18
    1890:	bb 27       	eor	r27, r27
    1892:	f0 0d       	add	r31, r0
    1894:	b1 1d       	adc	r27, r1
    1896:	63 9f       	mul	r22, r19
    1898:	aa 27       	eor	r26, r26
    189a:	f0 0d       	add	r31, r0
    189c:	b1 1d       	adc	r27, r1
    189e:	aa 1f       	adc	r26, r26
    18a0:	64 9f       	mul	r22, r20
    18a2:	66 27       	eor	r22, r22
    18a4:	b0 0d       	add	r27, r0
    18a6:	a1 1d       	adc	r26, r1
    18a8:	66 1f       	adc	r22, r22
    18aa:	82 9f       	mul	r24, r18
    18ac:	22 27       	eor	r18, r18
    18ae:	b0 0d       	add	r27, r0
    18b0:	a1 1d       	adc	r26, r1
    18b2:	62 1f       	adc	r22, r18
    18b4:	73 9f       	mul	r23, r19
    18b6:	b0 0d       	add	r27, r0
    18b8:	a1 1d       	adc	r26, r1
    18ba:	62 1f       	adc	r22, r18
    18bc:	83 9f       	mul	r24, r19
    18be:	a0 0d       	add	r26, r0
    18c0:	61 1d       	adc	r22, r1
    18c2:	22 1f       	adc	r18, r18
    18c4:	74 9f       	mul	r23, r20
    18c6:	33 27       	eor	r19, r19
    18c8:	a0 0d       	add	r26, r0
    18ca:	61 1d       	adc	r22, r1
    18cc:	23 1f       	adc	r18, r19
    18ce:	84 9f       	mul	r24, r20
    18d0:	60 0d       	add	r22, r0
    18d2:	21 1d       	adc	r18, r1
    18d4:	82 2f       	mov	r24, r18
    18d6:	76 2f       	mov	r23, r22
    18d8:	6a 2f       	mov	r22, r26
    18da:	11 24       	eor	r1, r1
    18dc:	9f 57       	subi	r25, 0x7F	; 127
    18de:	50 40       	sbci	r21, 0x00	; 0
    18e0:	8a f0       	brmi	.+34     	; 0x1904 <__mulsf3_pse+0x84>
    18e2:	e1 f0       	breq	.+56     	; 0x191c <__mulsf3_pse+0x9c>
    18e4:	88 23       	and	r24, r24
    18e6:	4a f0       	brmi	.+18     	; 0x18fa <__mulsf3_pse+0x7a>
    18e8:	ee 0f       	add	r30, r30
    18ea:	ff 1f       	adc	r31, r31
    18ec:	bb 1f       	adc	r27, r27
    18ee:	66 1f       	adc	r22, r22
    18f0:	77 1f       	adc	r23, r23
    18f2:	88 1f       	adc	r24, r24
    18f4:	91 50       	subi	r25, 0x01	; 1
    18f6:	50 40       	sbci	r21, 0x00	; 0
    18f8:	a9 f7       	brne	.-22     	; 0x18e4 <__mulsf3_pse+0x64>
    18fa:	9e 3f       	cpi	r25, 0xFE	; 254
    18fc:	51 05       	cpc	r21, r1
    18fe:	70 f0       	brcs	.+28     	; 0x191c <__mulsf3_pse+0x9c>
    1900:	60 cf       	rjmp	.-320    	; 0x17c2 <__fp_inf>
    1902:	aa cf       	rjmp	.-172    	; 0x1858 <__fp_szero>
    1904:	5f 3f       	cpi	r21, 0xFF	; 255
    1906:	ec f3       	brlt	.-6      	; 0x1902 <__mulsf3_pse+0x82>
    1908:	98 3e       	cpi	r25, 0xE8	; 232
    190a:	dc f3       	brlt	.-10     	; 0x1902 <__mulsf3_pse+0x82>
    190c:	86 95       	lsr	r24
    190e:	77 95       	ror	r23
    1910:	67 95       	ror	r22
    1912:	b7 95       	ror	r27
    1914:	f7 95       	ror	r31
    1916:	e7 95       	ror	r30
    1918:	9f 5f       	subi	r25, 0xFF	; 255
    191a:	c1 f7       	brne	.-16     	; 0x190c <__mulsf3_pse+0x8c>
    191c:	fe 2b       	or	r31, r30
    191e:	88 0f       	add	r24, r24
    1920:	91 1d       	adc	r25, r1
    1922:	96 95       	lsr	r25
    1924:	87 95       	ror	r24
    1926:	97 f9       	bld	r25, 7
    1928:	08 95       	ret

0000192a <pow>:
    192a:	fa 01       	movw	r30, r20
    192c:	ee 0f       	add	r30, r30
    192e:	ff 1f       	adc	r31, r31
    1930:	30 96       	adiw	r30, 0x00	; 0
    1932:	21 05       	cpc	r18, r1
    1934:	31 05       	cpc	r19, r1
    1936:	99 f1       	breq	.+102    	; 0x199e <pow+0x74>
    1938:	61 15       	cp	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	61 f4       	brne	.+24     	; 0x1956 <pow+0x2c>
    193e:	80 38       	cpi	r24, 0x80	; 128
    1940:	bf e3       	ldi	r27, 0x3F	; 63
    1942:	9b 07       	cpc	r25, r27
    1944:	49 f1       	breq	.+82     	; 0x1998 <pow+0x6e>
    1946:	68 94       	set
    1948:	90 38       	cpi	r25, 0x80	; 128
    194a:	81 05       	cpc	r24, r1
    194c:	61 f0       	breq	.+24     	; 0x1966 <pow+0x3c>
    194e:	80 38       	cpi	r24, 0x80	; 128
    1950:	bf ef       	ldi	r27, 0xFF	; 255
    1952:	9b 07       	cpc	r25, r27
    1954:	41 f0       	breq	.+16     	; 0x1966 <pow+0x3c>
    1956:	99 23       	and	r25, r25
    1958:	42 f5       	brpl	.+80     	; 0x19aa <pow+0x80>
    195a:	ff 3f       	cpi	r31, 0xFF	; 255
    195c:	e1 05       	cpc	r30, r1
    195e:	31 05       	cpc	r19, r1
    1960:	21 05       	cpc	r18, r1
    1962:	11 f1       	breq	.+68     	; 0x19a8 <pow+0x7e>
    1964:	e8 94       	clt
    1966:	08 94       	sec
    1968:	e7 95       	ror	r30
    196a:	d9 01       	movw	r26, r18
    196c:	aa 23       	and	r26, r26
    196e:	29 f4       	brne	.+10     	; 0x197a <pow+0x50>
    1970:	ab 2f       	mov	r26, r27
    1972:	be 2f       	mov	r27, r30
    1974:	f8 5f       	subi	r31, 0xF8	; 248
    1976:	d0 f3       	brcs	.-12     	; 0x196c <pow+0x42>
    1978:	10 c0       	rjmp	.+32     	; 0x199a <pow+0x70>
    197a:	ff 5f       	subi	r31, 0xFF	; 255
    197c:	70 f4       	brcc	.+28     	; 0x199a <pow+0x70>
    197e:	a6 95       	lsr	r26
    1980:	e0 f7       	brcc	.-8      	; 0x197a <pow+0x50>
    1982:	f7 39       	cpi	r31, 0x97	; 151
    1984:	50 f0       	brcs	.+20     	; 0x199a <pow+0x70>
    1986:	19 f0       	breq	.+6      	; 0x198e <pow+0x64>
    1988:	ff 3a       	cpi	r31, 0xAF	; 175
    198a:	38 f4       	brcc	.+14     	; 0x199a <pow+0x70>
    198c:	9f 77       	andi	r25, 0x7F	; 127
    198e:	9f 93       	push	r25
    1990:	0c d0       	rcall	.+24     	; 0x19aa <pow+0x80>
    1992:	0f 90       	pop	r0
    1994:	07 fc       	sbrc	r0, 7
    1996:	90 58       	subi	r25, 0x80	; 128
    1998:	08 95       	ret
    199a:	3e f0       	brts	.+14     	; 0x19aa <pow+0x80>
    199c:	18 cf       	rjmp	.-464    	; 0x17ce <__fp_nan>
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	80 e8       	ldi	r24, 0x80	; 128
    19a4:	9f e3       	ldi	r25, 0x3F	; 63
    19a6:	08 95       	ret
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	9f 77       	andi	r25, 0x7F	; 127
    19ac:	5f 93       	push	r21
    19ae:	4f 93       	push	r20
    19b0:	3f 93       	push	r19
    19b2:	2f 93       	push	r18
    19b4:	9e d0       	rcall	.+316    	; 0x1af2 <log>
    19b6:	2f 91       	pop	r18
    19b8:	3f 91       	pop	r19
    19ba:	4f 91       	pop	r20
    19bc:	5f 91       	pop	r21
    19be:	52 df       	rcall	.-348    	; 0x1864 <__mulsf3>
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <exp>
    19c2:	19 f4       	brne	.+6      	; 0x19ca <pow+0xa0>
    19c4:	0e f0       	brts	.+2      	; 0x19c8 <pow+0x9e>
    19c6:	fd ce       	rjmp	.-518    	; 0x17c2 <__fp_inf>
    19c8:	46 cf       	rjmp	.-372    	; 0x1856 <__fp_zero>
    19ca:	01 cf       	rjmp	.-510    	; 0x17ce <__fp_nan>

000019cc <exp>:
    19cc:	2a df       	rcall	.-428    	; 0x1822 <__fp_splitA>
    19ce:	c8 f3       	brcs	.-14     	; 0x19c2 <pow+0x98>
    19d0:	96 38       	cpi	r25, 0x86	; 134
    19d2:	c0 f7       	brcc	.-16     	; 0x19c4 <pow+0x9a>
    19d4:	07 f8       	bld	r0, 7
    19d6:	0f 92       	push	r0
    19d8:	e8 94       	clt
    19da:	2b e3       	ldi	r18, 0x3B	; 59
    19dc:	3a ea       	ldi	r19, 0xAA	; 170
    19de:	48 eb       	ldi	r20, 0xB8	; 184
    19e0:	5f e7       	ldi	r21, 0x7F	; 127
    19e2:	4e df       	rcall	.-356    	; 0x1880 <__mulsf3_pse>
    19e4:	0f 92       	push	r0
    19e6:	0f 92       	push	r0
    19e8:	0f 92       	push	r0
    19ea:	4d b7       	in	r20, 0x3d	; 61
    19ec:	5e b7       	in	r21, 0x3e	; 62
    19ee:	0f 92       	push	r0
    19f0:	c0 d0       	rcall	.+384    	; 0x1b72 <modf>
    19f2:	ec ef       	ldi	r30, 0xFC	; 252
    19f4:	f1 e0       	ldi	r31, 0x01	; 1
    19f6:	16 d0       	rcall	.+44     	; 0x1a24 <__fp_powser>
    19f8:	4f 91       	pop	r20
    19fa:	5f 91       	pop	r21
    19fc:	ef 91       	pop	r30
    19fe:	ff 91       	pop	r31
    1a00:	e5 95       	asr	r30
    1a02:	ee 1f       	adc	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	49 f0       	breq	.+18     	; 0x1a1a <exp+0x4e>
    1a08:	fe 57       	subi	r31, 0x7E	; 126
    1a0a:	e0 68       	ori	r30, 0x80	; 128
    1a0c:	44 27       	eor	r20, r20
    1a0e:	ee 0f       	add	r30, r30
    1a10:	44 1f       	adc	r20, r20
    1a12:	fa 95       	dec	r31
    1a14:	e1 f7       	brne	.-8      	; 0x1a0e <exp+0x42>
    1a16:	41 95       	neg	r20
    1a18:	55 0b       	sbc	r21, r21
    1a1a:	32 d0       	rcall	.+100    	; 0x1a80 <ldexp>
    1a1c:	0f 90       	pop	r0
    1a1e:	07 fe       	sbrs	r0, 7
    1a20:	26 c0       	rjmp	.+76     	; 0x1a6e <inverse>
    1a22:	08 95       	ret

00001a24 <__fp_powser>:
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	1f 93       	push	r17
    1a2a:	0f 93       	push	r16
    1a2c:	ff 92       	push	r15
    1a2e:	ef 92       	push	r14
    1a30:	df 92       	push	r13
    1a32:	7b 01       	movw	r14, r22
    1a34:	8c 01       	movw	r16, r24
    1a36:	68 94       	set
    1a38:	05 c0       	rjmp	.+10     	; 0x1a44 <__fp_powser+0x20>
    1a3a:	da 2e       	mov	r13, r26
    1a3c:	ef 01       	movw	r28, r30
    1a3e:	1e df       	rcall	.-452    	; 0x187c <__mulsf3x>
    1a40:	fe 01       	movw	r30, r28
    1a42:	e8 94       	clt
    1a44:	a5 91       	lpm	r26, Z+
    1a46:	25 91       	lpm	r18, Z+
    1a48:	35 91       	lpm	r19, Z+
    1a4a:	45 91       	lpm	r20, Z+
    1a4c:	55 91       	lpm	r21, Z+
    1a4e:	ae f3       	brts	.-22     	; 0x1a3a <__fp_powser+0x16>
    1a50:	ef 01       	movw	r28, r30
    1a52:	8e dd       	rcall	.-1252   	; 0x1570 <__addsf3x>
    1a54:	fe 01       	movw	r30, r28
    1a56:	97 01       	movw	r18, r14
    1a58:	a8 01       	movw	r20, r16
    1a5a:	da 94       	dec	r13
    1a5c:	79 f7       	brne	.-34     	; 0x1a3c <__fp_powser+0x18>
    1a5e:	df 90       	pop	r13
    1a60:	ef 90       	pop	r14
    1a62:	ff 90       	pop	r15
    1a64:	0f 91       	pop	r16
    1a66:	1f 91       	pop	r17
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <inverse>:
    1a6e:	9b 01       	movw	r18, r22
    1a70:	ac 01       	movw	r20, r24
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	80 e8       	ldi	r24, 0x80	; 128
    1a78:	9f e3       	ldi	r25, 0x3F	; 63
    1a7a:	cd cd       	rjmp	.-1126   	; 0x1616 <__divsf3>
    1a7c:	a2 ce       	rjmp	.-700    	; 0x17c2 <__fp_inf>
    1a7e:	ac c0       	rjmp	.+344    	; 0x1bd8 <__fp_mpack>

00001a80 <ldexp>:
    1a80:	d0 de       	rcall	.-608    	; 0x1822 <__fp_splitA>
    1a82:	e8 f3       	brcs	.-6      	; 0x1a7e <inverse+0x10>
    1a84:	99 23       	and	r25, r25
    1a86:	d9 f3       	breq	.-10     	; 0x1a7e <inverse+0x10>
    1a88:	94 0f       	add	r25, r20
    1a8a:	51 1d       	adc	r21, r1
    1a8c:	bb f3       	brvs	.-18     	; 0x1a7c <inverse+0xe>
    1a8e:	91 50       	subi	r25, 0x01	; 1
    1a90:	50 40       	sbci	r21, 0x00	; 0
    1a92:	94 f0       	brlt	.+36     	; 0x1ab8 <ldexp+0x38>
    1a94:	59 f0       	breq	.+22     	; 0x1aac <ldexp+0x2c>
    1a96:	88 23       	and	r24, r24
    1a98:	32 f0       	brmi	.+12     	; 0x1aa6 <ldexp+0x26>
    1a9a:	66 0f       	add	r22, r22
    1a9c:	77 1f       	adc	r23, r23
    1a9e:	88 1f       	adc	r24, r24
    1aa0:	91 50       	subi	r25, 0x01	; 1
    1aa2:	50 40       	sbci	r21, 0x00	; 0
    1aa4:	c1 f7       	brne	.-16     	; 0x1a96 <ldexp+0x16>
    1aa6:	9e 3f       	cpi	r25, 0xFE	; 254
    1aa8:	51 05       	cpc	r21, r1
    1aaa:	44 f7       	brge	.-48     	; 0x1a7c <inverse+0xe>
    1aac:	88 0f       	add	r24, r24
    1aae:	91 1d       	adc	r25, r1
    1ab0:	96 95       	lsr	r25
    1ab2:	87 95       	ror	r24
    1ab4:	97 f9       	bld	r25, 7
    1ab6:	08 95       	ret
    1ab8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aba:	ac f0       	brlt	.+42     	; 0x1ae6 <ldexp+0x66>
    1abc:	98 3e       	cpi	r25, 0xE8	; 232
    1abe:	9c f0       	brlt	.+38     	; 0x1ae6 <ldexp+0x66>
    1ac0:	bb 27       	eor	r27, r27
    1ac2:	86 95       	lsr	r24
    1ac4:	77 95       	ror	r23
    1ac6:	67 95       	ror	r22
    1ac8:	b7 95       	ror	r27
    1aca:	08 f4       	brcc	.+2      	; 0x1ace <ldexp+0x4e>
    1acc:	b1 60       	ori	r27, 0x01	; 1
    1ace:	93 95       	inc	r25
    1ad0:	c1 f7       	brne	.-16     	; 0x1ac2 <ldexp+0x42>
    1ad2:	bb 0f       	add	r27, r27
    1ad4:	58 f7       	brcc	.-42     	; 0x1aac <ldexp+0x2c>
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <ldexp+0x5c>
    1ad8:	60 ff       	sbrs	r22, 0
    1ada:	e8 cf       	rjmp	.-48     	; 0x1aac <ldexp+0x2c>
    1adc:	6f 5f       	subi	r22, 0xFF	; 255
    1ade:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	e3 cf       	rjmp	.-58     	; 0x1aac <ldexp+0x2c>
    1ae6:	b8 ce       	rjmp	.-656    	; 0x1858 <__fp_szero>
    1ae8:	0e f0       	brts	.+2      	; 0x1aec <ldexp+0x6c>
    1aea:	76 c0       	rjmp	.+236    	; 0x1bd8 <__fp_mpack>
    1aec:	70 ce       	rjmp	.-800    	; 0x17ce <__fp_nan>
    1aee:	68 94       	set
    1af0:	68 ce       	rjmp	.-816    	; 0x17c2 <__fp_inf>

00001af2 <log>:
    1af2:	97 de       	rcall	.-722    	; 0x1822 <__fp_splitA>
    1af4:	c8 f3       	brcs	.-14     	; 0x1ae8 <ldexp+0x68>
    1af6:	99 23       	and	r25, r25
    1af8:	d1 f3       	breq	.-12     	; 0x1aee <ldexp+0x6e>
    1afa:	c6 f3       	brts	.-16     	; 0x1aec <ldexp+0x6c>
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	1f 93       	push	r17
    1b02:	0f 93       	push	r16
    1b04:	ff 92       	push	r15
    1b06:	c9 2f       	mov	r28, r25
    1b08:	dd 27       	eor	r29, r29
    1b0a:	88 23       	and	r24, r24
    1b0c:	2a f0       	brmi	.+10     	; 0x1b18 <log+0x26>
    1b0e:	21 97       	sbiw	r28, 0x01	; 1
    1b10:	66 0f       	add	r22, r22
    1b12:	77 1f       	adc	r23, r23
    1b14:	88 1f       	adc	r24, r24
    1b16:	da f7       	brpl	.-10     	; 0x1b0e <log+0x1c>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f eb       	ldi	r21, 0xBF	; 191
    1b20:	9f e3       	ldi	r25, 0x3F	; 63
    1b22:	88 39       	cpi	r24, 0x98	; 152
    1b24:	20 f0       	brcs	.+8      	; 0x1b2e <log+0x3c>
    1b26:	80 3e       	cpi	r24, 0xE0	; 224
    1b28:	30 f0       	brcs	.+12     	; 0x1b36 <log+0x44>
    1b2a:	21 96       	adiw	r28, 0x01	; 1
    1b2c:	8f 77       	andi	r24, 0x7F	; 127
    1b2e:	0f dd       	rcall	.-1506   	; 0x154e <__addsf3>
    1b30:	e4 e2       	ldi	r30, 0x24	; 36
    1b32:	f2 e0       	ldi	r31, 0x02	; 2
    1b34:	03 c0       	rjmp	.+6      	; 0x1b3c <log+0x4a>
    1b36:	0b dd       	rcall	.-1514   	; 0x154e <__addsf3>
    1b38:	e1 e5       	ldi	r30, 0x51	; 81
    1b3a:	f2 e0       	ldi	r31, 0x02	; 2
    1b3c:	73 df       	rcall	.-282    	; 0x1a24 <__fp_powser>
    1b3e:	8b 01       	movw	r16, r22
    1b40:	be 01       	movw	r22, r28
    1b42:	ec 01       	movw	r28, r24
    1b44:	fb 2e       	mov	r15, r27
    1b46:	6f 57       	subi	r22, 0x7F	; 127
    1b48:	71 09       	sbc	r23, r1
    1b4a:	75 95       	asr	r23
    1b4c:	77 1f       	adc	r23, r23
    1b4e:	88 0b       	sbc	r24, r24
    1b50:	99 0b       	sbc	r25, r25
    1b52:	fc dd       	rcall	.-1032   	; 0x174c <__floatsisf>
    1b54:	28 e1       	ldi	r18, 0x18	; 24
    1b56:	32 e7       	ldi	r19, 0x72	; 114
    1b58:	41 e3       	ldi	r20, 0x31	; 49
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	8f de       	rcall	.-738    	; 0x187c <__mulsf3x>
    1b5e:	af 2d       	mov	r26, r15
    1b60:	98 01       	movw	r18, r16
    1b62:	ae 01       	movw	r20, r28
    1b64:	ff 90       	pop	r15
    1b66:	0f 91       	pop	r16
    1b68:	1f 91       	pop	r17
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	00 dd       	rcall	.-1536   	; 0x1570 <__addsf3x>
    1b70:	3f ce       	rjmp	.-898    	; 0x17f0 <__fp_round>

00001b72 <modf>:
    1b72:	fa 01       	movw	r30, r20
    1b74:	dc 01       	movw	r26, r24
    1b76:	aa 0f       	add	r26, r26
    1b78:	bb 1f       	adc	r27, r27
    1b7a:	9b 01       	movw	r18, r22
    1b7c:	ac 01       	movw	r20, r24
    1b7e:	bf 57       	subi	r27, 0x7F	; 127
    1b80:	28 f4       	brcc	.+10     	; 0x1b8c <modf+0x1a>
    1b82:	22 27       	eor	r18, r18
    1b84:	33 27       	eor	r19, r19
    1b86:	44 27       	eor	r20, r20
    1b88:	50 78       	andi	r21, 0x80	; 128
    1b8a:	1f c0       	rjmp	.+62     	; 0x1bca <modf+0x58>
    1b8c:	b7 51       	subi	r27, 0x17	; 23
    1b8e:	88 f4       	brcc	.+34     	; 0x1bb2 <modf+0x40>
    1b90:	ab 2f       	mov	r26, r27
    1b92:	00 24       	eor	r0, r0
    1b94:	46 95       	lsr	r20
    1b96:	37 95       	ror	r19
    1b98:	27 95       	ror	r18
    1b9a:	01 1c       	adc	r0, r1
    1b9c:	a3 95       	inc	r26
    1b9e:	d2 f3       	brmi	.-12     	; 0x1b94 <modf+0x22>
    1ba0:	00 20       	and	r0, r0
    1ba2:	69 f0       	breq	.+26     	; 0x1bbe <modf+0x4c>
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	44 1f       	adc	r20, r20
    1baa:	b3 95       	inc	r27
    1bac:	da f3       	brmi	.-10     	; 0x1ba4 <modf+0x32>
    1bae:	0d d0       	rcall	.+26     	; 0x1bca <modf+0x58>
    1bb0:	cd cc       	rjmp	.-1638   	; 0x154c <__subsf3>
    1bb2:	61 30       	cpi	r22, 0x01	; 1
    1bb4:	71 05       	cpc	r23, r1
    1bb6:	a0 e8       	ldi	r26, 0x80	; 128
    1bb8:	8a 07       	cpc	r24, r26
    1bba:	b9 46       	sbci	r27, 0x69	; 105
    1bbc:	30 f4       	brcc	.+12     	; 0x1bca <modf+0x58>
    1bbe:	9b 01       	movw	r18, r22
    1bc0:	ac 01       	movw	r20, r24
    1bc2:	66 27       	eor	r22, r22
    1bc4:	77 27       	eor	r23, r23
    1bc6:	88 27       	eor	r24, r24
    1bc8:	90 78       	andi	r25, 0x80	; 128
    1bca:	30 96       	adiw	r30, 0x00	; 0
    1bcc:	21 f0       	breq	.+8      	; 0x1bd6 <modf+0x64>
    1bce:	20 83       	st	Z, r18
    1bd0:	31 83       	std	Z+1, r19	; 0x01
    1bd2:	42 83       	std	Z+2, r20	; 0x02
    1bd4:	53 83       	std	Z+3, r21	; 0x03
    1bd6:	08 95       	ret

00001bd8 <__fp_mpack>:
    1bd8:	9f 3f       	cpi	r25, 0xFF	; 255
    1bda:	31 f0       	breq	.+12     	; 0x1be8 <__fp_mpack_finite+0xc>

00001bdc <__fp_mpack_finite>:
    1bdc:	91 50       	subi	r25, 0x01	; 1
    1bde:	20 f4       	brcc	.+8      	; 0x1be8 <__fp_mpack_finite+0xc>
    1be0:	87 95       	ror	r24
    1be2:	77 95       	ror	r23
    1be4:	67 95       	ror	r22
    1be6:	b7 95       	ror	r27
    1be8:	88 0f       	add	r24, r24
    1bea:	91 1d       	adc	r25, r1
    1bec:	96 95       	lsr	r25
    1bee:	87 95       	ror	r24
    1bf0:	97 f9       	bld	r25, 7
    1bf2:	08 95       	ret

00001bf4 <__mulsi3>:
    1bf4:	db 01       	movw	r26, r22
    1bf6:	8f 93       	push	r24
    1bf8:	9f 93       	push	r25
    1bfa:	2d d0       	rcall	.+90     	; 0x1c56 <__muluhisi3>
    1bfc:	bf 91       	pop	r27
    1bfe:	af 91       	pop	r26
    1c00:	a2 9f       	mul	r26, r18
    1c02:	80 0d       	add	r24, r0
    1c04:	91 1d       	adc	r25, r1
    1c06:	a3 9f       	mul	r26, r19
    1c08:	90 0d       	add	r25, r0
    1c0a:	b2 9f       	mul	r27, r18
    1c0c:	90 0d       	add	r25, r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	08 95       	ret

00001c12 <__udivmodsi4>:
    1c12:	a1 e2       	ldi	r26, 0x21	; 33
    1c14:	1a 2e       	mov	r1, r26
    1c16:	aa 1b       	sub	r26, r26
    1c18:	bb 1b       	sub	r27, r27
    1c1a:	fd 01       	movw	r30, r26
    1c1c:	0d c0       	rjmp	.+26     	; 0x1c38 <__udivmodsi4_ep>

00001c1e <__udivmodsi4_loop>:
    1c1e:	aa 1f       	adc	r26, r26
    1c20:	bb 1f       	adc	r27, r27
    1c22:	ee 1f       	adc	r30, r30
    1c24:	ff 1f       	adc	r31, r31
    1c26:	a2 17       	cp	r26, r18
    1c28:	b3 07       	cpc	r27, r19
    1c2a:	e4 07       	cpc	r30, r20
    1c2c:	f5 07       	cpc	r31, r21
    1c2e:	20 f0       	brcs	.+8      	; 0x1c38 <__udivmodsi4_ep>
    1c30:	a2 1b       	sub	r26, r18
    1c32:	b3 0b       	sbc	r27, r19
    1c34:	e4 0b       	sbc	r30, r20
    1c36:	f5 0b       	sbc	r31, r21

00001c38 <__udivmodsi4_ep>:
    1c38:	66 1f       	adc	r22, r22
    1c3a:	77 1f       	adc	r23, r23
    1c3c:	88 1f       	adc	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	1a 94       	dec	r1
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <__udivmodsi4_loop>
    1c44:	60 95       	com	r22
    1c46:	70 95       	com	r23
    1c48:	80 95       	com	r24
    1c4a:	90 95       	com	r25
    1c4c:	9b 01       	movw	r18, r22
    1c4e:	ac 01       	movw	r20, r24
    1c50:	bd 01       	movw	r22, r26
    1c52:	cf 01       	movw	r24, r30
    1c54:	08 95       	ret

00001c56 <__muluhisi3>:
    1c56:	09 d0       	rcall	.+18     	; 0x1c6a <__umulhisi3>
    1c58:	a5 9f       	mul	r26, r21
    1c5a:	90 0d       	add	r25, r0
    1c5c:	b4 9f       	mul	r27, r20
    1c5e:	90 0d       	add	r25, r0
    1c60:	a4 9f       	mul	r26, r20
    1c62:	80 0d       	add	r24, r0
    1c64:	91 1d       	adc	r25, r1
    1c66:	11 24       	eor	r1, r1
    1c68:	08 95       	ret

00001c6a <__umulhisi3>:
    1c6a:	a2 9f       	mul	r26, r18
    1c6c:	b0 01       	movw	r22, r0
    1c6e:	b3 9f       	mul	r27, r19
    1c70:	c0 01       	movw	r24, r0
    1c72:	a3 9f       	mul	r26, r19
    1c74:	70 0d       	add	r23, r0
    1c76:	81 1d       	adc	r24, r1
    1c78:	11 24       	eor	r1, r1
    1c7a:	91 1d       	adc	r25, r1
    1c7c:	b2 9f       	mul	r27, r18
    1c7e:	70 0d       	add	r23, r0
    1c80:	81 1d       	adc	r24, r1
    1c82:	11 24       	eor	r1, r1
    1c84:	91 1d       	adc	r25, r1
    1c86:	08 95       	ret

00001c88 <fdevopen>:
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	31 f4       	brne	.+12     	; 0x1ca0 <fdevopen+0x18>
    1c94:	61 15       	cp	r22, r1
    1c96:	71 05       	cpc	r23, r1
    1c98:	19 f4       	brne	.+6      	; 0x1ca0 <fdevopen+0x18>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	39 c0       	rjmp	.+114    	; 0x1d12 <fdevopen+0x8a>
    1ca0:	8b 01       	movw	r16, r22
    1ca2:	ec 01       	movw	r28, r24
    1ca4:	6e e0       	ldi	r22, 0x0E	; 14
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	71 d2       	rcall	.+1250   	; 0x2190 <calloc>
    1cae:	fc 01       	movw	r30, r24
    1cb0:	89 2b       	or	r24, r25
    1cb2:	99 f3       	breq	.-26     	; 0x1c9a <fdevopen+0x12>
    1cb4:	80 e8       	ldi	r24, 0x80	; 128
    1cb6:	83 83       	std	Z+3, r24	; 0x03
    1cb8:	01 15       	cp	r16, r1
    1cba:	11 05       	cpc	r17, r1
    1cbc:	71 f0       	breq	.+28     	; 0x1cda <fdevopen+0x52>
    1cbe:	02 87       	std	Z+10, r16	; 0x0a
    1cc0:	13 87       	std	Z+11, r17	; 0x0b
    1cc2:	81 e8       	ldi	r24, 0x81	; 129
    1cc4:	83 83       	std	Z+3, r24	; 0x03
    1cc6:	80 91 9b 20 	lds	r24, 0x209B	; 0x80209b <__iob>
    1cca:	90 91 9c 20 	lds	r25, 0x209C	; 0x80209c <__iob+0x1>
    1cce:	89 2b       	or	r24, r25
    1cd0:	21 f4       	brne	.+8      	; 0x1cda <fdevopen+0x52>
    1cd2:	e0 93 9b 20 	sts	0x209B, r30	; 0x80209b <__iob>
    1cd6:	f0 93 9c 20 	sts	0x209C, r31	; 0x80209c <__iob+0x1>
    1cda:	20 97       	sbiw	r28, 0x00	; 0
    1cdc:	c9 f0       	breq	.+50     	; 0x1d10 <fdevopen+0x88>
    1cde:	c0 87       	std	Z+8, r28	; 0x08
    1ce0:	d1 87       	std	Z+9, r29	; 0x09
    1ce2:	83 81       	ldd	r24, Z+3	; 0x03
    1ce4:	82 60       	ori	r24, 0x02	; 2
    1ce6:	83 83       	std	Z+3, r24	; 0x03
    1ce8:	80 91 9d 20 	lds	r24, 0x209D	; 0x80209d <__iob+0x2>
    1cec:	90 91 9e 20 	lds	r25, 0x209E	; 0x80209e <__iob+0x3>
    1cf0:	89 2b       	or	r24, r25
    1cf2:	71 f4       	brne	.+28     	; 0x1d10 <fdevopen+0x88>
    1cf4:	e0 93 9d 20 	sts	0x209D, r30	; 0x80209d <__iob+0x2>
    1cf8:	f0 93 9e 20 	sts	0x209E, r31	; 0x80209e <__iob+0x3>
    1cfc:	80 91 9f 20 	lds	r24, 0x209F	; 0x80209f <__iob+0x4>
    1d00:	90 91 a0 20 	lds	r25, 0x20A0	; 0x8020a0 <__iob+0x5>
    1d04:	89 2b       	or	r24, r25
    1d06:	21 f4       	brne	.+8      	; 0x1d10 <fdevopen+0x88>
    1d08:	e0 93 9f 20 	sts	0x209F, r30	; 0x80209f <__iob+0x4>
    1d0c:	f0 93 a0 20 	sts	0x20A0, r31	; 0x8020a0 <__iob+0x5>
    1d10:	cf 01       	movw	r24, r30
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	08 95       	ret

00001d1c <printf>:
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	ae 01       	movw	r20, r28
    1d26:	4a 5f       	subi	r20, 0xFA	; 250
    1d28:	5f 4f       	sbci	r21, 0xFF	; 255
    1d2a:	fa 01       	movw	r30, r20
    1d2c:	61 91       	ld	r22, Z+
    1d2e:	71 91       	ld	r23, Z+
    1d30:	af 01       	movw	r20, r30
    1d32:	80 91 9d 20 	lds	r24, 0x209D	; 0x80209d <__iob+0x2>
    1d36:	90 91 9e 20 	lds	r25, 0x209E	; 0x80209e <__iob+0x3>
    1d3a:	33 d0       	rcall	.+102    	; 0x1da2 <vfprintf>
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <puts>:
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <__iob+0x2>
    1d4e:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <__iob+0x3>
    1d52:	23 81       	ldd	r18, Z+3	; 0x03
    1d54:	21 ff       	sbrs	r18, 1
    1d56:	1b c0       	rjmp	.+54     	; 0x1d8e <puts+0x4c>
    1d58:	8c 01       	movw	r16, r24
    1d5a:	d0 e0       	ldi	r29, 0x00	; 0
    1d5c:	c0 e0       	ldi	r28, 0x00	; 0
    1d5e:	f8 01       	movw	r30, r16
    1d60:	81 91       	ld	r24, Z+
    1d62:	8f 01       	movw	r16, r30
    1d64:	60 91 9d 20 	lds	r22, 0x209D	; 0x80209d <__iob+0x2>
    1d68:	70 91 9e 20 	lds	r23, 0x209E	; 0x80209e <__iob+0x3>
    1d6c:	db 01       	movw	r26, r22
    1d6e:	18 96       	adiw	r26, 0x08	; 8
    1d70:	ed 91       	ld	r30, X+
    1d72:	fc 91       	ld	r31, X
    1d74:	19 97       	sbiw	r26, 0x09	; 9
    1d76:	88 23       	and	r24, r24
    1d78:	31 f0       	breq	.+12     	; 0x1d86 <puts+0x44>
    1d7a:	19 95       	eicall
    1d7c:	89 2b       	or	r24, r25
    1d7e:	79 f3       	breq	.-34     	; 0x1d5e <puts+0x1c>
    1d80:	df ef       	ldi	r29, 0xFF	; 255
    1d82:	cf ef       	ldi	r28, 0xFF	; 255
    1d84:	ec cf       	rjmp	.-40     	; 0x1d5e <puts+0x1c>
    1d86:	8a e0       	ldi	r24, 0x0A	; 10
    1d88:	19 95       	eicall
    1d8a:	89 2b       	or	r24, r25
    1d8c:	19 f0       	breq	.+6      	; 0x1d94 <puts+0x52>
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	9f ef       	ldi	r25, 0xFF	; 255
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <puts+0x56>
    1d94:	8d 2f       	mov	r24, r29
    1d96:	9c 2f       	mov	r25, r28
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	08 95       	ret

00001da2 <vfprintf>:
    1da2:	2f 92       	push	r2
    1da4:	3f 92       	push	r3
    1da6:	4f 92       	push	r4
    1da8:	5f 92       	push	r5
    1daa:	6f 92       	push	r6
    1dac:	7f 92       	push	r7
    1dae:	8f 92       	push	r8
    1db0:	9f 92       	push	r9
    1db2:	af 92       	push	r10
    1db4:	bf 92       	push	r11
    1db6:	cf 92       	push	r12
    1db8:	df 92       	push	r13
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	2b 97       	sbiw	r28, 0x0b	; 11
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	6c 01       	movw	r12, r24
    1dd2:	7b 01       	movw	r14, r22
    1dd4:	8a 01       	movw	r16, r20
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	16 82       	std	Z+6, r1	; 0x06
    1dda:	17 82       	std	Z+7, r1	; 0x07
    1ddc:	83 81       	ldd	r24, Z+3	; 0x03
    1dde:	81 ff       	sbrs	r24, 1
    1de0:	bf c1       	rjmp	.+894    	; 0x2160 <vfprintf+0x3be>
    1de2:	ce 01       	movw	r24, r28
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	3c 01       	movw	r6, r24
    1de8:	f6 01       	movw	r30, r12
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	f7 01       	movw	r30, r14
    1dee:	93 fd       	sbrc	r25, 3
    1df0:	85 91       	lpm	r24, Z+
    1df2:	93 ff       	sbrs	r25, 3
    1df4:	81 91       	ld	r24, Z+
    1df6:	7f 01       	movw	r14, r30
    1df8:	88 23       	and	r24, r24
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <vfprintf+0x5c>
    1dfc:	ad c1       	rjmp	.+858    	; 0x2158 <vfprintf+0x3b6>
    1dfe:	85 32       	cpi	r24, 0x25	; 37
    1e00:	39 f4       	brne	.+14     	; 0x1e10 <vfprintf+0x6e>
    1e02:	93 fd       	sbrc	r25, 3
    1e04:	85 91       	lpm	r24, Z+
    1e06:	93 ff       	sbrs	r25, 3
    1e08:	81 91       	ld	r24, Z+
    1e0a:	7f 01       	movw	r14, r30
    1e0c:	85 32       	cpi	r24, 0x25	; 37
    1e0e:	21 f4       	brne	.+8      	; 0x1e18 <vfprintf+0x76>
    1e10:	b6 01       	movw	r22, r12
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	15 d3       	rcall	.+1578   	; 0x2440 <fputc>
    1e16:	e8 cf       	rjmp	.-48     	; 0x1de8 <vfprintf+0x46>
    1e18:	91 2c       	mov	r9, r1
    1e1a:	21 2c       	mov	r2, r1
    1e1c:	31 2c       	mov	r3, r1
    1e1e:	ff e1       	ldi	r31, 0x1F	; 31
    1e20:	f3 15       	cp	r31, r3
    1e22:	d8 f0       	brcs	.+54     	; 0x1e5a <vfprintf+0xb8>
    1e24:	8b 32       	cpi	r24, 0x2B	; 43
    1e26:	79 f0       	breq	.+30     	; 0x1e46 <vfprintf+0xa4>
    1e28:	38 f4       	brcc	.+14     	; 0x1e38 <vfprintf+0x96>
    1e2a:	80 32       	cpi	r24, 0x20	; 32
    1e2c:	79 f0       	breq	.+30     	; 0x1e4c <vfprintf+0xaa>
    1e2e:	83 32       	cpi	r24, 0x23	; 35
    1e30:	a1 f4       	brne	.+40     	; 0x1e5a <vfprintf+0xb8>
    1e32:	23 2d       	mov	r18, r3
    1e34:	20 61       	ori	r18, 0x10	; 16
    1e36:	1d c0       	rjmp	.+58     	; 0x1e72 <vfprintf+0xd0>
    1e38:	8d 32       	cpi	r24, 0x2D	; 45
    1e3a:	61 f0       	breq	.+24     	; 0x1e54 <vfprintf+0xb2>
    1e3c:	80 33       	cpi	r24, 0x30	; 48
    1e3e:	69 f4       	brne	.+26     	; 0x1e5a <vfprintf+0xb8>
    1e40:	23 2d       	mov	r18, r3
    1e42:	21 60       	ori	r18, 0x01	; 1
    1e44:	16 c0       	rjmp	.+44     	; 0x1e72 <vfprintf+0xd0>
    1e46:	83 2d       	mov	r24, r3
    1e48:	82 60       	ori	r24, 0x02	; 2
    1e4a:	38 2e       	mov	r3, r24
    1e4c:	e3 2d       	mov	r30, r3
    1e4e:	e4 60       	ori	r30, 0x04	; 4
    1e50:	3e 2e       	mov	r3, r30
    1e52:	2a c0       	rjmp	.+84     	; 0x1ea8 <vfprintf+0x106>
    1e54:	f3 2d       	mov	r31, r3
    1e56:	f8 60       	ori	r31, 0x08	; 8
    1e58:	1d c0       	rjmp	.+58     	; 0x1e94 <vfprintf+0xf2>
    1e5a:	37 fc       	sbrc	r3, 7
    1e5c:	2d c0       	rjmp	.+90     	; 0x1eb8 <vfprintf+0x116>
    1e5e:	20 ed       	ldi	r18, 0xD0	; 208
    1e60:	28 0f       	add	r18, r24
    1e62:	2a 30       	cpi	r18, 0x0A	; 10
    1e64:	40 f0       	brcs	.+16     	; 0x1e76 <vfprintf+0xd4>
    1e66:	8e 32       	cpi	r24, 0x2E	; 46
    1e68:	b9 f4       	brne	.+46     	; 0x1e98 <vfprintf+0xf6>
    1e6a:	36 fc       	sbrc	r3, 6
    1e6c:	75 c1       	rjmp	.+746    	; 0x2158 <vfprintf+0x3b6>
    1e6e:	23 2d       	mov	r18, r3
    1e70:	20 64       	ori	r18, 0x40	; 64
    1e72:	32 2e       	mov	r3, r18
    1e74:	19 c0       	rjmp	.+50     	; 0x1ea8 <vfprintf+0x106>
    1e76:	36 fe       	sbrs	r3, 6
    1e78:	06 c0       	rjmp	.+12     	; 0x1e86 <vfprintf+0xe4>
    1e7a:	8a e0       	ldi	r24, 0x0A	; 10
    1e7c:	98 9e       	mul	r9, r24
    1e7e:	20 0d       	add	r18, r0
    1e80:	11 24       	eor	r1, r1
    1e82:	92 2e       	mov	r9, r18
    1e84:	11 c0       	rjmp	.+34     	; 0x1ea8 <vfprintf+0x106>
    1e86:	ea e0       	ldi	r30, 0x0A	; 10
    1e88:	2e 9e       	mul	r2, r30
    1e8a:	20 0d       	add	r18, r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	22 2e       	mov	r2, r18
    1e90:	f3 2d       	mov	r31, r3
    1e92:	f0 62       	ori	r31, 0x20	; 32
    1e94:	3f 2e       	mov	r3, r31
    1e96:	08 c0       	rjmp	.+16     	; 0x1ea8 <vfprintf+0x106>
    1e98:	8c 36       	cpi	r24, 0x6C	; 108
    1e9a:	21 f4       	brne	.+8      	; 0x1ea4 <vfprintf+0x102>
    1e9c:	83 2d       	mov	r24, r3
    1e9e:	80 68       	ori	r24, 0x80	; 128
    1ea0:	38 2e       	mov	r3, r24
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <vfprintf+0x106>
    1ea4:	88 36       	cpi	r24, 0x68	; 104
    1ea6:	41 f4       	brne	.+16     	; 0x1eb8 <vfprintf+0x116>
    1ea8:	f7 01       	movw	r30, r14
    1eaa:	93 fd       	sbrc	r25, 3
    1eac:	85 91       	lpm	r24, Z+
    1eae:	93 ff       	sbrs	r25, 3
    1eb0:	81 91       	ld	r24, Z+
    1eb2:	7f 01       	movw	r14, r30
    1eb4:	81 11       	cpse	r24, r1
    1eb6:	b3 cf       	rjmp	.-154    	; 0x1e1e <vfprintf+0x7c>
    1eb8:	98 2f       	mov	r25, r24
    1eba:	9f 7d       	andi	r25, 0xDF	; 223
    1ebc:	95 54       	subi	r25, 0x45	; 69
    1ebe:	93 30       	cpi	r25, 0x03	; 3
    1ec0:	28 f4       	brcc	.+10     	; 0x1ecc <vfprintf+0x12a>
    1ec2:	0c 5f       	subi	r16, 0xFC	; 252
    1ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec6:	9f e3       	ldi	r25, 0x3F	; 63
    1ec8:	99 83       	std	Y+1, r25	; 0x01
    1eca:	0d c0       	rjmp	.+26     	; 0x1ee6 <vfprintf+0x144>
    1ecc:	83 36       	cpi	r24, 0x63	; 99
    1ece:	31 f0       	breq	.+12     	; 0x1edc <vfprintf+0x13a>
    1ed0:	83 37       	cpi	r24, 0x73	; 115
    1ed2:	71 f0       	breq	.+28     	; 0x1ef0 <vfprintf+0x14e>
    1ed4:	83 35       	cpi	r24, 0x53	; 83
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <vfprintf+0x138>
    1ed8:	55 c0       	rjmp	.+170    	; 0x1f84 <vfprintf+0x1e2>
    1eda:	20 c0       	rjmp	.+64     	; 0x1f1c <vfprintf+0x17a>
    1edc:	f8 01       	movw	r30, r16
    1ede:	80 81       	ld	r24, Z
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	0e 5f       	subi	r16, 0xFE	; 254
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee6:	88 24       	eor	r8, r8
    1ee8:	83 94       	inc	r8
    1eea:	91 2c       	mov	r9, r1
    1eec:	53 01       	movw	r10, r6
    1eee:	12 c0       	rjmp	.+36     	; 0x1f14 <vfprintf+0x172>
    1ef0:	28 01       	movw	r4, r16
    1ef2:	f2 e0       	ldi	r31, 0x02	; 2
    1ef4:	4f 0e       	add	r4, r31
    1ef6:	51 1c       	adc	r5, r1
    1ef8:	f8 01       	movw	r30, r16
    1efa:	a0 80       	ld	r10, Z
    1efc:	b1 80       	ldd	r11, Z+1	; 0x01
    1efe:	36 fe       	sbrs	r3, 6
    1f00:	03 c0       	rjmp	.+6      	; 0x1f08 <vfprintf+0x166>
    1f02:	69 2d       	mov	r22, r9
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <vfprintf+0x16a>
    1f08:	6f ef       	ldi	r22, 0xFF	; 255
    1f0a:	7f ef       	ldi	r23, 0xFF	; 255
    1f0c:	c5 01       	movw	r24, r10
    1f0e:	8d d2       	rcall	.+1306   	; 0x242a <strnlen>
    1f10:	4c 01       	movw	r8, r24
    1f12:	82 01       	movw	r16, r4
    1f14:	f3 2d       	mov	r31, r3
    1f16:	ff 77       	andi	r31, 0x7F	; 127
    1f18:	3f 2e       	mov	r3, r31
    1f1a:	15 c0       	rjmp	.+42     	; 0x1f46 <vfprintf+0x1a4>
    1f1c:	28 01       	movw	r4, r16
    1f1e:	22 e0       	ldi	r18, 0x02	; 2
    1f20:	42 0e       	add	r4, r18
    1f22:	51 1c       	adc	r5, r1
    1f24:	f8 01       	movw	r30, r16
    1f26:	a0 80       	ld	r10, Z
    1f28:	b1 80       	ldd	r11, Z+1	; 0x01
    1f2a:	36 fe       	sbrs	r3, 6
    1f2c:	03 c0       	rjmp	.+6      	; 0x1f34 <vfprintf+0x192>
    1f2e:	69 2d       	mov	r22, r9
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <vfprintf+0x196>
    1f34:	6f ef       	ldi	r22, 0xFF	; 255
    1f36:	7f ef       	ldi	r23, 0xFF	; 255
    1f38:	c5 01       	movw	r24, r10
    1f3a:	65 d2       	rcall	.+1226   	; 0x2406 <strnlen_P>
    1f3c:	4c 01       	movw	r8, r24
    1f3e:	f3 2d       	mov	r31, r3
    1f40:	f0 68       	ori	r31, 0x80	; 128
    1f42:	3f 2e       	mov	r3, r31
    1f44:	82 01       	movw	r16, r4
    1f46:	33 fc       	sbrc	r3, 3
    1f48:	19 c0       	rjmp	.+50     	; 0x1f7c <vfprintf+0x1da>
    1f4a:	82 2d       	mov	r24, r2
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	88 16       	cp	r8, r24
    1f50:	99 06       	cpc	r9, r25
    1f52:	a0 f4       	brcc	.+40     	; 0x1f7c <vfprintf+0x1da>
    1f54:	b6 01       	movw	r22, r12
    1f56:	80 e2       	ldi	r24, 0x20	; 32
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	72 d2       	rcall	.+1252   	; 0x2440 <fputc>
    1f5c:	2a 94       	dec	r2
    1f5e:	f5 cf       	rjmp	.-22     	; 0x1f4a <vfprintf+0x1a8>
    1f60:	f5 01       	movw	r30, r10
    1f62:	37 fc       	sbrc	r3, 7
    1f64:	85 91       	lpm	r24, Z+
    1f66:	37 fe       	sbrs	r3, 7
    1f68:	81 91       	ld	r24, Z+
    1f6a:	5f 01       	movw	r10, r30
    1f6c:	b6 01       	movw	r22, r12
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	67 d2       	rcall	.+1230   	; 0x2440 <fputc>
    1f72:	21 10       	cpse	r2, r1
    1f74:	2a 94       	dec	r2
    1f76:	21 e0       	ldi	r18, 0x01	; 1
    1f78:	82 1a       	sub	r8, r18
    1f7a:	91 08       	sbc	r9, r1
    1f7c:	81 14       	cp	r8, r1
    1f7e:	91 04       	cpc	r9, r1
    1f80:	79 f7       	brne	.-34     	; 0x1f60 <vfprintf+0x1be>
    1f82:	e1 c0       	rjmp	.+450    	; 0x2146 <vfprintf+0x3a4>
    1f84:	84 36       	cpi	r24, 0x64	; 100
    1f86:	11 f0       	breq	.+4      	; 0x1f8c <vfprintf+0x1ea>
    1f88:	89 36       	cpi	r24, 0x69	; 105
    1f8a:	39 f5       	brne	.+78     	; 0x1fda <vfprintf+0x238>
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	37 fe       	sbrs	r3, 7
    1f90:	07 c0       	rjmp	.+14     	; 0x1fa0 <vfprintf+0x1fe>
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	0c 5f       	subi	r16, 0xFC	; 252
    1f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9e:	08 c0       	rjmp	.+16     	; 0x1fb0 <vfprintf+0x20e>
    1fa0:	60 81       	ld	r22, Z
    1fa2:	71 81       	ldd	r23, Z+1	; 0x01
    1fa4:	07 2e       	mov	r0, r23
    1fa6:	00 0c       	add	r0, r0
    1fa8:	88 0b       	sbc	r24, r24
    1faa:	99 0b       	sbc	r25, r25
    1fac:	0e 5f       	subi	r16, 0xFE	; 254
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	f3 2d       	mov	r31, r3
    1fb2:	ff 76       	andi	r31, 0x6F	; 111
    1fb4:	3f 2e       	mov	r3, r31
    1fb6:	97 ff       	sbrs	r25, 7
    1fb8:	09 c0       	rjmp	.+18     	; 0x1fcc <vfprintf+0x22a>
    1fba:	90 95       	com	r25
    1fbc:	80 95       	com	r24
    1fbe:	70 95       	com	r23
    1fc0:	61 95       	neg	r22
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	f0 68       	ori	r31, 0x80	; 128
    1fca:	3f 2e       	mov	r3, r31
    1fcc:	2a e0       	ldi	r18, 0x0A	; 10
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	a3 01       	movw	r20, r6
    1fd2:	72 d2       	rcall	.+1252   	; 0x24b8 <__ultoa_invert>
    1fd4:	88 2e       	mov	r8, r24
    1fd6:	86 18       	sub	r8, r6
    1fd8:	44 c0       	rjmp	.+136    	; 0x2062 <vfprintf+0x2c0>
    1fda:	85 37       	cpi	r24, 0x75	; 117
    1fdc:	31 f4       	brne	.+12     	; 0x1fea <vfprintf+0x248>
    1fde:	23 2d       	mov	r18, r3
    1fe0:	2f 7e       	andi	r18, 0xEF	; 239
    1fe2:	b2 2e       	mov	r11, r18
    1fe4:	2a e0       	ldi	r18, 0x0A	; 10
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	25 c0       	rjmp	.+74     	; 0x2034 <vfprintf+0x292>
    1fea:	93 2d       	mov	r25, r3
    1fec:	99 7f       	andi	r25, 0xF9	; 249
    1fee:	b9 2e       	mov	r11, r25
    1ff0:	8f 36       	cpi	r24, 0x6F	; 111
    1ff2:	c1 f0       	breq	.+48     	; 0x2024 <vfprintf+0x282>
    1ff4:	18 f4       	brcc	.+6      	; 0x1ffc <vfprintf+0x25a>
    1ff6:	88 35       	cpi	r24, 0x58	; 88
    1ff8:	79 f0       	breq	.+30     	; 0x2018 <vfprintf+0x276>
    1ffa:	ae c0       	rjmp	.+348    	; 0x2158 <vfprintf+0x3b6>
    1ffc:	80 37       	cpi	r24, 0x70	; 112
    1ffe:	19 f0       	breq	.+6      	; 0x2006 <vfprintf+0x264>
    2000:	88 37       	cpi	r24, 0x78	; 120
    2002:	21 f0       	breq	.+8      	; 0x200c <vfprintf+0x26a>
    2004:	a9 c0       	rjmp	.+338    	; 0x2158 <vfprintf+0x3b6>
    2006:	e9 2f       	mov	r30, r25
    2008:	e0 61       	ori	r30, 0x10	; 16
    200a:	be 2e       	mov	r11, r30
    200c:	b4 fe       	sbrs	r11, 4
    200e:	0d c0       	rjmp	.+26     	; 0x202a <vfprintf+0x288>
    2010:	fb 2d       	mov	r31, r11
    2012:	f4 60       	ori	r31, 0x04	; 4
    2014:	bf 2e       	mov	r11, r31
    2016:	09 c0       	rjmp	.+18     	; 0x202a <vfprintf+0x288>
    2018:	34 fe       	sbrs	r3, 4
    201a:	0a c0       	rjmp	.+20     	; 0x2030 <vfprintf+0x28e>
    201c:	29 2f       	mov	r18, r25
    201e:	26 60       	ori	r18, 0x06	; 6
    2020:	b2 2e       	mov	r11, r18
    2022:	06 c0       	rjmp	.+12     	; 0x2030 <vfprintf+0x28e>
    2024:	28 e0       	ldi	r18, 0x08	; 8
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	05 c0       	rjmp	.+10     	; 0x2034 <vfprintf+0x292>
    202a:	20 e1       	ldi	r18, 0x10	; 16
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <vfprintf+0x292>
    2030:	20 e1       	ldi	r18, 0x10	; 16
    2032:	32 e0       	ldi	r19, 0x02	; 2
    2034:	f8 01       	movw	r30, r16
    2036:	b7 fe       	sbrs	r11, 7
    2038:	07 c0       	rjmp	.+14     	; 0x2048 <vfprintf+0x2a6>
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	0c 5f       	subi	r16, 0xFC	; 252
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	06 c0       	rjmp	.+12     	; 0x2054 <vfprintf+0x2b2>
    2048:	60 81       	ld	r22, Z
    204a:	71 81       	ldd	r23, Z+1	; 0x01
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 5f       	subi	r16, 0xFE	; 254
    2052:	1f 4f       	sbci	r17, 0xFF	; 255
    2054:	a3 01       	movw	r20, r6
    2056:	30 d2       	rcall	.+1120   	; 0x24b8 <__ultoa_invert>
    2058:	88 2e       	mov	r8, r24
    205a:	86 18       	sub	r8, r6
    205c:	fb 2d       	mov	r31, r11
    205e:	ff 77       	andi	r31, 0x7F	; 127
    2060:	3f 2e       	mov	r3, r31
    2062:	36 fe       	sbrs	r3, 6
    2064:	0d c0       	rjmp	.+26     	; 0x2080 <vfprintf+0x2de>
    2066:	23 2d       	mov	r18, r3
    2068:	2e 7f       	andi	r18, 0xFE	; 254
    206a:	a2 2e       	mov	r10, r18
    206c:	89 14       	cp	r8, r9
    206e:	58 f4       	brcc	.+22     	; 0x2086 <vfprintf+0x2e4>
    2070:	34 fe       	sbrs	r3, 4
    2072:	0b c0       	rjmp	.+22     	; 0x208a <vfprintf+0x2e8>
    2074:	32 fc       	sbrc	r3, 2
    2076:	09 c0       	rjmp	.+18     	; 0x208a <vfprintf+0x2e8>
    2078:	83 2d       	mov	r24, r3
    207a:	8e 7e       	andi	r24, 0xEE	; 238
    207c:	a8 2e       	mov	r10, r24
    207e:	05 c0       	rjmp	.+10     	; 0x208a <vfprintf+0x2e8>
    2080:	b8 2c       	mov	r11, r8
    2082:	a3 2c       	mov	r10, r3
    2084:	03 c0       	rjmp	.+6      	; 0x208c <vfprintf+0x2ea>
    2086:	b8 2c       	mov	r11, r8
    2088:	01 c0       	rjmp	.+2      	; 0x208c <vfprintf+0x2ea>
    208a:	b9 2c       	mov	r11, r9
    208c:	a4 fe       	sbrs	r10, 4
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <vfprintf+0x30c>
    2090:	fe 01       	movw	r30, r28
    2092:	e8 0d       	add	r30, r8
    2094:	f1 1d       	adc	r31, r1
    2096:	80 81       	ld	r24, Z
    2098:	80 33       	cpi	r24, 0x30	; 48
    209a:	21 f4       	brne	.+8      	; 0x20a4 <vfprintf+0x302>
    209c:	9a 2d       	mov	r25, r10
    209e:	99 7e       	andi	r25, 0xE9	; 233
    20a0:	a9 2e       	mov	r10, r25
    20a2:	09 c0       	rjmp	.+18     	; 0x20b6 <vfprintf+0x314>
    20a4:	a2 fe       	sbrs	r10, 2
    20a6:	06 c0       	rjmp	.+12     	; 0x20b4 <vfprintf+0x312>
    20a8:	b3 94       	inc	r11
    20aa:	b3 94       	inc	r11
    20ac:	04 c0       	rjmp	.+8      	; 0x20b6 <vfprintf+0x314>
    20ae:	8a 2d       	mov	r24, r10
    20b0:	86 78       	andi	r24, 0x86	; 134
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <vfprintf+0x314>
    20b4:	b3 94       	inc	r11
    20b6:	a3 fc       	sbrc	r10, 3
    20b8:	10 c0       	rjmp	.+32     	; 0x20da <vfprintf+0x338>
    20ba:	a0 fe       	sbrs	r10, 0
    20bc:	06 c0       	rjmp	.+12     	; 0x20ca <vfprintf+0x328>
    20be:	b2 14       	cp	r11, r2
    20c0:	80 f4       	brcc	.+32     	; 0x20e2 <vfprintf+0x340>
    20c2:	28 0c       	add	r2, r8
    20c4:	92 2c       	mov	r9, r2
    20c6:	9b 18       	sub	r9, r11
    20c8:	0d c0       	rjmp	.+26     	; 0x20e4 <vfprintf+0x342>
    20ca:	b2 14       	cp	r11, r2
    20cc:	58 f4       	brcc	.+22     	; 0x20e4 <vfprintf+0x342>
    20ce:	b6 01       	movw	r22, r12
    20d0:	80 e2       	ldi	r24, 0x20	; 32
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	b5 d1       	rcall	.+874    	; 0x2440 <fputc>
    20d6:	b3 94       	inc	r11
    20d8:	f8 cf       	rjmp	.-16     	; 0x20ca <vfprintf+0x328>
    20da:	b2 14       	cp	r11, r2
    20dc:	18 f4       	brcc	.+6      	; 0x20e4 <vfprintf+0x342>
    20de:	2b 18       	sub	r2, r11
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <vfprintf+0x344>
    20e2:	98 2c       	mov	r9, r8
    20e4:	21 2c       	mov	r2, r1
    20e6:	a4 fe       	sbrs	r10, 4
    20e8:	0f c0       	rjmp	.+30     	; 0x2108 <vfprintf+0x366>
    20ea:	b6 01       	movw	r22, r12
    20ec:	80 e3       	ldi	r24, 0x30	; 48
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	a7 d1       	rcall	.+846    	; 0x2440 <fputc>
    20f2:	a2 fe       	sbrs	r10, 2
    20f4:	16 c0       	rjmp	.+44     	; 0x2122 <vfprintf+0x380>
    20f6:	a1 fc       	sbrc	r10, 1
    20f8:	03 c0       	rjmp	.+6      	; 0x2100 <vfprintf+0x35e>
    20fa:	88 e7       	ldi	r24, 0x78	; 120
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <vfprintf+0x362>
    2100:	88 e5       	ldi	r24, 0x58	; 88
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	b6 01       	movw	r22, r12
    2106:	0c c0       	rjmp	.+24     	; 0x2120 <vfprintf+0x37e>
    2108:	8a 2d       	mov	r24, r10
    210a:	86 78       	andi	r24, 0x86	; 134
    210c:	51 f0       	breq	.+20     	; 0x2122 <vfprintf+0x380>
    210e:	a1 fe       	sbrs	r10, 1
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <vfprintf+0x374>
    2112:	8b e2       	ldi	r24, 0x2B	; 43
    2114:	01 c0       	rjmp	.+2      	; 0x2118 <vfprintf+0x376>
    2116:	80 e2       	ldi	r24, 0x20	; 32
    2118:	a7 fc       	sbrc	r10, 7
    211a:	8d e2       	ldi	r24, 0x2D	; 45
    211c:	b6 01       	movw	r22, r12
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	8f d1       	rcall	.+798    	; 0x2440 <fputc>
    2122:	89 14       	cp	r8, r9
    2124:	30 f4       	brcc	.+12     	; 0x2132 <vfprintf+0x390>
    2126:	b6 01       	movw	r22, r12
    2128:	80 e3       	ldi	r24, 0x30	; 48
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	89 d1       	rcall	.+786    	; 0x2440 <fputc>
    212e:	9a 94       	dec	r9
    2130:	f8 cf       	rjmp	.-16     	; 0x2122 <vfprintf+0x380>
    2132:	8a 94       	dec	r8
    2134:	f3 01       	movw	r30, r6
    2136:	e8 0d       	add	r30, r8
    2138:	f1 1d       	adc	r31, r1
    213a:	80 81       	ld	r24, Z
    213c:	b6 01       	movw	r22, r12
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	7f d1       	rcall	.+766    	; 0x2440 <fputc>
    2142:	81 10       	cpse	r8, r1
    2144:	f6 cf       	rjmp	.-20     	; 0x2132 <vfprintf+0x390>
    2146:	22 20       	and	r2, r2
    2148:	09 f4       	brne	.+2      	; 0x214c <vfprintf+0x3aa>
    214a:	4e ce       	rjmp	.-868    	; 0x1de8 <vfprintf+0x46>
    214c:	b6 01       	movw	r22, r12
    214e:	80 e2       	ldi	r24, 0x20	; 32
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	76 d1       	rcall	.+748    	; 0x2440 <fputc>
    2154:	2a 94       	dec	r2
    2156:	f7 cf       	rjmp	.-18     	; 0x2146 <vfprintf+0x3a4>
    2158:	f6 01       	movw	r30, r12
    215a:	86 81       	ldd	r24, Z+6	; 0x06
    215c:	97 81       	ldd	r25, Z+7	; 0x07
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <vfprintf+0x3c2>
    2160:	8f ef       	ldi	r24, 0xFF	; 255
    2162:	9f ef       	ldi	r25, 0xFF	; 255
    2164:	2b 96       	adiw	r28, 0x0b	; 11
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	ff 90       	pop	r15
    2174:	ef 90       	pop	r14
    2176:	df 90       	pop	r13
    2178:	cf 90       	pop	r12
    217a:	bf 90       	pop	r11
    217c:	af 90       	pop	r10
    217e:	9f 90       	pop	r9
    2180:	8f 90       	pop	r8
    2182:	7f 90       	pop	r7
    2184:	6f 90       	pop	r6
    2186:	5f 90       	pop	r5
    2188:	4f 90       	pop	r4
    218a:	3f 90       	pop	r3
    218c:	2f 90       	pop	r2
    218e:	08 95       	ret

00002190 <calloc>:
    2190:	0f 93       	push	r16
    2192:	1f 93       	push	r17
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	86 9f       	mul	r24, r22
    219a:	80 01       	movw	r16, r0
    219c:	87 9f       	mul	r24, r23
    219e:	10 0d       	add	r17, r0
    21a0:	96 9f       	mul	r25, r22
    21a2:	10 0d       	add	r17, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	c8 01       	movw	r24, r16
    21a8:	0d d0       	rcall	.+26     	; 0x21c4 <malloc>
    21aa:	ec 01       	movw	r28, r24
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	21 f0       	breq	.+8      	; 0x21b8 <calloc+0x28>
    21b0:	a8 01       	movw	r20, r16
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	70 e0       	ldi	r23, 0x00	; 0
    21b6:	32 d1       	rcall	.+612    	; 0x241c <memset>
    21b8:	ce 01       	movw	r24, r28
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	08 95       	ret

000021c4 <malloc>:
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	82 30       	cpi	r24, 0x02	; 2
    21ce:	91 05       	cpc	r25, r1
    21d0:	10 f4       	brcc	.+4      	; 0x21d6 <malloc+0x12>
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <__flp>
    21da:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <__flp+0x1>
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	a0 e0       	ldi	r26, 0x00	; 0
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	30 97       	sbiw	r30, 0x00	; 0
    21e8:	19 f1       	breq	.+70     	; 0x2230 <malloc+0x6c>
    21ea:	40 81       	ld	r20, Z
    21ec:	51 81       	ldd	r21, Z+1	; 0x01
    21ee:	02 81       	ldd	r16, Z+2	; 0x02
    21f0:	13 81       	ldd	r17, Z+3	; 0x03
    21f2:	48 17       	cp	r20, r24
    21f4:	59 07       	cpc	r21, r25
    21f6:	c8 f0       	brcs	.+50     	; 0x222a <malloc+0x66>
    21f8:	84 17       	cp	r24, r20
    21fa:	95 07       	cpc	r25, r21
    21fc:	69 f4       	brne	.+26     	; 0x2218 <malloc+0x54>
    21fe:	10 97       	sbiw	r26, 0x00	; 0
    2200:	31 f0       	breq	.+12     	; 0x220e <malloc+0x4a>
    2202:	12 96       	adiw	r26, 0x02	; 2
    2204:	0c 93       	st	X, r16
    2206:	12 97       	sbiw	r26, 0x02	; 2
    2208:	13 96       	adiw	r26, 0x03	; 3
    220a:	1c 93       	st	X, r17
    220c:	27 c0       	rjmp	.+78     	; 0x225c <malloc+0x98>
    220e:	00 93 a3 20 	sts	0x20A3, r16	; 0x8020a3 <__flp>
    2212:	10 93 a4 20 	sts	0x20A4, r17	; 0x8020a4 <__flp+0x1>
    2216:	22 c0       	rjmp	.+68     	; 0x225c <malloc+0x98>
    2218:	21 15       	cp	r18, r1
    221a:	31 05       	cpc	r19, r1
    221c:	19 f0       	breq	.+6      	; 0x2224 <malloc+0x60>
    221e:	42 17       	cp	r20, r18
    2220:	53 07       	cpc	r21, r19
    2222:	18 f4       	brcc	.+6      	; 0x222a <malloc+0x66>
    2224:	9a 01       	movw	r18, r20
    2226:	bd 01       	movw	r22, r26
    2228:	ef 01       	movw	r28, r30
    222a:	df 01       	movw	r26, r30
    222c:	f8 01       	movw	r30, r16
    222e:	db cf       	rjmp	.-74     	; 0x21e6 <malloc+0x22>
    2230:	21 15       	cp	r18, r1
    2232:	31 05       	cpc	r19, r1
    2234:	f9 f0       	breq	.+62     	; 0x2274 <malloc+0xb0>
    2236:	28 1b       	sub	r18, r24
    2238:	39 0b       	sbc	r19, r25
    223a:	24 30       	cpi	r18, 0x04	; 4
    223c:	31 05       	cpc	r19, r1
    223e:	80 f4       	brcc	.+32     	; 0x2260 <malloc+0x9c>
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	9b 81       	ldd	r25, Y+3	; 0x03
    2244:	61 15       	cp	r22, r1
    2246:	71 05       	cpc	r23, r1
    2248:	21 f0       	breq	.+8      	; 0x2252 <malloc+0x8e>
    224a:	fb 01       	movw	r30, r22
    224c:	82 83       	std	Z+2, r24	; 0x02
    224e:	93 83       	std	Z+3, r25	; 0x03
    2250:	04 c0       	rjmp	.+8      	; 0x225a <malloc+0x96>
    2252:	80 93 a3 20 	sts	0x20A3, r24	; 0x8020a3 <__flp>
    2256:	90 93 a4 20 	sts	0x20A4, r25	; 0x8020a4 <__flp+0x1>
    225a:	fe 01       	movw	r30, r28
    225c:	32 96       	adiw	r30, 0x02	; 2
    225e:	44 c0       	rjmp	.+136    	; 0x22e8 <malloc+0x124>
    2260:	fe 01       	movw	r30, r28
    2262:	e2 0f       	add	r30, r18
    2264:	f3 1f       	adc	r31, r19
    2266:	81 93       	st	Z+, r24
    2268:	91 93       	st	Z+, r25
    226a:	22 50       	subi	r18, 0x02	; 2
    226c:	31 09       	sbc	r19, r1
    226e:	28 83       	st	Y, r18
    2270:	39 83       	std	Y+1, r19	; 0x01
    2272:	3a c0       	rjmp	.+116    	; 0x22e8 <malloc+0x124>
    2274:	20 91 a1 20 	lds	r18, 0x20A1	; 0x8020a1 <__brkval>
    2278:	30 91 a2 20 	lds	r19, 0x20A2	; 0x8020a2 <__brkval+0x1>
    227c:	23 2b       	or	r18, r19
    227e:	41 f4       	brne	.+16     	; 0x2290 <malloc+0xcc>
    2280:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    2284:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2288:	20 93 a1 20 	sts	0x20A1, r18	; 0x8020a1 <__brkval>
    228c:	30 93 a2 20 	sts	0x20A2, r19	; 0x8020a2 <__brkval+0x1>
    2290:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    2294:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    2298:	21 15       	cp	r18, r1
    229a:	31 05       	cpc	r19, r1
    229c:	41 f4       	brne	.+16     	; 0x22ae <malloc+0xea>
    229e:	2d b7       	in	r18, 0x3d	; 61
    22a0:	3e b7       	in	r19, 0x3e	; 62
    22a2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    22a6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    22aa:	24 1b       	sub	r18, r20
    22ac:	35 0b       	sbc	r19, r21
    22ae:	e0 91 a1 20 	lds	r30, 0x20A1	; 0x8020a1 <__brkval>
    22b2:	f0 91 a2 20 	lds	r31, 0x20A2	; 0x8020a2 <__brkval+0x1>
    22b6:	e2 17       	cp	r30, r18
    22b8:	f3 07       	cpc	r31, r19
    22ba:	a0 f4       	brcc	.+40     	; 0x22e4 <malloc+0x120>
    22bc:	2e 1b       	sub	r18, r30
    22be:	3f 0b       	sbc	r19, r31
    22c0:	28 17       	cp	r18, r24
    22c2:	39 07       	cpc	r19, r25
    22c4:	78 f0       	brcs	.+30     	; 0x22e4 <malloc+0x120>
    22c6:	ac 01       	movw	r20, r24
    22c8:	4e 5f       	subi	r20, 0xFE	; 254
    22ca:	5f 4f       	sbci	r21, 0xFF	; 255
    22cc:	24 17       	cp	r18, r20
    22ce:	35 07       	cpc	r19, r21
    22d0:	48 f0       	brcs	.+18     	; 0x22e4 <malloc+0x120>
    22d2:	4e 0f       	add	r20, r30
    22d4:	5f 1f       	adc	r21, r31
    22d6:	40 93 a1 20 	sts	0x20A1, r20	; 0x8020a1 <__brkval>
    22da:	50 93 a2 20 	sts	0x20A2, r21	; 0x8020a2 <__brkval+0x1>
    22de:	81 93       	st	Z+, r24
    22e0:	91 93       	st	Z+, r25
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <malloc+0x124>
    22e4:	e0 e0       	ldi	r30, 0x00	; 0
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	cf 01       	movw	r24, r30
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	08 95       	ret

000022f4 <free>:
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	09 f4       	brne	.+2      	; 0x22fe <free+0xa>
    22fc:	81 c0       	rjmp	.+258    	; 0x2400 <free+0x10c>
    22fe:	fc 01       	movw	r30, r24
    2300:	32 97       	sbiw	r30, 0x02	; 2
    2302:	12 82       	std	Z+2, r1	; 0x02
    2304:	13 82       	std	Z+3, r1	; 0x03
    2306:	a0 91 a3 20 	lds	r26, 0x20A3	; 0x8020a3 <__flp>
    230a:	b0 91 a4 20 	lds	r27, 0x20A4	; 0x8020a4 <__flp+0x1>
    230e:	10 97       	sbiw	r26, 0x00	; 0
    2310:	81 f4       	brne	.+32     	; 0x2332 <free+0x3e>
    2312:	20 81       	ld	r18, Z
    2314:	31 81       	ldd	r19, Z+1	; 0x01
    2316:	82 0f       	add	r24, r18
    2318:	93 1f       	adc	r25, r19
    231a:	20 91 a1 20 	lds	r18, 0x20A1	; 0x8020a1 <__brkval>
    231e:	30 91 a2 20 	lds	r19, 0x20A2	; 0x8020a2 <__brkval+0x1>
    2322:	28 17       	cp	r18, r24
    2324:	39 07       	cpc	r19, r25
    2326:	51 f5       	brne	.+84     	; 0x237c <free+0x88>
    2328:	e0 93 a1 20 	sts	0x20A1, r30	; 0x8020a1 <__brkval>
    232c:	f0 93 a2 20 	sts	0x20A2, r31	; 0x8020a2 <__brkval+0x1>
    2330:	67 c0       	rjmp	.+206    	; 0x2400 <free+0x10c>
    2332:	ed 01       	movw	r28, r26
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	ce 17       	cp	r28, r30
    233a:	df 07       	cpc	r29, r31
    233c:	40 f4       	brcc	.+16     	; 0x234e <free+0x5a>
    233e:	4a 81       	ldd	r20, Y+2	; 0x02
    2340:	5b 81       	ldd	r21, Y+3	; 0x03
    2342:	9e 01       	movw	r18, r28
    2344:	41 15       	cp	r20, r1
    2346:	51 05       	cpc	r21, r1
    2348:	f1 f0       	breq	.+60     	; 0x2386 <free+0x92>
    234a:	ea 01       	movw	r28, r20
    234c:	f5 cf       	rjmp	.-22     	; 0x2338 <free+0x44>
    234e:	c2 83       	std	Z+2, r28	; 0x02
    2350:	d3 83       	std	Z+3, r29	; 0x03
    2352:	40 81       	ld	r20, Z
    2354:	51 81       	ldd	r21, Z+1	; 0x01
    2356:	84 0f       	add	r24, r20
    2358:	95 1f       	adc	r25, r21
    235a:	c8 17       	cp	r28, r24
    235c:	d9 07       	cpc	r29, r25
    235e:	59 f4       	brne	.+22     	; 0x2376 <free+0x82>
    2360:	88 81       	ld	r24, Y
    2362:	99 81       	ldd	r25, Y+1	; 0x01
    2364:	84 0f       	add	r24, r20
    2366:	95 1f       	adc	r25, r21
    2368:	02 96       	adiw	r24, 0x02	; 2
    236a:	80 83       	st	Z, r24
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	9b 81       	ldd	r25, Y+3	; 0x03
    2372:	82 83       	std	Z+2, r24	; 0x02
    2374:	93 83       	std	Z+3, r25	; 0x03
    2376:	21 15       	cp	r18, r1
    2378:	31 05       	cpc	r19, r1
    237a:	29 f4       	brne	.+10     	; 0x2386 <free+0x92>
    237c:	e0 93 a3 20 	sts	0x20A3, r30	; 0x8020a3 <__flp>
    2380:	f0 93 a4 20 	sts	0x20A4, r31	; 0x8020a4 <__flp+0x1>
    2384:	3d c0       	rjmp	.+122    	; 0x2400 <free+0x10c>
    2386:	e9 01       	movw	r28, r18
    2388:	ea 83       	std	Y+2, r30	; 0x02
    238a:	fb 83       	std	Y+3, r31	; 0x03
    238c:	49 91       	ld	r20, Y+
    238e:	59 91       	ld	r21, Y+
    2390:	c4 0f       	add	r28, r20
    2392:	d5 1f       	adc	r29, r21
    2394:	ec 17       	cp	r30, r28
    2396:	fd 07       	cpc	r31, r29
    2398:	61 f4       	brne	.+24     	; 0x23b2 <free+0xbe>
    239a:	80 81       	ld	r24, Z
    239c:	91 81       	ldd	r25, Z+1	; 0x01
    239e:	84 0f       	add	r24, r20
    23a0:	95 1f       	adc	r25, r21
    23a2:	02 96       	adiw	r24, 0x02	; 2
    23a4:	e9 01       	movw	r28, r18
    23a6:	88 83       	st	Y, r24
    23a8:	99 83       	std	Y+1, r25	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	8a 83       	std	Y+2, r24	; 0x02
    23b0:	9b 83       	std	Y+3, r25	; 0x03
    23b2:	e0 e0       	ldi	r30, 0x00	; 0
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	12 96       	adiw	r26, 0x02	; 2
    23b8:	8d 91       	ld	r24, X+
    23ba:	9c 91       	ld	r25, X
    23bc:	13 97       	sbiw	r26, 0x03	; 3
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	19 f0       	breq	.+6      	; 0x23c8 <free+0xd4>
    23c2:	fd 01       	movw	r30, r26
    23c4:	dc 01       	movw	r26, r24
    23c6:	f7 cf       	rjmp	.-18     	; 0x23b6 <free+0xc2>
    23c8:	8d 91       	ld	r24, X+
    23ca:	9c 91       	ld	r25, X
    23cc:	11 97       	sbiw	r26, 0x01	; 1
    23ce:	9d 01       	movw	r18, r26
    23d0:	2e 5f       	subi	r18, 0xFE	; 254
    23d2:	3f 4f       	sbci	r19, 0xFF	; 255
    23d4:	82 0f       	add	r24, r18
    23d6:	93 1f       	adc	r25, r19
    23d8:	20 91 a1 20 	lds	r18, 0x20A1	; 0x8020a1 <__brkval>
    23dc:	30 91 a2 20 	lds	r19, 0x20A2	; 0x8020a2 <__brkval+0x1>
    23e0:	28 17       	cp	r18, r24
    23e2:	39 07       	cpc	r19, r25
    23e4:	69 f4       	brne	.+26     	; 0x2400 <free+0x10c>
    23e6:	30 97       	sbiw	r30, 0x00	; 0
    23e8:	29 f4       	brne	.+10     	; 0x23f4 <free+0x100>
    23ea:	10 92 a3 20 	sts	0x20A3, r1	; 0x8020a3 <__flp>
    23ee:	10 92 a4 20 	sts	0x20A4, r1	; 0x8020a4 <__flp+0x1>
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <free+0x104>
    23f4:	12 82       	std	Z+2, r1	; 0x02
    23f6:	13 82       	std	Z+3, r1	; 0x03
    23f8:	a0 93 a1 20 	sts	0x20A1, r26	; 0x8020a1 <__brkval>
    23fc:	b0 93 a2 20 	sts	0x20A2, r27	; 0x8020a2 <__brkval+0x1>
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	08 95       	ret

00002406 <strnlen_P>:
    2406:	fc 01       	movw	r30, r24
    2408:	05 90       	lpm	r0, Z+
    240a:	61 50       	subi	r22, 0x01	; 1
    240c:	70 40       	sbci	r23, 0x00	; 0
    240e:	01 10       	cpse	r0, r1
    2410:	d8 f7       	brcc	.-10     	; 0x2408 <strnlen_P+0x2>
    2412:	80 95       	com	r24
    2414:	90 95       	com	r25
    2416:	8e 0f       	add	r24, r30
    2418:	9f 1f       	adc	r25, r31
    241a:	08 95       	ret

0000241c <memset>:
    241c:	dc 01       	movw	r26, r24
    241e:	01 c0       	rjmp	.+2      	; 0x2422 <memset+0x6>
    2420:	6d 93       	st	X+, r22
    2422:	41 50       	subi	r20, 0x01	; 1
    2424:	50 40       	sbci	r21, 0x00	; 0
    2426:	e0 f7       	brcc	.-8      	; 0x2420 <memset+0x4>
    2428:	08 95       	ret

0000242a <strnlen>:
    242a:	fc 01       	movw	r30, r24
    242c:	61 50       	subi	r22, 0x01	; 1
    242e:	70 40       	sbci	r23, 0x00	; 0
    2430:	01 90       	ld	r0, Z+
    2432:	01 10       	cpse	r0, r1
    2434:	d8 f7       	brcc	.-10     	; 0x242c <strnlen+0x2>
    2436:	80 95       	com	r24
    2438:	90 95       	com	r25
    243a:	8e 0f       	add	r24, r30
    243c:	9f 1f       	adc	r25, r31
    243e:	08 95       	ret

00002440 <fputc>:
    2440:	0f 93       	push	r16
    2442:	1f 93       	push	r17
    2444:	cf 93       	push	r28
    2446:	df 93       	push	r29
    2448:	fb 01       	movw	r30, r22
    244a:	23 81       	ldd	r18, Z+3	; 0x03
    244c:	21 fd       	sbrc	r18, 1
    244e:	03 c0       	rjmp	.+6      	; 0x2456 <fputc+0x16>
    2450:	8f ef       	ldi	r24, 0xFF	; 255
    2452:	9f ef       	ldi	r25, 0xFF	; 255
    2454:	2c c0       	rjmp	.+88     	; 0x24ae <fputc+0x6e>
    2456:	22 ff       	sbrs	r18, 2
    2458:	16 c0       	rjmp	.+44     	; 0x2486 <fputc+0x46>
    245a:	46 81       	ldd	r20, Z+6	; 0x06
    245c:	57 81       	ldd	r21, Z+7	; 0x07
    245e:	24 81       	ldd	r18, Z+4	; 0x04
    2460:	35 81       	ldd	r19, Z+5	; 0x05
    2462:	42 17       	cp	r20, r18
    2464:	53 07       	cpc	r21, r19
    2466:	44 f4       	brge	.+16     	; 0x2478 <fputc+0x38>
    2468:	a0 81       	ld	r26, Z
    246a:	b1 81       	ldd	r27, Z+1	; 0x01
    246c:	9d 01       	movw	r18, r26
    246e:	2f 5f       	subi	r18, 0xFF	; 255
    2470:	3f 4f       	sbci	r19, 0xFF	; 255
    2472:	20 83       	st	Z, r18
    2474:	31 83       	std	Z+1, r19	; 0x01
    2476:	8c 93       	st	X, r24
    2478:	26 81       	ldd	r18, Z+6	; 0x06
    247a:	37 81       	ldd	r19, Z+7	; 0x07
    247c:	2f 5f       	subi	r18, 0xFF	; 255
    247e:	3f 4f       	sbci	r19, 0xFF	; 255
    2480:	26 83       	std	Z+6, r18	; 0x06
    2482:	37 83       	std	Z+7, r19	; 0x07
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <fputc+0x6e>
    2486:	8b 01       	movw	r16, r22
    2488:	ec 01       	movw	r28, r24
    248a:	fb 01       	movw	r30, r22
    248c:	00 84       	ldd	r0, Z+8	; 0x08
    248e:	f1 85       	ldd	r31, Z+9	; 0x09
    2490:	e0 2d       	mov	r30, r0
    2492:	19 95       	eicall
    2494:	89 2b       	or	r24, r25
    2496:	e1 f6       	brne	.-72     	; 0x2450 <fputc+0x10>
    2498:	d8 01       	movw	r26, r16
    249a:	16 96       	adiw	r26, 0x06	; 6
    249c:	8d 91       	ld	r24, X+
    249e:	9c 91       	ld	r25, X
    24a0:	17 97       	sbiw	r26, 0x07	; 7
    24a2:	01 96       	adiw	r24, 0x01	; 1
    24a4:	16 96       	adiw	r26, 0x06	; 6
    24a6:	8d 93       	st	X+, r24
    24a8:	9c 93       	st	X, r25
    24aa:	17 97       	sbiw	r26, 0x07	; 7
    24ac:	ce 01       	movw	r24, r28
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	08 95       	ret

000024b8 <__ultoa_invert>:
    24b8:	fa 01       	movw	r30, r20
    24ba:	aa 27       	eor	r26, r26
    24bc:	28 30       	cpi	r18, 0x08	; 8
    24be:	51 f1       	breq	.+84     	; 0x2514 <__ultoa_invert+0x5c>
    24c0:	20 31       	cpi	r18, 0x10	; 16
    24c2:	81 f1       	breq	.+96     	; 0x2524 <__ultoa_invert+0x6c>
    24c4:	e8 94       	clt
    24c6:	6f 93       	push	r22
    24c8:	6e 7f       	andi	r22, 0xFE	; 254
    24ca:	6e 5f       	subi	r22, 0xFE	; 254
    24cc:	7f 4f       	sbci	r23, 0xFF	; 255
    24ce:	8f 4f       	sbci	r24, 0xFF	; 255
    24d0:	9f 4f       	sbci	r25, 0xFF	; 255
    24d2:	af 4f       	sbci	r26, 0xFF	; 255
    24d4:	b1 e0       	ldi	r27, 0x01	; 1
    24d6:	3e d0       	rcall	.+124    	; 0x2554 <__ultoa_invert+0x9c>
    24d8:	b4 e0       	ldi	r27, 0x04	; 4
    24da:	3c d0       	rcall	.+120    	; 0x2554 <__ultoa_invert+0x9c>
    24dc:	67 0f       	add	r22, r23
    24de:	78 1f       	adc	r23, r24
    24e0:	89 1f       	adc	r24, r25
    24e2:	9a 1f       	adc	r25, r26
    24e4:	a1 1d       	adc	r26, r1
    24e6:	68 0f       	add	r22, r24
    24e8:	79 1f       	adc	r23, r25
    24ea:	8a 1f       	adc	r24, r26
    24ec:	91 1d       	adc	r25, r1
    24ee:	a1 1d       	adc	r26, r1
    24f0:	6a 0f       	add	r22, r26
    24f2:	71 1d       	adc	r23, r1
    24f4:	81 1d       	adc	r24, r1
    24f6:	91 1d       	adc	r25, r1
    24f8:	a1 1d       	adc	r26, r1
    24fa:	20 d0       	rcall	.+64     	; 0x253c <__ultoa_invert+0x84>
    24fc:	09 f4       	brne	.+2      	; 0x2500 <__ultoa_invert+0x48>
    24fe:	68 94       	set
    2500:	3f 91       	pop	r19
    2502:	2a e0       	ldi	r18, 0x0A	; 10
    2504:	26 9f       	mul	r18, r22
    2506:	11 24       	eor	r1, r1
    2508:	30 19       	sub	r19, r0
    250a:	30 5d       	subi	r19, 0xD0	; 208
    250c:	31 93       	st	Z+, r19
    250e:	de f6       	brtc	.-74     	; 0x24c6 <__ultoa_invert+0xe>
    2510:	cf 01       	movw	r24, r30
    2512:	08 95       	ret
    2514:	46 2f       	mov	r20, r22
    2516:	47 70       	andi	r20, 0x07	; 7
    2518:	40 5d       	subi	r20, 0xD0	; 208
    251a:	41 93       	st	Z+, r20
    251c:	b3 e0       	ldi	r27, 0x03	; 3
    251e:	0f d0       	rcall	.+30     	; 0x253e <__ultoa_invert+0x86>
    2520:	c9 f7       	brne	.-14     	; 0x2514 <__ultoa_invert+0x5c>
    2522:	f6 cf       	rjmp	.-20     	; 0x2510 <__ultoa_invert+0x58>
    2524:	46 2f       	mov	r20, r22
    2526:	4f 70       	andi	r20, 0x0F	; 15
    2528:	40 5d       	subi	r20, 0xD0	; 208
    252a:	4a 33       	cpi	r20, 0x3A	; 58
    252c:	18 f0       	brcs	.+6      	; 0x2534 <__ultoa_invert+0x7c>
    252e:	49 5d       	subi	r20, 0xD9	; 217
    2530:	31 fd       	sbrc	r19, 1
    2532:	40 52       	subi	r20, 0x20	; 32
    2534:	41 93       	st	Z+, r20
    2536:	02 d0       	rcall	.+4      	; 0x253c <__ultoa_invert+0x84>
    2538:	a9 f7       	brne	.-22     	; 0x2524 <__ultoa_invert+0x6c>
    253a:	ea cf       	rjmp	.-44     	; 0x2510 <__ultoa_invert+0x58>
    253c:	b4 e0       	ldi	r27, 0x04	; 4
    253e:	a6 95       	lsr	r26
    2540:	97 95       	ror	r25
    2542:	87 95       	ror	r24
    2544:	77 95       	ror	r23
    2546:	67 95       	ror	r22
    2548:	ba 95       	dec	r27
    254a:	c9 f7       	brne	.-14     	; 0x253e <__ultoa_invert+0x86>
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	61 05       	cpc	r22, r1
    2550:	71 05       	cpc	r23, r1
    2552:	08 95       	ret
    2554:	9b 01       	movw	r18, r22
    2556:	ac 01       	movw	r20, r24
    2558:	0a 2e       	mov	r0, r26
    255a:	06 94       	lsr	r0
    255c:	57 95       	ror	r21
    255e:	47 95       	ror	r20
    2560:	37 95       	ror	r19
    2562:	27 95       	ror	r18
    2564:	ba 95       	dec	r27
    2566:	c9 f7       	brne	.-14     	; 0x255a <__ultoa_invert+0xa2>
    2568:	62 0f       	add	r22, r18
    256a:	73 1f       	adc	r23, r19
    256c:	84 1f       	adc	r24, r20
    256e:	95 1f       	adc	r25, r21
    2570:	a0 1d       	adc	r26, r0
    2572:	08 95       	ret

00002574 <_exit>:
    2574:	f8 94       	cli

00002576 <__stop_program>:
    2576:	ff cf       	rjmp	.-2      	; 0x2576 <__stop_program>
