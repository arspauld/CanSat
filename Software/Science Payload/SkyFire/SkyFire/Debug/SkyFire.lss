
SkyFire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00802000  00003dec  00003e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  008020b4  008020b4  00003f34  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003f34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00003fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001254c  00000000  00000000  00004470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000047c5  00000000  00000000  000169bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000085a8  00000000  00000000  0001b181  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001040  00000000  00000000  0002372c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d3a8  00000000  00000000  0002476c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045d1  00000000  00000000  00051b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  000560e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000031ef  00000000  00000000  00056535  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c1       	rjmp	.+648    	; 0x28a <__ctors_end>
       2:	00 00       	nop
       4:	68 c1       	rjmp	.+720    	; 0x2d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c1       	rjmp	.+716    	; 0x2d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c1       	rjmp	.+712    	; 0x2d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c1       	rjmp	.+708    	; 0x2d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c1       	rjmp	.+704    	; 0x2d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c1       	rjmp	.+700    	; 0x2d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c1       	rjmp	.+696    	; 0x2d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c1       	rjmp	.+692    	; 0x2d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c1       	rjmp	.+672    	; 0x2d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c1       	rjmp	.+632    	; 0x2d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1c c1       	rjmp	.+568    	; 0x2d6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1a c1       	rjmp	.+564    	; 0x2d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c1       	rjmp	.+560    	; 0x2d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c1       	rjmp	.+556    	; 0x2d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__vector_47>
      c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f8 c0       	rjmp	.+496    	; 0x2d6 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__vector_58>
      ec:	f4 c0       	rjmp	.+488    	; 0x2d6 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f2 c0       	rjmp	.+484    	; 0x2d6 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f0 c0       	rjmp	.+480    	; 0x2d6 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ee c0       	rjmp	.+476    	; 0x2d6 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ec c0       	rjmp	.+472    	; 0x2d6 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ea c0       	rjmp	.+468    	; 0x2d6 <__bad_interrupt>
     102:	00 00       	nop
     104:	e8 c0       	rjmp	.+464    	; 0x2d6 <__bad_interrupt>
     106:	00 00       	nop
     108:	e6 c0       	rjmp	.+460    	; 0x2d6 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e4 c0       	rjmp	.+456    	; 0x2d6 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e2 c0       	rjmp	.+452    	; 0x2d6 <__bad_interrupt>
     112:	00 00       	nop
     114:	e0 c0       	rjmp	.+448    	; 0x2d6 <__bad_interrupt>
     116:	00 00       	nop
     118:	de c0       	rjmp	.+444    	; 0x2d6 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	08 c1       	rjmp	.+528    	; 0x32e <__vector_71>
     11e:	00 00       	nop
     120:	43 c1       	rjmp	.+646    	; 0x3a8 <__vector_72>
     122:	00 00       	nop
     124:	7e c1       	rjmp	.+764    	; 0x422 <__vector_73>
     126:	00 00       	nop
     128:	b9 c1       	rjmp	.+882    	; 0x49c <__vector_74>
     12a:	00 00       	nop
     12c:	d4 c0       	rjmp	.+424    	; 0x2d6 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d2 c0       	rjmp	.+420    	; 0x2d6 <__bad_interrupt>
     132:	00 00       	nop
     134:	d0 c0       	rjmp	.+416    	; 0x2d6 <__bad_interrupt>
     136:	00 00       	nop
     138:	ce c0       	rjmp	.+412    	; 0x2d6 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	cc c0       	rjmp	.+408    	; 0x2d6 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ca c0       	rjmp	.+404    	; 0x2d6 <__bad_interrupt>
     142:	00 00       	nop
     144:	c8 c0       	rjmp	.+400    	; 0x2d6 <__bad_interrupt>
     146:	00 00       	nop
     148:	c6 c0       	rjmp	.+396    	; 0x2d6 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c4 c0       	rjmp	.+392    	; 0x2d6 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c2 c0       	rjmp	.+388    	; 0x2d6 <__bad_interrupt>
     152:	00 00       	nop
     154:	c0 c0       	rjmp	.+384    	; 0x2d6 <__bad_interrupt>
     156:	00 00       	nop
     158:	be c0       	rjmp	.+380    	; 0x2d6 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	bc c0       	rjmp	.+376    	; 0x2d6 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ba c0       	rjmp	.+372    	; 0x2d6 <__bad_interrupt>
     162:	00 00       	nop
     164:	b8 c0       	rjmp	.+368    	; 0x2d6 <__bad_interrupt>
     166:	00 00       	nop
     168:	b6 c0       	rjmp	.+364    	; 0x2d6 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__vector_91>
     170:	b2 c0       	rjmp	.+356    	; 0x2d6 <__bad_interrupt>
     172:	00 00       	nop
     174:	b0 c0       	rjmp	.+352    	; 0x2d6 <__bad_interrupt>
     176:	00 00       	nop
     178:	ae c0       	rjmp	.+348    	; 0x2d6 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	ac c0       	rjmp	.+344    	; 0x2d6 <__bad_interrupt>
     17e:	00 00       	nop
     180:	aa c0       	rjmp	.+340    	; 0x2d6 <__bad_interrupt>
     182:	00 00       	nop
     184:	a8 c0       	rjmp	.+336    	; 0x2d6 <__bad_interrupt>
     186:	00 00       	nop
     188:	a6 c0       	rjmp	.+332    	; 0x2d6 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a4 c0       	rjmp	.+328    	; 0x2d6 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a2 c0       	rjmp	.+324    	; 0x2d6 <__bad_interrupt>
     192:	00 00       	nop
     194:	a0 c0       	rjmp	.+320    	; 0x2d6 <__bad_interrupt>
     196:	00 00       	nop
     198:	9e c0       	rjmp	.+316    	; 0x2d6 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	9c c0       	rjmp	.+312    	; 0x2d6 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9a c0       	rjmp	.+308    	; 0x2d6 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	98 c0       	rjmp	.+304    	; 0x2d6 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	96 c0       	rjmp	.+300    	; 0x2d6 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	94 c0       	rjmp	.+296    	; 0x2d6 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	92 c0       	rjmp	.+292    	; 0x2d6 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	90 c0       	rjmp	.+288    	; 0x2d6 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8e c0       	rjmp	.+284    	; 0x2d6 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	8c c0       	rjmp	.+280    	; 0x2d6 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8a c0       	rjmp	.+276    	; 0x2d6 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	88 c0       	rjmp	.+272    	; 0x2d6 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	86 c0       	rjmp	.+268    	; 0x2d6 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	84 c0       	rjmp	.+264    	; 0x2d6 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	82 c0       	rjmp	.+260    	; 0x2d6 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	80 c0       	rjmp	.+256    	; 0x2d6 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7e c0       	rjmp	.+252    	; 0x2d6 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	7c c0       	rjmp	.+248    	; 0x2d6 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7a c0       	rjmp	.+244    	; 0x2d6 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	78 c0       	rjmp	.+240    	; 0x2d6 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	76 c0       	rjmp	.+236    	; 0x2d6 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	74 c0       	rjmp	.+232    	; 0x2d6 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	72 c0       	rjmp	.+228    	; 0x2d6 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	70 c0       	rjmp	.+224    	; 0x2d6 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6e c0       	rjmp	.+220    	; 0x2d6 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <ms5607_convert_d2+0x14>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_end>:
     27e:	63 64       	ori	r22, 0x43	; 67
     280:	69 6e       	ori	r22, 0xE9	; 233
     282:	6f 70       	andi	r22, 0x0F	; 15
     284:	73 75       	andi	r23, 0x53	; 83
     286:	78 58       	subi	r23, 0x88	; 136
     288:	5b 00       	.word	0x005b	; ????

0000028a <__ctors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df e3       	ldi	r29, 0x3F	; 63
     294:	de bf       	out	0x3e, r29	; 62
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	0c bf       	out	0x3c, r16	; 60
     29a:	18 be       	out	0x38, r1	; 56
     29c:	19 be       	out	0x39, r1	; 57
     29e:	1a be       	out	0x3a, r1	; 58
     2a0:	1b be       	out	0x3b, r1	; 59

000002a2 <__do_copy_data>:
     2a2:	10 e2       	ldi	r17, 0x20	; 32
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e2       	ldi	r27, 0x20	; 32
     2a8:	ec ee       	ldi	r30, 0xEC	; 236
     2aa:	fd e3       	ldi	r31, 0x3D	; 61
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0b bf       	out	0x3b, r16	; 59
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x14>
     2b2:	07 90       	elpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	a4 3b       	cpi	r26, 0xB4	; 180
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0x10>
     2bc:	1b be       	out	0x3b, r1	; 59

000002be <__do_clear_bss>:
     2be:	21 e2       	ldi	r18, 0x21	; 33
     2c0:	a4 eb       	ldi	r26, 0xB4	; 180
     2c2:	b0 e2       	ldi	r27, 0x20	; 32
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	a0 39       	cpi	r26, 0x90	; 144
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>
     2ce:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <main>
     2d2:	0c 94 f4 1e 	jmp	0x3de8	; 0x3de8 <_exit>

000002d6 <__bad_interrupt>:
     2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	1f 92       	push	r1
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2e2:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <stdio_base>
     2e6:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <stdio_base+0x1>
     2ea:	e0 91 06 21 	lds	r30, 0x2106	; 0x802106 <ptr_get>
     2ee:	f0 91 07 21 	lds	r31, 0x2107	; 0x802107 <ptr_get+0x1>
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	19 95       	eicall
	return c;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     2fc:	08 2e       	mov	r0, r24
     2fe:	00 0c       	add	r0, r0
     300:	99 0b       	sbc	r25, r25
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     30a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     30c:	80 91 0a 21 	lds	r24, 0x210A	; 0x80210a <stdio_base>
     310:	90 91 0b 21 	lds	r25, 0x210B	; 0x80210b <stdio_base+0x1>
     314:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <ptr_put>
     318:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <ptr_put+0x1>
     31c:	19 95       	eicall
     31e:	99 23       	and	r25, r25
     320:	1c f0       	brlt	.+6      	; 0x328 <_write+0x1e>
		return -1;
	}
	return 1;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     32c:	08 95       	ret

0000032e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	08 b6       	in	r0, 0x38	; 56
     33a:	0f 92       	push	r0
     33c:	18 be       	out	0x38, r1	; 56
     33e:	09 b6       	in	r0, 0x39	; 57
     340:	0f 92       	push	r0
     342:	19 be       	out	0x39, r1	; 57
     344:	0b b6       	in	r0, 0x3b	; 59
     346:	0f 92       	push	r0
     348:	1b be       	out	0x3b, r1	; 59
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     362:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     366:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     36a:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <adca_callback>
     36e:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <adca_callback+0x1>
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	19 95       	eicall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0b be       	out	0x3b, r0	; 59
     396:	0f 90       	pop	r0
     398:	09 be       	out	0x39, r0	; 57
     39a:	0f 90       	pop	r0
     39c:	08 be       	out	0x38, r0	; 56
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	08 b6       	in	r0, 0x38	; 56
     3b4:	0f 92       	push	r0
     3b6:	18 be       	out	0x38, r1	; 56
     3b8:	09 b6       	in	r0, 0x39	; 57
     3ba:	0f 92       	push	r0
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	0b b6       	in	r0, 0x3b	; 59
     3c0:	0f 92       	push	r0
     3c2:	1b be       	out	0x3b, r1	; 59
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3dc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3e0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3e4:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <adca_callback>
     3e8:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <adca_callback+0x1>
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	19 95       	eicall
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0b be       	out	0x3b, r0	; 59
     410:	0f 90       	pop	r0
     412:	09 be       	out	0x39, r0	; 57
     414:	0f 90       	pop	r0
     416:	08 be       	out	0x38, r0	; 56
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	08 b6       	in	r0, 0x38	; 56
     42e:	0f 92       	push	r0
     430:	18 be       	out	0x38, r1	; 56
     432:	09 b6       	in	r0, 0x39	; 57
     434:	0f 92       	push	r0
     436:	19 be       	out	0x39, r1	; 57
     438:	0b b6       	in	r0, 0x3b	; 59
     43a:	0f 92       	push	r0
     43c:	1b be       	out	0x3b, r1	; 59
     43e:	2f 93       	push	r18
     440:	3f 93       	push	r19
     442:	4f 93       	push	r20
     444:	5f 93       	push	r21
     446:	6f 93       	push	r22
     448:	7f 93       	push	r23
     44a:	8f 93       	push	r24
     44c:	9f 93       	push	r25
     44e:	af 93       	push	r26
     450:	bf 93       	push	r27
     452:	ef 93       	push	r30
     454:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     456:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     45a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     45e:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <adca_callback>
     462:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <adca_callback+0x1>
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	19 95       	eicall
}
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	0b be       	out	0x3b, r0	; 59
     48a:	0f 90       	pop	r0
     48c:	09 be       	out	0x39, r0	; 57
     48e:	0f 90       	pop	r0
     490:	08 be       	out	0x38, r0	; 56
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	08 b6       	in	r0, 0x38	; 56
     4a8:	0f 92       	push	r0
     4aa:	18 be       	out	0x38, r1	; 56
     4ac:	09 b6       	in	r0, 0x39	; 57
     4ae:	0f 92       	push	r0
     4b0:	19 be       	out	0x39, r1	; 57
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	1b be       	out	0x3b, r1	; 59
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4d0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4d4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4d8:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <adca_callback>
     4dc:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <adca_callback+0x1>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	19 95       	eicall
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	09 be       	out	0x39, r0	; 57
     508:	0f 90       	pop	r0
     50a:	08 be       	out	0x38, r0	; 56
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     516:	fc 01       	movw	r30, r24
     518:	91 81       	ldd	r25, Z+1	; 0x01
     51a:	95 ff       	sbrs	r25, 5
     51c:	fd cf       	rjmp	.-6      	; 0x518 <usart_putchar+0x2>
     51e:	60 83       	st	Z, r22
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	08 95       	ret

00000526 <usart_getchar>:
     526:	fc 01       	movw	r30, r24
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	99 23       	and	r25, r25
     52c:	ec f7       	brge	.-6      	; 0x528 <usart_getchar+0x2>
     52e:	80 81       	ld	r24, Z
     530:	08 95       	ret

00000532 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     532:	4f 92       	push	r4
     534:	5f 92       	push	r5
     536:	6f 92       	push	r6
     538:	7f 92       	push	r7
     53a:	8f 92       	push	r8
     53c:	9f 92       	push	r9
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	7c 01       	movw	r14, r24
     54e:	4a 01       	movw	r8, r20
     550:	5b 01       	movw	r10, r22
     552:	28 01       	movw	r4, r16
     554:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     556:	fc 01       	movw	r30, r24
     558:	84 81       	ldd	r24, Z+4	; 0x04
     55a:	82 ff       	sbrs	r24, 2
     55c:	16 c0       	rjmp	.+44     	; 0x58a <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     55e:	d9 01       	movw	r26, r18
     560:	c8 01       	movw	r24, r16
     562:	68 94       	set
     564:	12 f8       	bld	r1, 2
     566:	b6 95       	lsr	r27
     568:	a7 95       	ror	r26
     56a:	97 95       	ror	r25
     56c:	87 95       	ror	r24
     56e:	16 94       	lsr	r1
     570:	d1 f7       	brne	.-12     	; 0x566 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     572:	b9 01       	movw	r22, r18
     574:	a8 01       	movw	r20, r16
     576:	03 2e       	mov	r0, r19
     578:	36 e1       	ldi	r19, 0x16	; 22
     57a:	76 95       	lsr	r23
     57c:	67 95       	ror	r22
     57e:	57 95       	ror	r21
     580:	47 95       	ror	r20
     582:	3a 95       	dec	r19
     584:	d1 f7       	brne	.-12     	; 0x57a <usart_set_baudrate+0x48>
     586:	30 2d       	mov	r19, r0
     588:	15 c0       	rjmp	.+42     	; 0x5b4 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     58a:	d9 01       	movw	r26, r18
     58c:	c8 01       	movw	r24, r16
     58e:	68 94       	set
     590:	13 f8       	bld	r1, 3
     592:	b6 95       	lsr	r27
     594:	a7 95       	ror	r26
     596:	97 95       	ror	r25
     598:	87 95       	ror	r24
     59a:	16 94       	lsr	r1
     59c:	d1 f7       	brne	.-12     	; 0x592 <usart_set_baudrate+0x60>
		min_rate /= 2;
     59e:	b9 01       	movw	r22, r18
     5a0:	a8 01       	movw	r20, r16
     5a2:	03 2e       	mov	r0, r19
     5a4:	37 e1       	ldi	r19, 0x17	; 23
     5a6:	76 95       	lsr	r23
     5a8:	67 95       	ror	r22
     5aa:	57 95       	ror	r21
     5ac:	47 95       	ror	r20
     5ae:	3a 95       	dec	r19
     5b0:	d1 f7       	brne	.-12     	; 0x5a6 <usart_set_baudrate+0x74>
     5b2:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     5b4:	88 15       	cp	r24, r8
     5b6:	99 05       	cpc	r25, r9
     5b8:	aa 05       	cpc	r26, r10
     5ba:	bb 05       	cpc	r27, r11
     5bc:	08 f4       	brcc	.+2      	; 0x5c0 <usart_set_baudrate+0x8e>
     5be:	a6 c0       	rjmp	.+332    	; 0x70c <usart_set_baudrate+0x1da>
     5c0:	84 16       	cp	r8, r20
     5c2:	95 06       	cpc	r9, r21
     5c4:	a6 06       	cpc	r10, r22
     5c6:	b7 06       	cpc	r11, r23
     5c8:	08 f4       	brcc	.+2      	; 0x5cc <usart_set_baudrate+0x9a>
     5ca:	a2 c0       	rjmp	.+324    	; 0x710 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     5cc:	f7 01       	movw	r30, r14
     5ce:	84 81       	ldd	r24, Z+4	; 0x04
     5d0:	82 fd       	sbrc	r24, 2
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <usart_set_baudrate+0xaa>
		baud *= 2;
     5d4:	88 0c       	add	r8, r8
     5d6:	99 1c       	adc	r9, r9
     5d8:	aa 1c       	adc	r10, r10
     5da:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     5dc:	c3 01       	movw	r24, r6
     5de:	b2 01       	movw	r22, r4
     5e0:	a5 01       	movw	r20, r10
     5e2:	94 01       	movw	r18, r8
     5e4:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     5e8:	2f 3f       	cpi	r18, 0xFF	; 255
     5ea:	31 05       	cpc	r19, r1
     5ec:	41 05       	cpc	r20, r1
     5ee:	51 05       	cpc	r21, r1
     5f0:	08 f4       	brcc	.+2      	; 0x5f4 <usart_set_baudrate+0xc2>
     5f2:	90 c0       	rjmp	.+288    	; 0x714 <usart_set_baudrate+0x1e2>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e0       	ldi	r26, 0x00	; 0
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	c9 ef       	ldi	r28, 0xF9	; 249
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <usart_set_baudrate+0xd8>
     600:	28 17       	cp	r18, r24
     602:	39 07       	cpc	r19, r25
     604:	4a 07       	cpc	r20, r26
     606:	5b 07       	cpc	r21, r27
     608:	58 f0       	brcs	.+22     	; 0x620 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	aa 1f       	adc	r26, r26
     610:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     612:	cd 3f       	cpi	r28, 0xFD	; 253
     614:	0c f4       	brge	.+2      	; 0x618 <usart_set_baudrate+0xe6>
			limit |= 1;
     616:	81 60       	ori	r24, 0x01	; 1
     618:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     61a:	c7 30       	cpi	r28, 0x07	; 7
     61c:	89 f7       	brne	.-30     	; 0x600 <usart_set_baudrate+0xce>
     61e:	4f c0       	rjmp	.+158    	; 0x6be <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     620:	cc 23       	and	r28, r28
     622:	0c f0       	brlt	.+2      	; 0x626 <usart_set_baudrate+0xf4>
     624:	4c c0       	rjmp	.+152    	; 0x6be <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     626:	d5 01       	movw	r26, r10
     628:	c4 01       	movw	r24, r8
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	aa 1f       	adc	r26, r26
     630:	bb 1f       	adc	r27, r27
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	aa 1f       	adc	r26, r26
     638:	bb 1f       	adc	r27, r27
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	aa 1f       	adc	r26, r26
     640:	bb 1f       	adc	r27, r27
     642:	48 1a       	sub	r4, r24
     644:	59 0a       	sbc	r5, r25
     646:	6a 0a       	sbc	r6, r26
     648:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     64a:	ce 3f       	cpi	r28, 0xFE	; 254
     64c:	f4 f4       	brge	.+60     	; 0x68a <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     64e:	8d ef       	ldi	r24, 0xFD	; 253
     650:	9f ef       	ldi	r25, 0xFF	; 255
     652:	8c 1b       	sub	r24, r28
     654:	91 09       	sbc	r25, r1
     656:	c7 fd       	sbrc	r28, 7
     658:	93 95       	inc	r25
     65a:	04 c0       	rjmp	.+8      	; 0x664 <usart_set_baudrate+0x132>
     65c:	44 0c       	add	r4, r4
     65e:	55 1c       	adc	r5, r5
     660:	66 1c       	adc	r6, r6
     662:	77 1c       	adc	r7, r7
     664:	8a 95       	dec	r24
     666:	d2 f7       	brpl	.-12     	; 0x65c <usart_set_baudrate+0x12a>
     668:	d5 01       	movw	r26, r10
     66a:	c4 01       	movw	r24, r8
     66c:	b6 95       	lsr	r27
     66e:	a7 95       	ror	r26
     670:	97 95       	ror	r25
     672:	87 95       	ror	r24
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	64 0d       	add	r22, r4
     67a:	75 1d       	adc	r23, r5
     67c:	86 1d       	adc	r24, r6
     67e:	97 1d       	adc	r25, r7
     680:	a5 01       	movw	r20, r10
     682:	94 01       	movw	r18, r8
     684:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__udivmodsi4>
     688:	37 c0       	rjmp	.+110    	; 0x6f8 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	8c 0f       	add	r24, r28
     68e:	a5 01       	movw	r20, r10
     690:	94 01       	movw	r18, r8
     692:	04 c0       	rjmp	.+8      	; 0x69c <usart_set_baudrate+0x16a>
     694:	22 0f       	add	r18, r18
     696:	33 1f       	adc	r19, r19
     698:	44 1f       	adc	r20, r20
     69a:	55 1f       	adc	r21, r21
     69c:	8a 95       	dec	r24
     69e:	d2 f7       	brpl	.-12     	; 0x694 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     6a0:	da 01       	movw	r26, r20
     6a2:	c9 01       	movw	r24, r18
     6a4:	b6 95       	lsr	r27
     6a6:	a7 95       	ror	r26
     6a8:	97 95       	ror	r25
     6aa:	87 95       	ror	r24
     6ac:	bc 01       	movw	r22, r24
     6ae:	cd 01       	movw	r24, r26
     6b0:	64 0d       	add	r22, r4
     6b2:	75 1d       	adc	r23, r5
     6b4:	86 1d       	adc	r24, r6
     6b6:	97 1d       	adc	r25, r7
     6b8:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__udivmodsi4>
     6bc:	1d c0       	rjmp	.+58     	; 0x6f8 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	8c 0f       	add	r24, r28
     6c2:	a5 01       	movw	r20, r10
     6c4:	94 01       	movw	r18, r8
     6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <usart_set_baudrate+0x19e>
     6c8:	22 0f       	add	r18, r18
     6ca:	33 1f       	adc	r19, r19
     6cc:	44 1f       	adc	r20, r20
     6ce:	55 1f       	adc	r21, r21
     6d0:	8a 95       	dec	r24
     6d2:	d2 f7       	brpl	.-12     	; 0x6c8 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     6d4:	da 01       	movw	r26, r20
     6d6:	c9 01       	movw	r24, r18
     6d8:	b6 95       	lsr	r27
     6da:	a7 95       	ror	r26
     6dc:	97 95       	ror	r25
     6de:	87 95       	ror	r24
     6e0:	bc 01       	movw	r22, r24
     6e2:	cd 01       	movw	r24, r26
     6e4:	64 0d       	add	r22, r4
     6e6:	75 1d       	adc	r23, r5
     6e8:	86 1d       	adc	r24, r6
     6ea:	97 1d       	adc	r25, r7
     6ec:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__udivmodsi4>
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	31 09       	sbc	r19, r1
     6f4:	41 09       	sbc	r20, r1
     6f6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     6f8:	83 2f       	mov	r24, r19
     6fa:	8f 70       	andi	r24, 0x0F	; 15
     6fc:	c2 95       	swap	r28
     6fe:	c0 7f       	andi	r28, 0xF0	; 240
     700:	c8 2b       	or	r28, r24
     702:	f7 01       	movw	r30, r14
     704:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     706:	26 83       	std	Z+6, r18	; 0x06

	return true;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	18 c0       	rjmp	.+48     	; 0x73c <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	16 c0       	rjmp	.+44     	; 0x73c <usart_set_baudrate+0x20a>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	14 c0       	rjmp	.+40     	; 0x73c <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     714:	d5 01       	movw	r26, r10
     716:	c4 01       	movw	r24, r8
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	aa 1f       	adc	r26, r26
     71e:	bb 1f       	adc	r27, r27
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	aa 1f       	adc	r26, r26
     726:	bb 1f       	adc	r27, r27
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	aa 1f       	adc	r26, r26
     72e:	bb 1f       	adc	r27, r27
     730:	48 1a       	sub	r4, r24
     732:	59 0a       	sbc	r5, r25
     734:	6a 0a       	sbc	r6, r26
     736:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     738:	c9 ef       	ldi	r28, 0xF9	; 249
     73a:	89 cf       	rjmp	.-238    	; 0x64e <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	9f 90       	pop	r9
     74c:	8f 90       	pop	r8
     74e:	7f 90       	pop	r7
     750:	6f 90       	pop	r6
     752:	5f 90       	pop	r5
     754:	4f 90       	pop	r4
     756:	08 95       	ret

00000758 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
     762:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	09 f4       	brne	.+2      	; 0x76a <usart_init_rs232+0x12>
     768:	be c0       	rjmp	.+380    	; 0x8e6 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     76a:	80 3c       	cpi	r24, 0xC0	; 192
     76c:	91 05       	cpc	r25, r1
     76e:	21 f4       	brne	.+8      	; 0x778 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     770:	60 e1       	ldi	r22, 0x10	; 16
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	4a d3       	rcall	.+1684   	; 0xe0a <sysclk_enable_module>
     776:	b7 c0       	rjmp	.+366    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     778:	c1 15       	cp	r28, r1
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	d8 07       	cpc	r29, r24
     77e:	21 f4       	brne	.+8      	; 0x788 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     780:	64 e0       	ldi	r22, 0x04	; 4
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	42 d3       	rcall	.+1668   	; 0xe0a <sysclk_enable_module>
     786:	af c0       	rjmp	.+350    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     788:	c0 38       	cpi	r28, 0x80	; 128
     78a:	e1 e0       	ldi	r30, 0x01	; 1
     78c:	de 07       	cpc	r29, r30
     78e:	21 f4       	brne	.+8      	; 0x798 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     790:	62 e0       	ldi	r22, 0x02	; 2
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	3a d3       	rcall	.+1652   	; 0xe0a <sysclk_enable_module>
     796:	a7 c0       	rjmp	.+334    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     798:	c1 15       	cp	r28, r1
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     79e:	21 f4       	brne	.+8      	; 0x7a8 <usart_init_rs232+0x50>
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	32 d3       	rcall	.+1636   	; 0xe0a <sysclk_enable_module>
     7a6:	9f c0       	rjmp	.+318    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     7a8:	c0 38       	cpi	r28, 0x80	; 128
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <usart_init_rs232+0x60>
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	2a d3       	rcall	.+1620   	; 0xe0a <sysclk_enable_module>
     7b6:	97 c0       	rjmp	.+302    	; 0x8e6 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     7b8:	c1 15       	cp	r28, r1
     7ba:	e2 e0       	ldi	r30, 0x02	; 2
     7bc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     7be:	21 f4       	brne	.+8      	; 0x7c8 <usart_init_rs232+0x70>
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	22 d3       	rcall	.+1604   	; 0xe0a <sysclk_enable_module>
     7c6:	8f c0       	rjmp	.+286    	; 0x8e6 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     7c8:	c0 32       	cpi	r28, 0x20	; 32
     7ca:	f3 e0       	ldi	r31, 0x03	; 3
     7cc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     7ce:	21 f4       	brne	.+8      	; 0x7d8 <usart_init_rs232+0x80>
     7d0:	64 e0       	ldi	r22, 0x04	; 4
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	1a d3       	rcall	.+1588   	; 0xe0a <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     7d6:	87 c0       	rjmp	.+270    	; 0x8e6 <usart_init_rs232+0x18e>
     7d8:	c1 15       	cp	r28, r1
     7da:	88 e0       	ldi	r24, 0x08	; 8
     7dc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     7de:	21 f4       	brne	.+8      	; 0x7e8 <usart_init_rs232+0x90>
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	12 d3       	rcall	.+1572   	; 0xe0a <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     7e6:	7f c0       	rjmp	.+254    	; 0x8e6 <usart_init_rs232+0x18e>
     7e8:	c1 15       	cp	r28, r1
     7ea:	e9 e0       	ldi	r30, 0x09	; 9
     7ec:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     7ee:	21 f4       	brne	.+8      	; 0x7f8 <usart_init_rs232+0xa0>
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	0a d3       	rcall	.+1556   	; 0xe0a <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     7f6:	77 c0       	rjmp	.+238    	; 0x8e6 <usart_init_rs232+0x18e>
     7f8:	c1 15       	cp	r28, r1
     7fa:	fa e0       	ldi	r31, 0x0A	; 10
     7fc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     7fe:	21 f4       	brne	.+8      	; 0x808 <usart_init_rs232+0xb0>
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	85 e0       	ldi	r24, 0x05	; 5
     804:	02 d3       	rcall	.+1540   	; 0xe0a <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     806:	6f c0       	rjmp	.+222    	; 0x8e6 <usart_init_rs232+0x18e>
     808:	c0 34       	cpi	r28, 0x40	; 64
     80a:	88 e0       	ldi	r24, 0x08	; 8
     80c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     80e:	21 f4       	brne	.+8      	; 0x818 <usart_init_rs232+0xc0>
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	fa d2       	rcall	.+1524   	; 0xe0a <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     816:	67 c0       	rjmp	.+206    	; 0x8e6 <usart_init_rs232+0x18e>
     818:	c0 34       	cpi	r28, 0x40	; 64
     81a:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     81c:	de 07       	cpc	r29, r30
     81e:	21 f4       	brne	.+8      	; 0x828 <usart_init_rs232+0xd0>
     820:	62 e0       	ldi	r22, 0x02	; 2
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	f2 d2       	rcall	.+1508   	; 0xe0a <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     826:	5f c0       	rjmp	.+190    	; 0x8e6 <usart_init_rs232+0x18e>
     828:	c0 39       	cpi	r28, 0x90	; 144
     82a:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     82c:	df 07       	cpc	r29, r31
     82e:	21 f4       	brne	.+8      	; 0x838 <usart_init_rs232+0xe0>
     830:	64 e0       	ldi	r22, 0x04	; 4
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	ea d2       	rcall	.+1492   	; 0xe0a <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     836:	57 c0       	rjmp	.+174    	; 0x8e6 <usart_init_rs232+0x18e>
     838:	c0 39       	cpi	r28, 0x90	; 144
     83a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     83c:	d8 07       	cpc	r29, r24
     83e:	21 f4       	brne	.+8      	; 0x848 <usart_init_rs232+0xf0>
     840:	64 e0       	ldi	r22, 0x04	; 4
     842:	84 e0       	ldi	r24, 0x04	; 4
     844:	e2 d2       	rcall	.+1476   	; 0xe0a <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     846:	4f c0       	rjmp	.+158    	; 0x8e6 <usart_init_rs232+0x18e>
     848:	c0 39       	cpi	r28, 0x90	; 144
     84a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     84c:	de 07       	cpc	r29, r30
     84e:	21 f4       	brne	.+8      	; 0x858 <usart_init_rs232+0x100>
     850:	64 e0       	ldi	r22, 0x04	; 4
     852:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     854:	da d2       	rcall	.+1460   	; 0xe0a <sysclk_enable_module>
     856:	47 c0       	rjmp	.+142    	; 0x8e6 <usart_init_rs232+0x18e>
     858:	c0 3c       	cpi	r28, 0xC0	; 192
     85a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     85c:	df 07       	cpc	r29, r31
     85e:	21 f4       	brne	.+8      	; 0x868 <usart_init_rs232+0x110>
     860:	68 e0       	ldi	r22, 0x08	; 8
     862:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     864:	d2 d2       	rcall	.+1444   	; 0xe0a <sysclk_enable_module>
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <usart_init_rs232+0x18e>
     868:	c0 3c       	cpi	r28, 0xC0	; 192
     86a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     86c:	d8 07       	cpc	r29, r24
     86e:	21 f4       	brne	.+8      	; 0x878 <usart_init_rs232+0x120>
     870:	68 e0       	ldi	r22, 0x08	; 8
     872:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     874:	ca d2       	rcall	.+1428   	; 0xe0a <sysclk_enable_module>
     876:	37 c0       	rjmp	.+110    	; 0x8e6 <usart_init_rs232+0x18e>
     878:	c0 3a       	cpi	r28, 0xA0	; 160
     87a:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     87c:	de 07       	cpc	r29, r30
     87e:	21 f4       	brne	.+8      	; 0x888 <usart_init_rs232+0x130>
     880:	60 e1       	ldi	r22, 0x10	; 16
     882:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     884:	c2 d2       	rcall	.+1412   	; 0xe0a <sysclk_enable_module>
     886:	2f c0       	rjmp	.+94     	; 0x8e6 <usart_init_rs232+0x18e>
     888:	c0 3a       	cpi	r28, 0xA0	; 160
     88a:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     88c:	df 07       	cpc	r29, r31
     88e:	21 f4       	brne	.+8      	; 0x898 <usart_init_rs232+0x140>
     890:	60 e1       	ldi	r22, 0x10	; 16
     892:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     894:	ba d2       	rcall	.+1396   	; 0xe0a <sysclk_enable_module>
     896:	27 c0       	rjmp	.+78     	; 0x8e6 <usart_init_rs232+0x18e>
     898:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     89a:	8a e0       	ldi	r24, 0x0A	; 10
     89c:	d8 07       	cpc	r29, r24
     89e:	21 f4       	brne	.+8      	; 0x8a8 <usart_init_rs232+0x150>
     8a0:	60 e1       	ldi	r22, 0x10	; 16
     8a2:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     8a4:	b2 d2       	rcall	.+1380   	; 0xe0a <sysclk_enable_module>
     8a6:	1f c0       	rjmp	.+62     	; 0x8e6 <usart_init_rs232+0x18e>
     8a8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     8aa:	e8 e0       	ldi	r30, 0x08	; 8
     8ac:	de 07       	cpc	r29, r30
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <usart_init_rs232+0x160>
     8b0:	60 e2       	ldi	r22, 0x20	; 32
     8b2:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     8b4:	aa d2       	rcall	.+1364   	; 0xe0a <sysclk_enable_module>
     8b6:	17 c0       	rjmp	.+46     	; 0x8e6 <usart_init_rs232+0x18e>
     8b8:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     8ba:	f9 e0       	ldi	r31, 0x09	; 9
     8bc:	df 07       	cpc	r29, r31
     8be:	21 f4       	brne	.+8      	; 0x8c8 <usart_init_rs232+0x170>
     8c0:	60 e2       	ldi	r22, 0x20	; 32
     8c2:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     8c4:	a2 d2       	rcall	.+1348   	; 0xe0a <sysclk_enable_module>
     8c6:	0f c0       	rjmp	.+30     	; 0x8e6 <usart_init_rs232+0x18e>
     8c8:	c0 38       	cpi	r28, 0x80	; 128
     8ca:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     8cc:	d8 07       	cpc	r29, r24
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <usart_init_rs232+0x180>
     8d0:	60 e4       	ldi	r22, 0x40	; 64
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	9a d2       	rcall	.+1332   	; 0xe0a <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <usart_init_rs232+0x18e>
     8d8:	c0 3a       	cpi	r28, 0xA0	; 160
     8da:	e4 e0       	ldi	r30, 0x04	; 4
     8dc:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     8de:	19 f4       	brne	.+6      	; 0x8e6 <usart_init_rs232+0x18e>
     8e0:	60 e4       	ldi	r22, 0x40	; 64
     8e2:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     8e4:	92 d2       	rcall	.+1316   	; 0xe0a <sysclk_enable_module>
     8e6:	8d 81       	ldd	r24, Y+5	; 0x05
     8e8:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     8ea:	8d 83       	std	Y+5, r24	; 0x05
     8ec:	f8 01       	movw	r30, r16
     8ee:	95 81       	ldd	r25, Z+5	; 0x05
     8f0:	84 81       	ldd	r24, Z+4	; 0x04
     8f2:	89 2b       	or	r24, r25
     8f4:	96 81       	ldd	r25, Z+6	; 0x06
     8f6:	91 11       	cpse	r25, r1
     8f8:	98 e0       	ldi	r25, 0x08	; 8
     8fa:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     8fc:	8d 83       	std	Y+5, r24	; 0x05
     8fe:	f8 01       	movw	r30, r16
     900:	40 81       	ld	r20, Z
     902:	51 81       	ldd	r21, Z+1	; 0x01
     904:	62 81       	ldd	r22, Z+2	; 0x02
     906:	73 81       	ldd	r23, Z+3	; 0x03
     908:	00 e0       	ldi	r16, 0x00	; 0
     90a:	18 e4       	ldi	r17, 0x48	; 72
     90c:	28 ee       	ldi	r18, 0xE8	; 232
     90e:	31 e0       	ldi	r19, 0x01	; 1
     910:	ce 01       	movw	r24, r28
     912:	0f de       	rcall	.-994    	; 0x532 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	98 60       	ori	r25, 0x08	; 8
     918:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	90 61       	ori	r25, 0x10	; 16
     91e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <hall_sensor_init>:
 */ 

#include <asf.h>
#include "hall.h"

void hall_sensor_init(void){
     92a:	08 95       	ret

0000092c <cam_init>:

#include "spy_cam.h"
#include <asf.h>

void cam_init(void){
	PORTA.DIR |= 0x08; // Sets A3 to output
     92c:	e0 e0       	ldi	r30, 0x00	; 0
     92e:	f6 e0       	ldi	r31, 0x06	; 6
     930:	80 81       	ld	r24, Z
     932:	88 60       	ori	r24, 0x08	; 8
     934:	80 83       	st	Z, r24
     936:	08 95       	ret

00000938 <cam_switch>:
}

void cam_switch(void){
	PORTA.OUT ^= 0x08; // Changes A3 from high to low or vice-versa
     938:	e0 e0       	ldi	r30, 0x00	; 0
     93a:	f6 e0       	ldi	r31, 0x06	; 6
     93c:	94 81       	ldd	r25, Z+4	; 0x04
     93e:	88 e0       	ldi	r24, 0x08	; 8
     940:	89 27       	eor	r24, r25
     942:	84 83       	std	Z+4, r24	; 0x04
     944:	08 95       	ret

00000946 <gps_uart_init>:

#include <asf.h>
#include <string.h>
#include "mt3339.h"

void gps_uart_init(void){
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	27 97       	sbiw	r28, 0x07	; 7
     950:	cd bf       	out	0x3d, r28	; 61
     952:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     954:	60 e2       	ldi	r22, 0x20	; 32
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	58 d2       	rcall	.+1200   	; 0xe0a <sysclk_enable_module>
		.charlength =	GPS_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	GPS_TERMINAL_SERIAL_PARITY,
		.stopbits	=	GPS_TERMINAL_SERIAL_STOP_BIT
	};
	
	GPS_TERMINAL_PORT.DIR |= GPS_TERMINAL_TX_PIN; // Puts pin to output
     95a:	e0 e6       	ldi	r30, 0x60	; 96
     95c:	f6 e0       	ldi	r31, 0x06	; 6
     95e:	80 81       	ld	r24, Z
     960:	80 68       	ori	r24, 0x80	; 128
     962:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	f0 e2       	ldi	r31, 0x20	; 32
     968:	84 81       	ldd	r24, Z+4	; 0x04
     96a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     96c:	85 81       	ldd	r24, Z+5	; 0x05
     96e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     970:	86 81       	ldd	r24, Z+6	; 0x06
     972:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     974:	80 81       	ld	r24, Z
     976:	91 81       	ldd	r25, Z+1	; 0x01
     978:	a2 81       	ldd	r26, Z+2	; 0x02
     97a:	b3 81       	ldd	r27, Z+3	; 0x03
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	ab 83       	std	Y+3, r26	; 0x03
     982:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     984:	60 e2       	ldi	r22, 0x20	; 32
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	40 d2       	rcall	.+1152   	; 0xe0a <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     98a:	be 01       	movw	r22, r28
     98c:	6f 5f       	subi	r22, 0xFF	; 255
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	80 eb       	ldi	r24, 0xB0	; 176
     992:	99 e0       	ldi	r25, 0x09	; 9
     994:	e1 de       	rcall	.-574    	; 0x758 <usart_init_rs232>
	
	usart_serial_init(GPS_TERMINAL_SERIAL,&gps_config);
}
     996:	27 96       	adiw	r28, 0x07	; 7
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     9a4:	61 50       	subi	r22, 0x01	; 1
     9a6:	71 09       	sbc	r23, r1
     9a8:	81 09       	sbc	r24, r1
     9aa:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     9ac:	61 15       	cp	r22, r1
     9ae:	71 05       	cpc	r23, r1
     9b0:	81 05       	cpc	r24, r1
     9b2:	91 05       	cpc	r25, r1
     9b4:	b9 f7       	brne	.-18     	; 0x9a4 <__portable_avr_delay_cycles+0x2>
     9b6:	08 95       	ret

000009b8 <flip_ms5607>:
	
	return rx_data;
}

void flip_ms5607(void){
	MS5607_PORT.OUT ^= MS5607_PIN;
     9b8:	e0 e4       	ldi	r30, 0x40	; 64
     9ba:	f6 e0       	ldi	r31, 0x06	; 6
     9bc:	94 81       	ldd	r25, Z+4	; 0x04
     9be:	80 e1       	ldi	r24, 0x10	; 16
     9c0:	89 27       	eor	r24, r25
     9c2:	84 83       	std	Z+4, r24	; 0x04
     9c4:	08 95       	ret

000009c6 <ms5607_init>:
#include <asf.h>
#include "ms5607.h"
#include "spi_controller.h"

void ms5607_init(void){
	PORTC.OUT |= 0x10; // makes the 4th pin on Port C be set on high (0b00010000)
     9c6:	e0 e4       	ldi	r30, 0x40	; 64
     9c8:	f6 e0       	ldi	r31, 0x06	; 6
     9ca:	84 81       	ldd	r24, Z+4	; 0x04
     9cc:	80 61       	ori	r24, 0x10	; 16
     9ce:	84 83       	std	Z+4, r24	; 0x04
	delay_ms(5);
     9d0:	6b e2       	ldi	r22, 0x2B	; 43
     9d2:	78 e6       	ldi	r23, 0x68	; 104
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	e4 df       	rcall	.-56     	; 0x9a2 <__portable_avr_delay_cycles>
	
	// Resets the ms5607
	flip_ms5607();
     9da:	ee df       	rcall	.-36     	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_RESET);
     9dc:	8e e1       	ldi	r24, 0x1E	; 30
     9de:	82 d0       	rcall	.+260    	; 0xae4 <spi_write>
     9e0:	60 e8       	ldi	r22, 0x80	; 128
	delay_ms(3);
     9e2:	7e e3       	ldi	r23, 0x3E	; 62
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	dc df       	rcall	.-72     	; 0x9a2 <__portable_avr_delay_cycles>
	flip_ms5607();
     9ea:	e6 df       	rcall	.-52     	; 0x9b8 <flip_ms5607>
	delay_ms(2);
     9ec:	6b ea       	ldi	r22, 0xAB	; 171
     9ee:	79 e2       	ldi	r23, 0x29	; 41
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	d6 cf       	rjmp	.-84     	; 0x9a2 <__portable_avr_delay_cycles>
     9f6:	08 95       	ret

000009f8 <ms5607_read>:
     9f8:	cf 93       	push	r28
}

uint16_t ms5607_read(uint16_t comm)
{
     9fa:	df 93       	push	r29
     9fc:	c8 2f       	mov	r28, r24
	uint16_t rx_data = 0; // temporary 16-bit value
	flip_ms5607(); // select our spi device
     9fe:	dc df       	rcall	.-72     	; 0x9b8 <flip_ms5607>
	spi_write(comm); // write a specified command to ask for data
     a00:	8c 2f       	mov	r24, r28
	
	/*typecast this expression from an 8-bit to a 16-bit and shift it 8 bits to the left
	  meaning the returned value is now in the upper 8 bits rx_data*/
	rx_data = (uint16_t)spi_read()<<8; 
     a02:	70 d0       	rcall	.+224    	; 0xae4 <spi_write>
     a04:	5f d0       	rcall	.+190    	; 0xac4 <spi_read>
     a06:	c8 2f       	mov	r28, r24
     a08:	d0 e0       	ldi	r29, 0x00	; 0
     a0a:	dc 2f       	mov	r29, r28
	
	// OR the second byte with the 16-bit variable, the returned value is now in the lower 8 bits of 'rx_data'
	rx_data |= spi_read(); 
     a0c:	cc 27       	eor	r28, r28
     a0e:	5a d0       	rcall	.+180    	; 0xac4 <spi_read>
     a10:	c8 2b       	or	r28, r24
	
	flip_ms5607(); // end spi exchange
     a12:	d2 df       	rcall	.-92     	; 0x9b8 <flip_ms5607>
     a14:	ce 01       	movw	r24, r28
	
	return rx_data; // return the 16-bit value
}
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <ms5607_convert_d1>:
     a1c:	cf 92       	push	r12

uint32_t ms5607_convert_d1(void)
{
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D1
	flip_ms5607(); // select our spi device
     a24:	c9 df       	rcall	.-110    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_D1_4096); // write a specified command to ask for data
     a26:	88 e4       	ldi	r24, 0x48	; 72
     a28:	5d d0       	rcall	.+186    	; 0xae4 <spi_write>
	delay_ms(10);
     a2a:	66 e5       	ldi	r22, 0x56	; 86
     a2c:	70 ed       	ldi	r23, 0xD0	; 208
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     a32:	b7 df       	rcall	.-146    	; 0x9a2 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     a34:	c1 df       	rcall	.-126    	; 0x9b8 <flip_ms5607>
     a36:	c0 df       	rcall	.-128    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	54 d0       	rcall	.+168    	; 0xae4 <spi_write>
     a3c:	43 d0       	rcall	.+134    	; 0xac4 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     a3e:	c8 2e       	mov	r12, r24
     a40:	d1 2c       	mov	r13, r1
     a42:	e1 2c       	mov	r14, r1
     a44:	f1 2c       	mov	r15, r1
     a46:	76 01       	movw	r14, r12
     a48:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     a4a:	cc 24       	eor	r12, r12
     a4c:	3b d0       	rcall	.+118    	; 0xac4 <spi_read>
     a4e:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     a50:	39 d0       	rcall	.+114    	; 0xac4 <spi_read>
     a52:	c8 2a       	or	r12, r24
     a54:	b1 df       	rcall	.-158    	; 0x9b8 <flip_ms5607>
	flip_ms5607();
     a56:	c7 01       	movw	r24, r14
     a58:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	08 95       	ret

00000a64 <ms5607_convert_d2>:
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13

uint32_t ms5607_convert_d2(void)
{
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
	uint32_t rx_data = 0; // temporary 16-bit value
	// CONVERT D2
	flip_ms5607(); // select our spi device
     a6c:	a5 df       	rcall	.-182    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_D2_4096); // write a specified command to ask for data
     a6e:	88 e5       	ldi	r24, 0x58	; 88
     a70:	39 d0       	rcall	.+114    	; 0xae4 <spi_write>
	delay_ms(10);
     a72:	66 e5       	ldi	r22, 0x56	; 86
     a74:	70 ed       	ldi	r23, 0xD0	; 208
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
	flip_ms5607();
     a7a:	93 df       	rcall	.-218    	; 0x9a2 <__portable_avr_delay_cycles>
	
	flip_ms5607();
     a7c:	9d df       	rcall	.-198    	; 0x9b8 <flip_ms5607>
     a7e:	9c df       	rcall	.-200    	; 0x9b8 <flip_ms5607>
	spi_write(CMD_MS5607_READ_ADC);
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	30 d0       	rcall	.+96     	; 0xae4 <spi_write>
     a84:	1f d0       	rcall	.+62     	; 0xac4 <spi_read>
	rx_data  = (uint32_t) spi_read()<<16;
     a86:	c8 2e       	mov	r12, r24
     a88:	d1 2c       	mov	r13, r1
     a8a:	e1 2c       	mov	r14, r1
     a8c:	f1 2c       	mov	r15, r1
     a8e:	76 01       	movw	r14, r12
     a90:	dd 24       	eor	r13, r13
	rx_data |= (uint32_t) spi_read()<<8;
     a92:	cc 24       	eor	r12, r12
     a94:	17 d0       	rcall	.+46     	; 0xac4 <spi_read>
     a96:	d8 2a       	or	r13, r24
	rx_data |= spi_read();
     a98:	15 d0       	rcall	.+42     	; 0xac4 <spi_read>
     a9a:	c8 2a       	or	r12, r24
     a9c:	8d df       	rcall	.-230    	; 0x9b8 <flip_ms5607>
	flip_ms5607();
     a9e:	c7 01       	movw	r24, r14
     aa0:	b6 01       	movw	r22, r12
	
	return rx_data;
}
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <spi_init>:
     aac:	68 e0       	ldi	r22, 0x08	; 8
     aae:	83 e0       	ldi	r24, 0x03	; 3
	PORTC.DIR |= 0b10110000; 
}

void spi_select(uint8_t port)
{
	PORTC.OUT ^= port; //switches SS
     ab0:	ac d1       	rcall	.+856    	; 0xe0a <sysclk_enable_module>
     ab2:	81 e5       	ldi	r24, 0x51	; 81
     ab4:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     ab8:	e0 e4       	ldi	r30, 0x40	; 64
     aba:	f6 e0       	ldi	r31, 0x06	; 6
     abc:	80 81       	ld	r24, Z
     abe:	80 6b       	ori	r24, 0xB0	; 176
     ac0:	80 83       	st	Z, r24
     ac2:	08 95       	ret

00000ac4 <spi_read>:

uint8_t spi_read(void)
{
	uint8_t iter_max = 100;
	uint8_t count = 0;
	SPIC.DATA = 0xFF; // make the DATA register something we know
     ac4:	e0 ec       	ldi	r30, 0xC0	; 192
     ac6:	f8 e0       	ldi	r31, 0x08	; 8
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS>>7) && count < iter_max){ // wait for the SPI interrupt flag to let us know the transfer is complete
     acc:	82 81       	ldd	r24, Z+2	; 0x02
     ace:	88 23       	and	r24, r24
     ad0:	34 f0       	brlt	.+12     	; 0xade <spi_read+0x1a>
     ad2:	84 e6       	ldi	r24, 0x64	; 100
     ad4:	92 81       	ldd	r25, Z+2	; 0x02
     ad6:	99 23       	and	r25, r25
     ad8:	14 f0       	brlt	.+4      	; 0xade <spi_read+0x1a>
     ada:	81 50       	subi	r24, 0x01	; 1
     adc:	d9 f7       	brne	.-10     	; 0xad4 <spi_read+0x10>
		count++;	
	}
	
	return SPIC.DATA; // return the data from this function
     ade:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
     ae2:	08 95       	ret

00000ae4 <spi_write>:

void spi_write(uint8_t data)
{
	SPIC.DATA = data; // write the data we want to send to the data register
     ae4:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); // wait to ensure the data is sent before we do anything else
     ae8:	e0 ec       	ldi	r30, 0xC0	; 192
     aea:	f8 e0       	ldi	r31, 0x08	; 8
     aec:	82 81       	ldd	r24, Z+2	; 0x02
     aee:	88 23       	and	r24, r24
     af0:	ec f7       	brge	.-6      	; 0xaec <spi_write+0x8>
     af2:	08 95       	ret

00000af4 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     afa:	15 dd       	rcall	.-1494   	; 0x526 <usart_getchar>
     afc:	88 83       	st	Y, r24
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     b04:	08 cd       	rjmp	.-1520   	; 0x516 <usart_putchar>
}
     b06:	08 95       	ret

00000b08 <data_terminal_init>:

#include <asf.h>
#include "data_logger.h"

void data_terminal_init()
{
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	27 97       	sbiw	r28, 0x07	; 7
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b16:	60 e1       	ldi	r22, 0x10	; 16
     b18:	85 e0       	ldi	r24, 0x05	; 5
     b1a:	77 d1       	rcall	.+750    	; 0xe0a <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
     b1c:	e0 e8       	ldi	r30, 0x80	; 128
     b1e:	f6 e0       	ldi	r31, 0x06	; 6
     b20:	80 81       	ld	r24, Z
     b22:	88 60       	ori	r24, 0x08	; 8
     b24:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     b26:	80 ea       	ldi	r24, 0xA0	; 160
     b28:	9a e0       	ldi	r25, 0x0A	; 10
     b2a:	80 93 0a 21 	sts	0x210A, r24	; 0x80210a <stdio_base>
     b2e:	90 93 0b 21 	sts	0x210B, r25	; 0x80210b <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     b32:	82 e8       	ldi	r24, 0x82	; 130
     b34:	95 e0       	ldi	r25, 0x05	; 5
     b36:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <ptr_put>
     b3a:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     b3e:	8a e7       	ldi	r24, 0x7A	; 122
     b40:	95 e0       	ldi	r25, 0x05	; 5
     b42:	80 93 06 21 	sts	0x2106, r24	; 0x802106 <ptr_get>
     b46:	90 93 07 21 	sts	0x2107, r25	; 0x802107 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     b4a:	ed e0       	ldi	r30, 0x0D	; 13
     b4c:	f0 e2       	ldi	r31, 0x20	; 32
     b4e:	84 81       	ldd	r24, Z+4	; 0x04
     b50:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     b52:	85 81       	ldd	r24, Z+5	; 0x05
     b54:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     b56:	86 81       	ldd	r24, Z+6	; 0x06
     b58:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	a2 81       	ldd	r26, Z+2	; 0x02
     b60:	b3 81       	ldd	r27, Z+3	; 0x03
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	ab 83       	std	Y+3, r26	; 0x03
     b68:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     b6a:	60 e1       	ldi	r22, 0x10	; 16
     b6c:	85 e0       	ldi	r24, 0x05	; 5
     b6e:	4d d1       	rcall	.+666    	; 0xe0a <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     b70:	be 01       	movw	r22, r28
     b72:	6f 5f       	subi	r22, 0xFF	; 255
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	80 ea       	ldi	r24, 0xA0	; 160
     b78:	9a e0       	ldi	r25, 0x0A	; 10
     b7a:	ee dd       	rcall	.-1060   	; 0x758 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     b7c:	6c e6       	ldi	r22, 0x6C	; 108
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	85 e8       	ldi	r24, 0x85	; 133
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
     b88:	27 96       	adiw	r28, 0x07	; 7
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <rb16_write>:
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
	}
}
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	fc 01       	movw	r30, r24
     b9a:	41 15       	cp	r20, r1
     b9c:	51 05       	cpc	r21, r1
     b9e:	b1 f1       	breq	.+108    	; 0xc0c <rb16_write+0x78>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	db 01       	movw	r26, r22
     bac:	a8 0f       	add	r26, r24
     bae:	b9 1f       	adc	r27, r25
     bb0:	8d 91       	ld	r24, X+
     bb2:	9c 91       	ld	r25, X
     bb4:	a2 81       	ldd	r26, Z+2	; 0x02
     bb6:	b3 81       	ldd	r27, Z+3	; 0x03
     bb8:	aa 0f       	add	r26, r26
     bba:	bb 1f       	adc	r27, r27
     bbc:	c6 81       	ldd	r28, Z+6	; 0x06
     bbe:	d7 81       	ldd	r29, Z+7	; 0x07
     bc0:	ac 0f       	add	r26, r28
     bc2:	bd 1f       	adc	r27, r29
     bc4:	8d 93       	st	X+, r24
     bc6:	9c 93       	st	X, r25
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	93 81       	ldd	r25, Z+3	; 0x03
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	82 83       	std	Z+2, r24	; 0x02
     bd0:	93 83       	std	Z+3, r25	; 0x03
     bd2:	a0 81       	ld	r26, Z
     bd4:	b1 81       	ldd	r27, Z+1	; 0x01
     bd6:	8a 17       	cp	r24, r26
     bd8:	9b 07       	cpc	r25, r27
     bda:	11 f4       	brne	.+4      	; 0xbe0 <rb16_write+0x4c>
     bdc:	12 82       	std	Z+2, r1	; 0x02
     bde:	13 82       	std	Z+3, r1	; 0x03
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	c4 81       	ldd	r28, Z+4	; 0x04
     be6:	d5 81       	ldd	r29, Z+5	; 0x05
     be8:	8c 17       	cp	r24, r28
     bea:	9d 07       	cpc	r25, r29
     bec:	49 f4       	brne	.+18     	; 0xc00 <rb16_write+0x6c>
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	a8 17       	cp	r26, r24
     bf2:	b9 07       	cpc	r27, r25
     bf4:	19 f0       	breq	.+6      	; 0xbfc <rb16_write+0x68>
     bf6:	84 83       	std	Z+4, r24	; 0x04
     bf8:	95 83       	std	Z+5, r25	; 0x05
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <rb16_write+0x6c>
     bfc:	14 82       	std	Z+4, r1	; 0x04
     bfe:	15 82       	std	Z+5, r1	; 0x05
     c00:	2f 5f       	subi	r18, 0xFF	; 255
     c02:	82 2f       	mov	r24, r18
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	84 17       	cp	r24, r20
     c08:	95 07       	cpc	r25, r21
     c0a:	68 f2       	brcs	.-102    	; 0xba6 <rb16_write+0x12>
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <rb16_init>:
     c12:	fc 01       	movw	r30, r24
     c14:	12 82       	std	Z+2, r1	; 0x02
     c16:	13 82       	std	Z+3, r1	; 0x03
     c18:	14 82       	std	Z+4, r1	; 0x04
     c1a:	15 82       	std	Z+5, r1	; 0x05
     c1c:	66 83       	std	Z+6, r22	; 0x06
     c1e:	77 83       	std	Z+7, r23	; 0x07
     c20:	40 83       	st	Z, r20
     c22:	51 83       	std	Z+1, r21	; 0x01
     c24:	08 95       	ret

00000c26 <rb16_get_nth>:
     c26:	dc 01       	movw	r26, r24
     c28:	12 96       	adiw	r26, 0x02	; 2
     c2a:	ed 91       	ld	r30, X+
     c2c:	fc 91       	ld	r31, X
     c2e:	13 97       	sbiw	r26, 0x03	; 3
     c30:	cb 01       	movw	r24, r22
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	e8 17       	cp	r30, r24
     c36:	f9 07       	cpc	r31, r25
     c38:	78 f0       	brcs	.+30     	; 0xc58 <rb16_get_nth+0x32>
     c3a:	e1 50       	subi	r30, 0x01	; 1
     c3c:	f0 48       	sbci	r31, 0x80	; 128
     c3e:	e6 1b       	sub	r30, r22
     c40:	f7 0b       	sbc	r31, r23
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	16 96       	adiw	r26, 0x06	; 6
     c48:	8d 91       	ld	r24, X+
     c4a:	9c 91       	ld	r25, X
     c4c:	17 97       	sbiw	r26, 0x07	; 7
     c4e:	e8 0f       	add	r30, r24
     c50:	f9 1f       	adc	r31, r25
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
     c56:	08 95       	ret
     c58:	2d 91       	ld	r18, X+
     c5a:	3c 91       	ld	r19, X
     c5c:	11 97       	sbiw	r26, 0x01	; 1
     c5e:	e2 0f       	add	r30, r18
     c60:	f3 1f       	adc	r31, r19
     c62:	e1 50       	subi	r30, 0x01	; 1
     c64:	f0 48       	sbci	r31, 0x80	; 128
     c66:	e6 1b       	sub	r30, r22
     c68:	f7 0b       	sbc	r31, r23
     c6a:	ee 0f       	add	r30, r30
     c6c:	ff 1f       	adc	r31, r31
     c6e:	16 96       	adiw	r26, 0x06	; 6
     c70:	8d 91       	ld	r24, X+
     c72:	9c 91       	ld	r25, X
     c74:	17 97       	sbiw	r26, 0x07	; 7
     c76:	e8 0f       	add	r30, r24
     c78:	f9 1f       	adc	r31, r25
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	08 95       	ret

00000c80 <rb32_write>:
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	fc 01       	movw	r30, r24
     c8e:	41 15       	cp	r20, r1
     c90:	51 05       	cpc	r21, r1
     c92:	09 f4       	brne	.+2      	; 0xc96 <rb32_write+0x16>
     c94:	3f c0       	rjmp	.+126    	; 0xd14 <rb32_write+0x94>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	db 01       	movw	r26, r22
     ca6:	a8 0f       	add	r26, r24
     ca8:	b9 1f       	adc	r27, r25
     caa:	cd 90       	ld	r12, X+
     cac:	dd 90       	ld	r13, X+
     cae:	ed 90       	ld	r14, X+
     cb0:	fc 90       	ld	r15, X
     cb2:	a2 81       	ldd	r26, Z+2	; 0x02
     cb4:	b3 81       	ldd	r27, Z+3	; 0x03
     cb6:	aa 0f       	add	r26, r26
     cb8:	bb 1f       	adc	r27, r27
     cba:	aa 0f       	add	r26, r26
     cbc:	bb 1f       	adc	r27, r27
     cbe:	86 81       	ldd	r24, Z+6	; 0x06
     cc0:	97 81       	ldd	r25, Z+7	; 0x07
     cc2:	a8 0f       	add	r26, r24
     cc4:	b9 1f       	adc	r27, r25
     cc6:	cd 92       	st	X+, r12
     cc8:	dd 92       	st	X+, r13
     cca:	ed 92       	st	X+, r14
     ccc:	fc 92       	st	X, r15
     cce:	13 97       	sbiw	r26, 0x03	; 3
     cd0:	82 81       	ldd	r24, Z+2	; 0x02
     cd2:	93 81       	ldd	r25, Z+3	; 0x03
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	82 83       	std	Z+2, r24	; 0x02
     cd8:	93 83       	std	Z+3, r25	; 0x03
     cda:	a0 81       	ld	r26, Z
     cdc:	b1 81       	ldd	r27, Z+1	; 0x01
     cde:	8a 17       	cp	r24, r26
     ce0:	9b 07       	cpc	r25, r27
     ce2:	11 f4       	brne	.+4      	; 0xce8 <rb32_write+0x68>
     ce4:	12 82       	std	Z+2, r1	; 0x02
     ce6:	13 82       	std	Z+3, r1	; 0x03
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	c4 81       	ldd	r28, Z+4	; 0x04
     cee:	d5 81       	ldd	r29, Z+5	; 0x05
     cf0:	8c 17       	cp	r24, r28
     cf2:	9d 07       	cpc	r25, r29
     cf4:	49 f4       	brne	.+18     	; 0xd08 <rb32_write+0x88>
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	a8 17       	cp	r26, r24
     cfa:	b9 07       	cpc	r27, r25
     cfc:	19 f0       	breq	.+6      	; 0xd04 <rb32_write+0x84>
     cfe:	84 83       	std	Z+4, r24	; 0x04
     d00:	95 83       	std	Z+5, r25	; 0x05
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <rb32_write+0x88>
     d04:	14 82       	std	Z+4, r1	; 0x04
     d06:	15 82       	std	Z+5, r1	; 0x05
     d08:	2f 5f       	subi	r18, 0xFF	; 255
     d0a:	82 2f       	mov	r24, r18
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	84 17       	cp	r24, r20
     d10:	95 07       	cpc	r25, r21
     d12:	20 f2       	brcs	.-120    	; 0xc9c <rb32_write+0x1c>
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	df 90       	pop	r13
     d1e:	cf 90       	pop	r12
     d20:	08 95       	ret

00000d22 <rb32_init>:
     d22:	fc 01       	movw	r30, r24
     d24:	12 82       	std	Z+2, r1	; 0x02
     d26:	13 82       	std	Z+3, r1	; 0x03
     d28:	14 82       	std	Z+4, r1	; 0x04
     d2a:	15 82       	std	Z+5, r1	; 0x05
     d2c:	66 83       	std	Z+6, r22	; 0x06
     d2e:	77 83       	std	Z+7, r23	; 0x07
     d30:	40 83       	st	Z, r20
     d32:	51 83       	std	Z+1, r21	; 0x01
     d34:	08 95       	ret

00000d36 <rb32_get_nth>:
	}
}

int32_t rb32_get_nth(RingBuffer32_t* buffer, uint16_t index)
//Returns the nth newest value in the RingBuffer
{
     d36:	dc 01       	movw	r26, r24
	//Does not do bounds checking, so be careful in usage
	//	Verify index < rb16_length() to guard against requesting a value beyond what the buffer currently stores
	//	Verify index < buffer->array_length to guard against requesting a value from some random memory location
	
	//Most recent value is in head - 1
	if (index + 1 <= buffer->head) //Value is between zero and buffer->head
     d38:	12 96       	adiw	r26, 0x02	; 2
     d3a:	ed 91       	ld	r30, X+
     d3c:	fc 91       	ld	r31, X
     d3e:	13 97       	sbiw	r26, 0x03	; 3
     d40:	cb 01       	movw	r24, r22
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	e8 17       	cp	r30, r24
     d46:	f9 07       	cpc	r31, r25
     d48:	98 f0       	brcs	.+38     	; 0xd70 <rb32_get_nth+0x3a>
		return buffer->buffer[buffer->head - index - 1];
     d4a:	e1 50       	subi	r30, 0x01	; 1
     d4c:	f0 4c       	sbci	r31, 0xC0	; 192
     d4e:	e6 1b       	sub	r30, r22
     d50:	f7 0b       	sbc	r31, r23
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	16 96       	adiw	r26, 0x06	; 6
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	17 97       	sbiw	r26, 0x07	; 7
     d62:	e8 0f       	add	r30, r24
     d64:	f9 1f       	adc	r31, r25
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	08 95       	ret
	else
		return buffer->buffer[buffer->array_length - 1 - index + buffer->head];
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	e1 50       	subi	r30, 0x01	; 1
     d7c:	f0 4c       	sbci	r31, 0xC0	; 192
     d7e:	e6 1b       	sub	r30, r22
     d80:	f7 0b       	sbc	r31, r23
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	16 96       	adiw	r26, 0x06	; 6
     d8c:	8d 91       	ld	r24, X+
     d8e:	9c 91       	ld	r25, X
     d90:	17 97       	sbiw	r26, 0x07	; 7
     d92:	e8 0f       	add	r30, r24
     d94:	f9 1f       	adc	r31, r25
     d96:	60 81       	ld	r22, Z
     d98:	71 81       	ldd	r23, Z+1	; 0x01
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
}
     d9e:	08 95       	ret

00000da0 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	1f 92       	push	r1
     da6:	1f 92       	push	r1
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     db2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     db6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     dba:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     dbe:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     dc2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     dc6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     dca:	8f b7       	in	r24, 0x3f	; 63
     dcc:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     dce:	f8 94       	cli
	return flags;
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     dd2:	e0 e5       	ldi	r30, 0x50	; 80
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	82 60       	ori	r24, 0x02	; 2
     dda:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ddc:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     dde:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     de0:	81 ff       	sbrs	r24, 1
     de2:	fd cf       	rjmp	.-6      	; 0xdde <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     de4:	61 e0       	ldi	r22, 0x01	; 1
     de6:	80 e4       	ldi	r24, 0x40	; 64
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	25 d0       	rcall	.+74     	; 0xe36 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     dec:	8f b7       	in	r24, 0x3f	; 63
     dee:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     df0:	f8 94       	cli
	return flags;
     df2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     df4:	e0 e5       	ldi	r30, 0x50	; 80
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     dfe:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	1f 92       	push	r1
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e14:	9f b7       	in	r25, 0x3f	; 63
     e16:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e18:	f8 94       	cli
	return flags;
     e1a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     e1c:	e8 2f       	mov	r30, r24
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	e0 59       	subi	r30, 0x90	; 144
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	60 95       	com	r22
     e26:	80 81       	ld	r24, Z
     e28:	68 23       	and	r22, r24
     e2a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e2c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     e2e:	0f 90       	pop	r0
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     e36:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     e38:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     e3a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     e3c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     e3e:	60 83       	st	Z, r22
	ret                             // Return to caller
     e40:	08 95       	ret

00000e42 <__portable_avr_delay_cycles>:
	
	NVM.CMD = ERASE_EEPROM;
	CCP = CCP_IOREG_MODE;
	NVM.CTRLA = CTRLA_CMDEX_BYTE;
	while(NVM.STATUS>>7);
}
     e42:	04 c0       	rjmp	.+8      	; 0xe4c <__portable_avr_delay_cycles+0xa>
     e44:	61 50       	subi	r22, 0x01	; 1
     e46:	71 09       	sbc	r23, r1
     e48:	81 09       	sbc	r24, r1
     e4a:	91 09       	sbc	r25, r1
     e4c:	61 15       	cp	r22, r1
     e4e:	71 05       	cpc	r23, r1
     e50:	81 05       	cpc	r24, r1
     e52:	91 05       	cpc	r25, r1
     e54:	b9 f7       	brne	.-18     	; 0xe44 <__portable_avr_delay_cycles+0x2>
     e56:	08 95       	ret

00000e58 <pressure_init>:
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	b4 dd       	rcall	.-1176   	; 0x9c6 <ms5607_init>
     e5e:	82 ea       	ldi	r24, 0xA2	; 162
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	ca dd       	rcall	.-1132   	; 0x9f8 <ms5607_read>
     e64:	c3 ef       	ldi	r28, 0xF3	; 243
     e66:	d0 e2       	ldi	r29, 0x20	; 32
     e68:	88 83       	st	Y, r24
     e6a:	99 83       	std	Y+1, r25	; 0x01
     e6c:	84 ea       	ldi	r24, 0xA4	; 164
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	c3 dd       	rcall	.-1146   	; 0x9f8 <ms5607_read>
     e72:	8a 83       	std	Y+2, r24	; 0x02
     e74:	9b 83       	std	Y+3, r25	; 0x03
     e76:	86 ea       	ldi	r24, 0xA6	; 166
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	be dd       	rcall	.-1156   	; 0x9f8 <ms5607_read>
     e7c:	8c 83       	std	Y+4, r24	; 0x04
     e7e:	9d 83       	std	Y+5, r25	; 0x05
     e80:	88 ea       	ldi	r24, 0xA8	; 168
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	b9 dd       	rcall	.-1166   	; 0x9f8 <ms5607_read>
     e86:	8e 83       	std	Y+6, r24	; 0x06
     e88:	9f 83       	std	Y+7, r25	; 0x07
     e8a:	8a ea       	ldi	r24, 0xAA	; 170
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	b4 dd       	rcall	.-1176   	; 0x9f8 <ms5607_read>
     e90:	88 87       	std	Y+8, r24	; 0x08
     e92:	99 87       	std	Y+9, r25	; 0x09
     e94:	8c ea       	ldi	r24, 0xAC	; 172
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	af dd       	rcall	.-1186   	; 0x9f8 <ms5607_read>
     e9a:	8a 87       	std	Y+10, r24	; 0x0a
     e9c:	9b 87       	std	Y+11, r25	; 0x0b
     e9e:	9f 93       	push	r25
     ea0:	8f 93       	push	r24
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	8f 93       	push	r24
     ea6:	88 85       	ldd	r24, Y+8	; 0x08
     ea8:	8f 93       	push	r24
     eaa:	8f 81       	ldd	r24, Y+7	; 0x07
     eac:	8f 93       	push	r24
     eae:	8e 81       	ldd	r24, Y+6	; 0x06
     eb0:	8f 93       	push	r24
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	8f 93       	push	r24
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	8f 93       	push	r24
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	8f 93       	push	r24
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	8f 93       	push	r24
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	8f 93       	push	r24
     ec6:	88 81       	ld	r24, Y
     ec8:	8f 93       	push	r24
     eca:	89 e9       	ldi	r24, 0x99	; 153
     ecc:	90 e2       	ldi	r25, 0x20	; 32
     ece:	9f 93       	push	r25
     ed0:	8f 93       	push	r24
     ed2:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <printf>
     ed6:	8d b7       	in	r24, 0x3d	; 61
     ed8:	9e b7       	in	r25, 0x3e	; 62
     eda:	0e 96       	adiw	r24, 0x0e	; 14
     edc:	8d bf       	out	0x3d, r24	; 61
     ede:	9e bf       	out	0x3e, r25	; 62
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <gps_init>:
     ee6:	2f dd       	rcall	.-1442   	; 0x946 <gps_uart_init>
     ee8:	6b ea       	ldi	r22, 0xAB	; 171
     eea:	79 e2       	ldi	r23, 0x29	; 41
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	a8 df       	rcall	.-176    	; 0xe42 <__portable_avr_delay_cycles>
     ef2:	80 e3       	ldi	r24, 0x30	; 48
     ef4:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
     ef8:	08 95       	ret

00000efa <get_pressure>:
     efa:	4f 92       	push	r4
     efc:	5f 92       	push	r5
     efe:	6f 92       	push	r6
     f00:	7f 92       	push	r7
     f02:	8f 92       	push	r8
     f04:	9f 92       	push	r9
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	81 dd       	rcall	.-1278   	; 0xa1c <ms5607_convert_d1>
     f1a:	6b 01       	movw	r12, r22
     f1c:	7c 01       	movw	r14, r24
     f1e:	a2 dd       	rcall	.-1212   	; 0xa64 <ms5607_convert_d2>
     f20:	0e 94 be 13 	call	0x277c	; 0x277c <__floatunsisf>
     f24:	4b 01       	movw	r8, r22
     f26:	5c 01       	movw	r10, r24
     f28:	c3 ef       	ldi	r28, 0xF3	; 243
     f2a:	d0 e2       	ldi	r29, 0x20	; 32
     f2c:	68 85       	ldd	r22, Y+8	; 0x08
     f2e:	79 85       	ldd	r23, Y+9	; 0x09
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 be 13 	call	0x277c	; 0x277c <__floatunsisf>
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e8       	ldi	r20, 0x80	; 128
     f3e:	53 e4       	ldi	r21, 0x43	; 67
     f40:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
     f44:	9b 01       	movw	r18, r22
     f46:	ac 01       	movw	r20, r24
     f48:	c5 01       	movw	r24, r10
     f4a:	b4 01       	movw	r22, r8
     f4c:	0e 94 82 12 	call	0x2504	; 0x2504 <__subsf3>
     f50:	4b 01       	movw	r8, r22
     f52:	5c 01       	movw	r10, r24
     f54:	6c 81       	ldd	r22, Y+4	; 0x04
     f56:	7d 81       	ldd	r23, Y+5	; 0x05
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 be 13 	call	0x277c	; 0x277c <__floatunsisf>
     f60:	a5 01       	movw	r20, r10
     f62:	94 01       	movw	r18, r8
     f64:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	5c e3       	ldi	r21, 0x3C	; 60
     f70:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
     f74:	2b 01       	movw	r4, r22
     f76:	3c 01       	movw	r6, r24
     f78:	68 81       	ld	r22, Y
     f7a:	79 81       	ldd	r23, Y+1	; 0x01
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 be 13 	call	0x277c	; 0x277c <__floatunsisf>
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	57 e4       	ldi	r21, 0x47	; 71
     f8c:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
     f90:	9b 01       	movw	r18, r22
     f92:	ac 01       	movw	r20, r24
     f94:	c3 01       	movw	r24, r6
     f96:	b2 01       	movw	r22, r4
     f98:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>
     f9c:	2b 01       	movw	r4, r22
     f9e:	3c 01       	movw	r6, r24
     fa0:	c7 01       	movw	r24, r14
     fa2:	b6 01       	movw	r22, r12
     fa4:	0e 94 be 13 	call	0x277c	; 0x277c <__floatunsisf>
     fa8:	9b 01       	movw	r18, r22
     faa:	ac 01       	movw	r20, r24
     fac:	c3 01       	movw	r24, r6
     fae:	b2 01       	movw	r22, r4
     fb0:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	55 e3       	ldi	r21, 0x35	; 53
     fbc:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
     fc0:	6b 01       	movw	r12, r22
     fc2:	7c 01       	movw	r14, r24
     fc4:	6e 81       	ldd	r22, Y+6	; 0x06
     fc6:	7f 81       	ldd	r23, Y+7	; 0x07
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 be 13 	call	0x277c	; 0x277c <__floatunsisf>
     fd0:	a5 01       	movw	r20, r10
     fd2:	94 01       	movw	r18, r8
     fd4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e8       	ldi	r20, 0x80	; 128
     fde:	5c e3       	ldi	r21, 0x3C	; 60
     fe0:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
     fe4:	4b 01       	movw	r8, r22
     fe6:	5c 01       	movw	r10, r24
     fe8:	6a 81       	ldd	r22, Y+2	; 0x02
     fea:	7b 81       	ldd	r23, Y+3	; 0x03
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 be 13 	call	0x277c	; 0x277c <__floatunsisf>
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	58 e4       	ldi	r21, 0x48	; 72
     ffc:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    1000:	9b 01       	movw	r18, r22
    1002:	ac 01       	movw	r20, r24
    1004:	c5 01       	movw	r24, r10
    1006:	b4 01       	movw	r22, r8
    1008:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>
    100c:	9b 01       	movw	r18, r22
    100e:	ac 01       	movw	r20, r24
    1010:	c7 01       	movw	r24, r14
    1012:	b6 01       	movw	r22, r12
    1014:	0e 94 82 12 	call	0x2504	; 0x2504 <__subsf3>
    1018:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__fixunssfdi>
    101c:	0f e0       	ldi	r16, 0x0F	; 15
    101e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__lshrdi3>
    1022:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__floatundisf>
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	bf 90       	pop	r11
    1036:	af 90       	pop	r10
    1038:	9f 90       	pop	r9
    103a:	8f 90       	pop	r8
    103c:	7f 90       	pop	r7
    103e:	6f 90       	pop	r6
    1040:	5f 90       	pop	r5
    1042:	4f 90       	pop	r4
    1044:	08 95       	ret

00001046 <get_altitude>:
    1046:	4f 92       	push	r4
    1048:	5f 92       	push	r5
    104a:	6f 92       	push	r6
    104c:	7f 92       	push	r7
    104e:	8f 92       	push	r8
    1050:	9f 92       	push	r9
    1052:	af 92       	push	r10
    1054:	bf 92       	push	r11
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	2b 01       	movw	r4, r22
    1060:	3c 01       	movw	r6, r24
    1062:	c0 90 21 20 	lds	r12, 0x2021	; 0x802021 <L>
    1066:	d0 90 22 20 	lds	r13, 0x2022	; 0x802022 <L+0x1>
    106a:	e0 90 23 20 	lds	r14, 0x2023	; 0x802023 <L+0x2>
    106e:	f0 90 24 20 	lds	r15, 0x2024	; 0x802024 <L+0x3>
    1072:	20 91 25 20 	lds	r18, 0x2025	; 0x802025 <R>
    1076:	30 91 26 20 	lds	r19, 0x2026	; 0x802026 <R+0x1>
    107a:	40 91 27 20 	lds	r20, 0x2027	; 0x802027 <R+0x2>
    107e:	50 91 28 20 	lds	r21, 0x2028	; 0x802028 <R+0x3>
    1082:	c7 01       	movw	r24, r14
    1084:	b6 01       	movw	r22, r12
    1086:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    108a:	20 91 1d 20 	lds	r18, 0x201D	; 0x80201d <g_0>
    108e:	30 91 1e 20 	lds	r19, 0x201E	; 0x80201e <g_0+0x1>
    1092:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <g_0+0x2>
    1096:	50 91 20 20 	lds	r21, 0x2020	; 0x802020 <g_0+0x3>
    109a:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__divsf3>
    109e:	4b 01       	movw	r8, r22
    10a0:	5c 01       	movw	r10, r24
    10a2:	a3 01       	movw	r20, r6
    10a4:	92 01       	movw	r18, r4
    10a6:	60 91 2d 20 	lds	r22, 0x202D	; 0x80202d <ground_p>
    10aa:	70 91 2e 20 	lds	r23, 0x202E	; 0x80202e <ground_p+0x1>
    10ae:	80 91 2f 20 	lds	r24, 0x202F	; 0x80202f <ground_p+0x2>
    10b2:	90 91 30 20 	lds	r25, 0x2030	; 0x802030 <ground_p+0x3>
    10b6:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__divsf3>
    10ba:	a5 01       	movw	r20, r10
    10bc:	94 01       	movw	r18, r8
    10be:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <pow>
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e8       	ldi	r20, 0x80	; 128
    10c8:	5f e3       	ldi	r21, 0x3F	; 63
    10ca:	0e 94 82 12 	call	0x2504	; 0x2504 <__subsf3>
    10ce:	20 91 29 20 	lds	r18, 0x2029	; 0x802029 <ground_t>
    10d2:	30 91 2a 20 	lds	r19, 0x202A	; 0x80202a <ground_t+0x1>
    10d6:	40 91 2b 20 	lds	r20, 0x202B	; 0x80202b <ground_t+0x2>
    10da:	50 91 2c 20 	lds	r21, 0x202C	; 0x80202c <ground_t+0x3>
    10de:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    10e2:	a7 01       	movw	r20, r14
    10e4:	96 01       	movw	r18, r12
    10e6:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__divsf3>
    10ea:	20 91 ff 20 	lds	r18, 0x20FF	; 0x8020ff <ground_a>
    10ee:	30 91 00 21 	lds	r19, 0x2100	; 0x802100 <ground_a+0x1>
    10f2:	40 91 01 21 	lds	r20, 0x2101	; 0x802101 <ground_a+0x2>
    10f6:	50 91 02 21 	lds	r21, 0x2102	; 0x802102 <ground_a+0x3>
    10fa:	0e 94 82 12 	call	0x2504	; 0x2504 <__subsf3>
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	9f 90       	pop	r9
    110c:	8f 90       	pop	r8
    110e:	7f 90       	pop	r7
    1110:	6f 90       	pop	r6
    1112:	5f 90       	pop	r5
    1114:	4f 90       	pop	r4
    1116:	08 95       	ret

00001118 <diff>:
    1118:	2f 92       	push	r2
    111a:	3f 92       	push	r3
    111c:	4f 92       	push	r4
    111e:	5f 92       	push	r5
    1120:	6f 92       	push	r6
    1122:	7f 92       	push	r7
    1124:	8f 92       	push	r8
    1126:	9f 92       	push	r9
    1128:	af 92       	push	r10
    112a:	bf 92       	push	r11
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	00 d0       	rcall	.+0      	; 0x113e <diff+0x26>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <diff+0x28>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	6c 01       	movw	r12, r24
    1146:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    114a:	88 23       	and	r24, r24
    114c:	09 f4       	brne	.+2      	; 0x1150 <diff+0x38>
    114e:	6c c0       	rjmp	.+216    	; 0x1228 <diff+0x110>
    1150:	00 e0       	ldi	r16, 0x00	; 0
    1152:	10 e0       	ldi	r17, 0x00	; 0
    1154:	41 2c       	mov	r4, r1
    1156:	51 2c       	mov	r5, r1
    1158:	32 01       	movw	r6, r4
    115a:	86 2e       	mov	r8, r22
    115c:	91 2c       	mov	r9, r1
    115e:	a1 2c       	mov	r10, r1
    1160:	b1 2c       	mov	r11, r1
    1162:	89 82       	std	Y+1, r8	; 0x01
    1164:	9a 82       	std	Y+2, r9	; 0x02
    1166:	ab 82       	std	Y+3, r10	; 0x03
    1168:	bc 82       	std	Y+4, r11	; 0x04
    116a:	b8 01       	movw	r22, r16
    116c:	c6 01       	movw	r24, r12
    116e:	5b dd       	rcall	.-1354   	; 0xc26 <rb16_get_nth>
    1170:	5c 01       	movw	r10, r24
    1172:	18 01       	movw	r2, r16
    1174:	2f ef       	ldi	r18, 0xFF	; 255
    1176:	22 1a       	sub	r2, r18
    1178:	32 0a       	sbc	r3, r18
    117a:	b1 01       	movw	r22, r2
    117c:	c6 01       	movw	r24, r12
    117e:	53 dd       	rcall	.-1370   	; 0xc26 <rb16_get_nth>
    1180:	7c 01       	movw	r14, r24
    1182:	b8 01       	movw	r22, r16
    1184:	6e 5f       	subi	r22, 0xFE	; 254
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	c6 01       	movw	r24, r12
    118a:	4d dd       	rcall	.-1382   	; 0xc26 <rb16_get_nth>
    118c:	a5 01       	movw	r20, r10
    118e:	bb 0c       	add	r11, r11
    1190:	66 0b       	sbc	r22, r22
    1192:	77 0b       	sbc	r23, r23
    1194:	8a 01       	movw	r16, r20
    1196:	9b 01       	movw	r18, r22
    1198:	00 0f       	add	r16, r16
    119a:	11 1f       	adc	r17, r17
    119c:	22 1f       	adc	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	40 0f       	add	r20, r16
    11a2:	51 1f       	adc	r21, r17
    11a4:	62 1f       	adc	r22, r18
    11a6:	73 1f       	adc	r23, r19
    11a8:	87 01       	movw	r16, r14
    11aa:	ff 0c       	add	r15, r15
    11ac:	22 0b       	sbc	r18, r18
    11ae:	33 0b       	sbc	r19, r19
    11b0:	78 01       	movw	r14, r16
    11b2:	89 01       	movw	r16, r18
    11b4:	ee 0c       	add	r14, r14
    11b6:	ff 1c       	adc	r15, r15
    11b8:	00 1f       	adc	r16, r16
    11ba:	11 1f       	adc	r17, r17
    11bc:	ee 0c       	add	r14, r14
    11be:	ff 1c       	adc	r15, r15
    11c0:	00 1f       	adc	r16, r16
    11c2:	11 1f       	adc	r17, r17
    11c4:	4a 01       	movw	r8, r20
    11c6:	5b 01       	movw	r10, r22
    11c8:	8e 18       	sub	r8, r14
    11ca:	9f 08       	sbc	r9, r15
    11cc:	a0 0a       	sbc	r10, r16
    11ce:	b1 0a       	sbc	r11, r17
    11d0:	ac 01       	movw	r20, r24
    11d2:	99 0f       	add	r25, r25
    11d4:	66 0b       	sbc	r22, r22
    11d6:	77 0b       	sbc	r23, r23
    11d8:	d5 01       	movw	r26, r10
    11da:	c4 01       	movw	r24, r8
    11dc:	84 0f       	add	r24, r20
    11de:	95 1f       	adc	r25, r21
    11e0:	a6 1f       	adc	r26, r22
    11e2:	b7 1f       	adc	r27, r23
    11e4:	9c 01       	movw	r18, r24
    11e6:	ad 01       	movw	r20, r26
    11e8:	69 81       	ldd	r22, Y+1	; 0x01
    11ea:	7a 81       	ldd	r23, Y+2	; 0x02
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsi3>
    11f4:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatsisf>
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	5f e3       	ldi	r21, 0x3F	; 63
    1200:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
    1208:	c3 01       	movw	r24, r6
    120a:	b2 01       	movw	r22, r4
    120c:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>
    1210:	2b 01       	movw	r4, r22
    1212:	3c 01       	movw	r6, r24
    1214:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <data_samples>
    1218:	81 01       	movw	r16, r2
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	22 16       	cp	r2, r18
    1220:	33 06       	cpc	r3, r19
    1222:	08 f4       	brcc	.+2      	; 0x1226 <diff+0x10e>
    1224:	a2 cf       	rjmp	.-188    	; 0x116a <diff+0x52>
    1226:	03 c0       	rjmp	.+6      	; 0x122e <diff+0x116>
    1228:	41 2c       	mov	r4, r1
    122a:	51 2c       	mov	r5, r1
    122c:	32 01       	movw	r6, r4
    122e:	68 2f       	mov	r22, r24
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatsisf>
    123a:	9b 01       	movw	r18, r22
    123c:	ac 01       	movw	r20, r24
    123e:	c3 01       	movw	r24, r6
    1240:	b2 01       	movw	r22, r4
    1242:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__divsf3>
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	48 ec       	ldi	r20, 0xC8	; 200
    124c:	52 e4       	ldi	r21, 0x42	; 66
    124e:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__divsf3>
    1252:	26 96       	adiw	r28, 0x06	; 6
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	9f 90       	pop	r9
    126e:	8f 90       	pop	r8
    1270:	7f 90       	pop	r7
    1272:	6f 90       	pop	r6
    1274:	5f 90       	pop	r5
    1276:	4f 90       	pop	r4
    1278:	3f 90       	pop	r3
    127a:	2f 90       	pop	r2
    127c:	08 95       	ret

0000127e <data_check>:
    127e:	3f 92       	push	r3
    1280:	4f 92       	push	r4
    1282:	5f 92       	push	r5
    1284:	6f 92       	push	r6
    1286:	7f 92       	push	r7
    1288:	8f 92       	push	r8
    128a:	9f 92       	push	r9
    128c:	af 92       	push	r10
    128e:	bf 92       	push	r11
    1290:	cf 92       	push	r12
    1292:	df 92       	push	r13
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <data_check+0x24>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <data_check+0x26>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	8c 01       	movw	r16, r24
    12aa:	19 82       	std	Y+1, r1	; 0x01
    12ac:	1a 82       	std	Y+2, r1	; 0x02
    12ae:	c1 2c       	mov	r12, r1
    12b0:	d1 2c       	mov	r13, r1
    12b2:	76 01       	movw	r14, r12
    12b4:	69 81       	ldd	r22, Y+1	; 0x01
    12b6:	7a 81       	ldd	r23, Y+2	; 0x02
    12b8:	c8 01       	movw	r24, r16
    12ba:	3d dd       	rcall	.-1414   	; 0xd36 <rb32_get_nth>
    12bc:	4b 01       	movw	r8, r22
    12be:	5c 01       	movw	r10, r24
    12c0:	21 ea       	ldi	r18, 0xA1	; 161
    12c2:	82 1a       	sub	r8, r18
    12c4:	26 e8       	ldi	r18, 0x86	; 134
    12c6:	92 0a       	sbc	r9, r18
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	a2 0a       	sbc	r10, r18
    12cc:	b1 08       	sbc	r11, r1
    12ce:	2f ed       	ldi	r18, 0xDF	; 223
    12d0:	82 16       	cp	r8, r18
    12d2:	2f e0       	ldi	r18, 0x0F	; 15
    12d4:	92 06       	cpc	r9, r18
    12d6:	27 e9       	ldi	r18, 0x97	; 151
    12d8:	a2 06       	cpc	r10, r18
    12da:	b1 04       	cpc	r11, r1
    12dc:	80 f4       	brcc	.+32     	; 0x12fe <data_check+0x80>
    12de:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatsisf>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 ea       	ldi	r20, 0xA0	; 160
    12e8:	50 e4       	ldi	r21, 0x40	; 64
    12ea:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__divsf3>
    12ee:	9b 01       	movw	r18, r22
    12f0:	ac 01       	movw	r20, r24
    12f2:	c7 01       	movw	r24, r14
    12f4:	b6 01       	movw	r22, r12
    12f6:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>
    12fa:	6b 01       	movw	r12, r22
    12fc:	7c 01       	movw	r14, r24
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	05 97       	sbiw	r24, 0x05	; 5
    130a:	a1 f6       	brne	.-88     	; 0x12b4 <data_check+0x36>
    130c:	19 82       	std	Y+1, r1	; 0x01
    130e:	1a 82       	std	Y+2, r1	; 0x02
    1310:	81 2c       	mov	r8, r1
    1312:	91 2c       	mov	r9, r1
    1314:	54 01       	movw	r10, r8
    1316:	69 81       	ldd	r22, Y+1	; 0x01
    1318:	7a 81       	ldd	r23, Y+2	; 0x02
    131a:	c8 01       	movw	r24, r16
    131c:	0c dd       	rcall	.-1512   	; 0xd36 <rb32_get_nth>
    131e:	2b 01       	movw	r4, r22
    1320:	3c 01       	movw	r6, r24
    1322:	21 ea       	ldi	r18, 0xA1	; 161
    1324:	42 1a       	sub	r4, r18
    1326:	26 e8       	ldi	r18, 0x86	; 134
    1328:	52 0a       	sbc	r5, r18
    132a:	21 e0       	ldi	r18, 0x01	; 1
    132c:	62 0a       	sbc	r6, r18
    132e:	71 08       	sbc	r7, r1
    1330:	2f ed       	ldi	r18, 0xDF	; 223
    1332:	42 16       	cp	r4, r18
    1334:	2f e0       	ldi	r18, 0x0F	; 15
    1336:	52 06       	cpc	r5, r18
    1338:	27 e9       	ldi	r18, 0x97	; 151
    133a:	62 06       	cpc	r6, r18
    133c:	71 04       	cpc	r7, r1
    133e:	90 f4       	brcc	.+36     	; 0x1364 <data_check+0xe6>
    1340:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatsisf>
    1344:	a7 01       	movw	r20, r14
    1346:	96 01       	movw	r18, r12
    1348:	0e 94 82 12 	call	0x2504	; 0x2504 <__subsf3>
    134c:	9b 01       	movw	r18, r22
    134e:	ac 01       	movw	r20, r24
    1350:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    1354:	9b 01       	movw	r18, r22
    1356:	ac 01       	movw	r20, r24
    1358:	c5 01       	movw	r24, r10
    135a:	b4 01       	movw	r22, r8
    135c:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>
    1360:	4b 01       	movw	r8, r22
    1362:	5c 01       	movw	r10, r24
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	05 97       	sbiw	r24, 0x05	; 5
    1370:	91 f6       	brne	.-92     	; 0x1316 <data_check+0x98>
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e8       	ldi	r20, 0x80	; 128
    1378:	5e e3       	ldi	r21, 0x3E	; 62
    137a:	c5 01       	movw	r24, r10
    137c:	b4 01       	movw	r22, r8
    137e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    1382:	69 83       	std	Y+1, r22	; 0x01
    1384:	7a 83       	std	Y+2, r23	; 0x02
    1386:	8b 83       	std	Y+3, r24	; 0x03
    1388:	9c 83       	std	Y+4, r25	; 0x04
    138a:	1d 82       	std	Y+5, r1	; 0x05
    138c:	1e 82       	std	Y+6, r1	; 0x06
    138e:	31 2c       	mov	r3, r1
    1390:	41 2c       	mov	r4, r1
    1392:	51 2c       	mov	r5, r1
    1394:	32 01       	movw	r6, r4
    1396:	6d 81       	ldd	r22, Y+5	; 0x05
    1398:	7e 81       	ldd	r23, Y+6	; 0x06
    139a:	c8 01       	movw	r24, r16
    139c:	cc dc       	rcall	.-1640   	; 0xd36 <rb32_get_nth>
    139e:	4b 01       	movw	r8, r22
    13a0:	5c 01       	movw	r10, r24
    13a2:	21 ea       	ldi	r18, 0xA1	; 161
    13a4:	82 1a       	sub	r8, r18
    13a6:	26 e8       	ldi	r18, 0x86	; 134
    13a8:	92 0a       	sbc	r9, r18
    13aa:	21 e0       	ldi	r18, 0x01	; 1
    13ac:	a2 0a       	sbc	r10, r18
    13ae:	b1 08       	sbc	r11, r1
    13b0:	2f ed       	ldi	r18, 0xDF	; 223
    13b2:	82 16       	cp	r8, r18
    13b4:	2f e0       	ldi	r18, 0x0F	; 15
    13b6:	92 06       	cpc	r9, r18
    13b8:	27 e9       	ldi	r18, 0x97	; 151
    13ba:	a2 06       	cpc	r10, r18
    13bc:	b1 04       	cpc	r11, r1
    13be:	50 f5       	brcc	.+84     	; 0x1414 <data_check+0x196>
    13c0:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatsisf>
    13c4:	4b 01       	movw	r8, r22
    13c6:	5c 01       	movw	r10, r24
    13c8:	a7 01       	movw	r20, r14
    13ca:	96 01       	movw	r18, r12
    13cc:	0e 94 82 12 	call	0x2504	; 0x2504 <__subsf3>
    13d0:	0e 94 8d 13 	call	0x271a	; 0x271a <__fixsfsi>
    13d4:	9b 01       	movw	r18, r22
    13d6:	77 23       	and	r23, r23
    13d8:	24 f4       	brge	.+8      	; 0x13e2 <data_check+0x164>
    13da:	22 27       	eor	r18, r18
    13dc:	33 27       	eor	r19, r19
    13de:	26 1b       	sub	r18, r22
    13e0:	37 0b       	sbc	r19, r23
    13e2:	b9 01       	movw	r22, r18
    13e4:	33 0f       	add	r19, r19
    13e6:	88 0b       	sbc	r24, r24
    13e8:	99 0b       	sbc	r25, r25
    13ea:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatsisf>
    13ee:	9b 01       	movw	r18, r22
    13f0:	ac 01       	movw	r20, r24
    13f2:	69 81       	ldd	r22, Y+1	; 0x01
    13f4:	7a 81       	ldd	r23, Y+2	; 0x02
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__gesf2>
    13fe:	88 23       	and	r24, r24
    1400:	4c f0       	brlt	.+18     	; 0x1414 <data_check+0x196>
    1402:	a5 01       	movw	r20, r10
    1404:	94 01       	movw	r18, r8
    1406:	c3 01       	movw	r24, r6
    1408:	b2 01       	movw	r22, r4
    140a:	0e 94 83 12 	call	0x2506	; 0x2506 <__addsf3>
    140e:	2b 01       	movw	r4, r22
    1410:	3c 01       	movw	r6, r24
    1412:	33 94       	inc	r3
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	9e 81       	ldd	r25, Y+6	; 0x06
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	8d 83       	std	Y+5, r24	; 0x05
    141c:	9e 83       	std	Y+6, r25	; 0x06
    141e:	05 97       	sbiw	r24, 0x05	; 5
    1420:	09 f0       	breq	.+2      	; 0x1424 <data_check+0x1a6>
    1422:	b9 cf       	rjmp	.-142    	; 0x1396 <data_check+0x118>
    1424:	33 20       	and	r3, r3
    1426:	69 f0       	breq	.+26     	; 0x1442 <data_check+0x1c4>
    1428:	63 2d       	mov	r22, r3
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 be 13 	call	0x277c	; 0x277c <__floatunsisf>
    1434:	9b 01       	movw	r18, r22
    1436:	ac 01       	movw	r20, r24
    1438:	c3 01       	movw	r24, r6
    143a:	b2 01       	movw	r22, r4
    143c:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__divsf3>
    1440:	04 c0       	rjmp	.+8      	; 0x144a <data_check+0x1cc>
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	80 e8       	ldi	r24, 0x80	; 128
    1448:	9f eb       	ldi	r25, 0xBF	; 191
    144a:	26 96       	adiw	r28, 0x06	; 6
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	df 90       	pop	r13
    145e:	cf 90       	pop	r12
    1460:	bf 90       	pop	r11
    1462:	af 90       	pop	r10
    1464:	9f 90       	pop	r9
    1466:	8f 90       	pop	r8
    1468:	7f 90       	pop	r7
    146a:	6f 90       	pop	r6
    146c:	5f 90       	pop	r5
    146e:	4f 90       	pop	r4
    1470:	3f 90       	pop	r3
    1472:	08 95       	ret

00001474 <data_collect>:
    1474:	af 92       	push	r10
    1476:	bf 92       	push	r11
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	00 d0       	rcall	.+0      	; 0x148a <data_collect+0x16>
    148a:	00 d0       	rcall	.+0      	; 0x148c <data_collect+0x18>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	5c 01       	movw	r10, r24
    1492:	8b 01       	movw	r16, r22
    1494:	32 dd       	rcall	.-1436   	; 0xefa <get_pressure>
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    14a2:	0e 94 8d 13 	call	0x271a	; 0x271a <__fixsfsi>
    14a6:	69 83       	std	Y+1, r22	; 0x01
    14a8:	7a 83       	std	Y+2, r23	; 0x02
    14aa:	8b 83       	std	Y+3, r24	; 0x03
    14ac:	9c 83       	std	Y+4, r25	; 0x04
    14ae:	41 e0       	ldi	r20, 0x01	; 1
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	be 01       	movw	r22, r28
    14b4:	6f 5f       	subi	r22, 0xFF	; 255
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	c8 01       	movw	r24, r16
    14ba:	e2 db       	rcall	.-2108   	; 0xc80 <rb32_write>
    14bc:	c8 01       	movw	r24, r16
    14be:	df de       	rcall	.-578    	; 0x127e <data_check>
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e2       	ldi	r20, 0x20	; 32
    14c6:	51 e4       	ldi	r21, 0x41	; 65
    14c8:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__divsf3>
    14cc:	6b 01       	movw	r12, r22
    14ce:	7c 01       	movw	r14, r24
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	40 e8       	ldi	r20, 0x80	; 128
    14d6:	5f eb       	ldi	r21, 0xBF	; 191
    14d8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__cmpsf2>
    14dc:	88 23       	and	r24, r24
    14de:	81 f1       	breq	.+96     	; 0x1540 <data_collect+0xcc>
    14e0:	c0 92 e6 20 	sts	0x20E6, r12	; 0x8020e6 <press>
    14e4:	d0 92 e7 20 	sts	0x20E7, r13	; 0x8020e7 <press+0x1>
    14e8:	e0 92 e8 20 	sts	0x20E8, r14	; 0x8020e8 <press+0x2>
    14ec:	f0 92 e9 20 	sts	0x20E9, r15	; 0x8020e9 <press+0x3>
    14f0:	c7 01       	movw	r24, r14
    14f2:	b6 01       	movw	r22, r12
    14f4:	a8 dd       	rcall	.-1200   	; 0x1046 <get_altitude>
    14f6:	60 93 de 20 	sts	0x20DE, r22	; 0x8020de <alt>
    14fa:	70 93 df 20 	sts	0x20DF, r23	; 0x8020df <alt+0x1>
    14fe:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <alt+0x2>
    1502:	90 93 e1 20 	sts	0x20E1, r25	; 0x8020e1 <alt+0x3>
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	48 ec       	ldi	r20, 0xC8	; 200
    150c:	52 e4       	ldi	r21, 0x42	; 66
    150e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    1512:	0e 94 8d 13 	call	0x271a	; 0x271a <__fixsfsi>
    1516:	6d 83       	std	Y+5, r22	; 0x05
    1518:	7e 83       	std	Y+6, r23	; 0x06
    151a:	41 e0       	ldi	r20, 0x01	; 1
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	be 01       	movw	r22, r28
    1520:	6b 5f       	subi	r22, 0xFB	; 251
    1522:	7f 4f       	sbci	r23, 0xFF	; 255
    1524:	c5 01       	movw	r24, r10
    1526:	36 db       	rcall	.-2452   	; 0xb94 <rb16_write>
    1528:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    152c:	c5 01       	movw	r24, r10
    152e:	f4 dd       	rcall	.-1048   	; 0x1118 <diff>
    1530:	60 93 d6 20 	sts	0x20D6, r22	; 0x8020d6 <velocity>
    1534:	70 93 d7 20 	sts	0x20D7, r23	; 0x8020d7 <velocity+0x1>
    1538:	80 93 d8 20 	sts	0x20D8, r24	; 0x8020d8 <velocity+0x2>
    153c:	90 93 d9 20 	sts	0x20D9, r25	; 0x8020d9 <velocity+0x3>
    1540:	83 e3       	ldi	r24, 0x33	; 51
    1542:	93 e1       	ldi	r25, 0x13	; 19
    1544:	a0 e9       	ldi	r26, 0x90	; 144
    1546:	b3 e4       	ldi	r27, 0x43	; 67
    1548:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <temp>
    154c:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <temp+0x1>
    1550:	a0 93 e4 20 	sts	0x20E4, r26	; 0x8020e4 <temp+0x2>
    1554:	b0 93 e5 20 	sts	0x20E5, r27	; 0x8020e5 <temp+0x3>
    1558:	26 96       	adiw	r28, 0x06	; 6
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	bf 90       	pop	r11
    1570:	af 90       	pop	r10
    1572:	08 95       	ret

00001574 <state_check>:
    1574:	cf 92       	push	r12
    1576:	df 92       	push	r13
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	c0 90 d6 20 	lds	r12, 0x20D6	; 0x8020d6 <velocity>
    1580:	d0 90 d7 20 	lds	r13, 0x20D7	; 0x8020d7 <velocity+0x1>
    1584:	e0 90 d8 20 	lds	r14, 0x20D8	; 0x8020d8 <velocity+0x2>
    1588:	f0 90 d9 20 	lds	r15, 0x20D9	; 0x8020d9 <velocity+0x3>
    158c:	c7 01       	movw	r24, r14
    158e:	b6 01       	movw	r22, r12
    1590:	0e 94 8d 13 	call	0x271a	; 0x271a <__fixsfsi>
    1594:	9b 01       	movw	r18, r22
    1596:	77 23       	and	r23, r23
    1598:	24 f4       	brge	.+8      	; 0x15a2 <state_check+0x2e>
    159a:	22 27       	eor	r18, r18
    159c:	33 27       	eor	r19, r19
    159e:	26 1b       	sub	r18, r22
    15a0:	37 0b       	sbc	r19, r23
    15a2:	26 30       	cpi	r18, 0x06	; 6
    15a4:	31 05       	cpc	r19, r1
    15a6:	8c f0       	brlt	.+34     	; 0x15ca <state_check+0x56>
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	a9 01       	movw	r20, r18
    15ae:	c7 01       	movw	r24, r14
    15b0:	b6 01       	movw	r22, r12
    15b2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__cmpsf2>
    15b6:	88 23       	and	r24, r24
    15b8:	24 f0       	brlt	.+8      	; 0x15c2 <state_check+0x4e>
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	80 93 05 21 	sts	0x2105, r24	; 0x802105 <state>
    15c0:	24 c0       	rjmp	.+72     	; 0x160a <state_check+0x96>
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	80 93 05 21 	sts	0x2105, r24	; 0x802105 <state>
    15c8:	20 c0       	rjmp	.+64     	; 0x160a <state_check+0x96>
    15ca:	10 92 05 21 	sts	0x2105, r1	; 0x802105 <state>
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	48 e4       	ldi	r20, 0x48	; 72
    15d4:	52 e4       	ldi	r21, 0x42	; 66
    15d6:	60 91 de 20 	lds	r22, 0x20DE	; 0x8020de <alt>
    15da:	70 91 df 20 	lds	r23, 0x20DF	; 0x8020df <alt+0x1>
    15de:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <alt+0x2>
    15e2:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <alt+0x3>
    15e6:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__gesf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	24 f0       	brlt	.+8      	; 0x15f6 <state_check+0x82>
    15ee:	80 91 03 21 	lds	r24, 0x2103	; 0x802103 <reset_received>
    15f2:	88 23       	and	r24, r24
    15f4:	19 f0       	breq	.+6      	; 0x15fc <state_check+0x88>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	80 93 05 21 	sts	0x2105, r24	; 0x802105 <state>
    15fc:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <released>
    1600:	88 23       	and	r24, r24
    1602:	19 f0       	breq	.+6      	; 0x160a <state_check+0x96>
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	80 93 05 21 	sts	0x2105, r24	; 0x802105 <state>
    160a:	ff 90       	pop	r15
    160c:	ef 90       	pop	r14
    160e:	df 90       	pop	r13
    1610:	cf 90       	pop	r12
    1612:	08 95       	ret

00001614 <servo_pid>:
    1614:	8f 92       	push	r8
    1616:	9f 92       	push	r9
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	7c 01       	movw	r14, r24
    162e:	c0 e0       	ldi	r28, 0x00	; 0
    1630:	d0 e0       	ldi	r29, 0x00	; 0
    1632:	00 e0       	ldi	r16, 0x00	; 0
    1634:	10 e0       	ldi	r17, 0x00	; 0
    1636:	be 01       	movw	r22, r28
    1638:	c7 01       	movw	r24, r14
    163a:	f5 da       	rcall	.-2582   	; 0xc26 <rb16_get_nth>
    163c:	08 0f       	add	r16, r24
    163e:	19 1f       	adc	r17, r25
    1640:	21 96       	adiw	r28, 0x01	; 1
    1642:	ca 30       	cpi	r28, 0x0A	; 10
    1644:	d1 05       	cpc	r29, r1
    1646:	b9 f7       	brne	.-18     	; 0x1636 <servo_pid+0x22>
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	c7 01       	movw	r24, r14
    164e:	eb da       	rcall	.-2602   	; 0xc26 <rb16_get_nth>
    1650:	ec 01       	movw	r28, r24
    1652:	60 91 19 20 	lds	r22, 0x2019	; 0x802019 <rate>
    1656:	c7 01       	movw	r24, r14
    1658:	5f dd       	rcall	.-1346   	; 0x1118 <diff>
    165a:	6b 01       	movw	r12, r22
    165c:	7c 01       	movw	r14, r24
    165e:	be 01       	movw	r22, r28
    1660:	dd 0f       	add	r29, r29
    1662:	88 0b       	sbc	r24, r24
    1664:	99 0b       	sbc	r25, r25
    1666:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatsisf>
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	a9 01       	movw	r20, r18
    1670:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	48 ec       	ldi	r20, 0xC8	; 200
    167a:	52 e4       	ldi	r21, 0x42	; 66
    167c:	ac d7       	rcall	.+3928   	; 0x25d6 <__divsf3>
    167e:	4b 01       	movw	r8, r22
    1680:	5c 01       	movw	r10, r24
    1682:	b8 01       	movw	r22, r16
    1684:	11 0f       	add	r17, r17
    1686:	88 0b       	sbc	r24, r24
    1688:	99 0b       	sbc	r25, r25
    168a:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatsisf>
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	a9 01       	movw	r20, r18
    1694:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	48 ec       	ldi	r20, 0xC8	; 200
    169e:	52 e4       	ldi	r21, 0x42	; 66
    16a0:	9a d7       	rcall	.+3892   	; 0x25d6 <__divsf3>
    16a2:	9b 01       	movw	r18, r22
    16a4:	ac 01       	movw	r20, r24
    16a6:	c5 01       	movw	r24, r10
    16a8:	b4 01       	movw	r22, r8
    16aa:	2d d7       	rcall	.+3674   	; 0x2506 <__addsf3>
    16ac:	4b 01       	movw	r8, r22
    16ae:	5c 01       	movw	r10, r24
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	a9 01       	movw	r20, r18
    16b6:	c7 01       	movw	r24, r14
    16b8:	b6 01       	movw	r22, r12
    16ba:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    16be:	9b 01       	movw	r18, r22
    16c0:	ac 01       	movw	r20, r24
    16c2:	c5 01       	movw	r24, r10
    16c4:	b4 01       	movw	r22, r8
    16c6:	1f d7       	rcall	.+3646   	; 0x2506 <__addsf3>
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e8       	ldi	r19, 0x80	; 128
    16cc:	4b eb       	ldi	r20, 0xBB	; 187
    16ce:	54 e4       	ldi	r21, 0x44	; 68
    16d0:	1a d7       	rcall	.+3636   	; 0x2506 <__addsf3>
    16d2:	0e 94 92 13 	call	0x2724	; 0x2724 <__fixunssfsi>
    16d6:	60 93 1b 20 	sts	0x201B, r22	; 0x80201b <servo_pulse>
    16da:	70 93 1c 20 	sts	0x201C, r23	; 0x80201c <servo_pulse+0x1>
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 be 13 	call	0x277c	; 0x277c <__floatunsisf>
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	4a e7       	ldi	r20, 0x7A	; 122
    16ec:	54 e4       	ldi	r21, 0x44	; 68
    16ee:	73 d7       	rcall	.+3814   	; 0x25d6 <__divsf3>
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a ef       	ldi	r20, 0xFA	; 250
    16f6:	53 e4       	ldi	r21, 0x43	; 67
    16f8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__mulsf3>
    16fc:	0e 94 92 13 	call	0x2724	; 0x2724 <__fixunssfsi>
    1700:	60 93 68 09 	sts	0x0968, r22	; 0x800968 <__TEXT_REGION_LENGTH__+0x700968>
    1704:	70 93 69 09 	sts	0x0969, r23	; 0x800969 <__TEXT_REGION_LENGTH__+0x700969>
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	9f 90       	pop	r9
    171e:	8f 90       	pop	r8
    1720:	08 95       	ret

00001722 <clock_init>:
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	85 e0       	ldi	r24, 0x05	; 5
    1726:	71 db       	rcall	.-2334   	; 0xe0a <sysclk_enable_module>
    1728:	e0 e0       	ldi	r30, 0x00	; 0
    172a:	fa e0       	ldi	r31, 0x0A	; 10
    172c:	87 e0       	ldi	r24, 0x07	; 7
    172e:	80 83       	st	Z, r24
    1730:	81 e1       	ldi	r24, 0x11	; 17
    1732:	9a e7       	ldi	r25, 0x7A	; 122
    1734:	86 a3       	std	Z+38, r24	; 0x26
    1736:	97 a3       	std	Z+39, r25	; 0x27
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	86 83       	std	Z+6, r24	; 0x06
    173c:	08 95       	ret

0000173e <system_init>:
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	2e db       	rcall	.-2468   	; 0xda0 <sysclk_init>
    1744:	6b ea       	ldi	r22, 0xAB	; 171
    1746:	79 e2       	ldi	r23, 0x29	; 41
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	7a db       	rcall	.-2316   	; 0xe42 <__portable_avr_delay_cycles>
    174e:	78 94       	sei
    1750:	8c eb       	ldi	r24, 0xBC	; 188
    1752:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    1756:	87 e0       	ldi	r24, 0x07	; 7
    1758:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    175c:	d5 d9       	rcall	.-3158   	; 0xb08 <data_terminal_init>
    175e:	6b ea       	ldi	r22, 0xAB	; 171
    1760:	70 eb       	ldi	r23, 0xB0	; 176
    1762:	88 e2       	ldi	r24, 0x28	; 40
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	6d db       	rcall	.-2342   	; 0xe42 <__portable_avr_delay_cycles>
    1768:	6b ea       	ldi	r22, 0xAB	; 171
    176a:	79 e2       	ldi	r23, 0x29	; 41
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	68 db       	rcall	.-2352   	; 0xe42 <__portable_avr_delay_cycles>
    1772:	9c d9       	rcall	.-3272   	; 0xaac <spi_init>
    1774:	6b ea       	ldi	r22, 0xAB	; 171
    1776:	79 e2       	ldi	r23, 0x29	; 41
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	62 db       	rcall	.-2364   	; 0xe42 <__portable_avr_delay_cycles>
    177e:	6c db       	rcall	.-2344   	; 0xe58 <pressure_init>
    1780:	6b ea       	ldi	r22, 0xAB	; 171
    1782:	79 e2       	ldi	r23, 0x29	; 41
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	5c db       	rcall	.-2376   	; 0xe42 <__portable_avr_delay_cycles>
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	80 93 a3 0a 	sts	0x0AA3, r24	; 0x800aa3 <__TEXT_REGION_LENGTH__+0x700aa3>
    1790:	aa db       	rcall	.-2220   	; 0xee6 <gps_init>
    1792:	c7 df       	rcall	.-114    	; 0x1722 <clock_init>
    1794:	cb d8       	rcall	.-3690   	; 0x92c <cam_init>
    1796:	66 e5       	ldi	r22, 0x56	; 86
    1798:	70 ed       	ldi	r23, 0xD0	; 208
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	51 db       	rcall	.-2398   	; 0xe42 <__portable_avr_delay_cycles>
    17a0:	e9 de       	rcall	.-558    	; 0x1574 <state_check>
    17a2:	ab db       	rcall	.-2218   	; 0xefa <get_pressure>
    17a4:	60 93 2d 20 	sts	0x202D, r22	; 0x80202d <ground_p>
    17a8:	70 93 2e 20 	sts	0x202E, r23	; 0x80202e <ground_p+0x1>
    17ac:	80 93 2f 20 	sts	0x202F, r24	; 0x80202f <ground_p+0x2>
    17b0:	90 93 30 20 	sts	0x2030, r25	; 0x802030 <ground_p+0x3>
    17b4:	03 e3       	ldi	r16, 0x33	; 51
    17b6:	13 e1       	ldi	r17, 0x13	; 19
    17b8:	20 e9       	ldi	r18, 0x90	; 144
    17ba:	33 e4       	ldi	r19, 0x43	; 67
    17bc:	00 93 29 20 	sts	0x2029, r16	; 0x802029 <ground_t>
    17c0:	10 93 2a 20 	sts	0x202A, r17	; 0x80202a <ground_t+0x1>
    17c4:	20 93 2b 20 	sts	0x202B, r18	; 0x80202b <ground_t+0x2>
    17c8:	30 93 2c 20 	sts	0x202C, r19	; 0x80202c <ground_t+0x3>
    17cc:	3c dc       	rcall	.-1928   	; 0x1046 <get_altitude>
    17ce:	60 93 ff 20 	sts	0x20FF, r22	; 0x8020ff <ground_a>
    17d2:	70 93 00 21 	sts	0x2100, r23	; 0x802100 <ground_a+0x1>
    17d6:	80 93 01 21 	sts	0x2101, r24	; 0x802101 <ground_a+0x2>
    17da:	90 93 02 21 	sts	0x2102, r25	; 0x802102 <ground_a+0x3>
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	08 95       	ret

000017e4 <main>:
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	ce 56       	subi	r28, 0x6E	; 110
    17ee:	d1 09       	sbc	r29, r1
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	a4 df       	rcall	.-184    	; 0x173e <system_init>
    17f6:	66 e5       	ldi	r22, 0x56	; 86
    17f8:	73 e2       	ldi	r23, 0x23	; 35
    17fa:	88 e0       	ldi	r24, 0x08	; 8
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	21 db       	rcall	.-2494   	; 0xe42 <__portable_avr_delay_cycles>
    1800:	14 e1       	ldi	r17, 0x14	; 20
    1802:	be 01       	movw	r22, r28
    1804:	6f 5f       	subi	r22, 0xFF	; 255
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	fb 01       	movw	r30, r22
    180a:	81 2f       	mov	r24, r17
    180c:	11 92       	st	Z+, r1
    180e:	8a 95       	dec	r24
    1810:	e9 f7       	brne	.-6      	; 0x180c <main+0x28>
    1812:	4a e0       	ldi	r20, 0x0A	; 10
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	ce 01       	movw	r24, r28
    1818:	45 96       	adiw	r24, 0x15	; 21
    181a:	fb d9       	rcall	.-3082   	; 0xc12 <rb16_init>
    181c:	be 01       	movw	r22, r28
    181e:	63 5e       	subi	r22, 0xE3	; 227
    1820:	7f 4f       	sbci	r23, 0xFF	; 255
    1822:	88 e2       	ldi	r24, 0x28	; 40
    1824:	fb 01       	movw	r30, r22
    1826:	11 92       	st	Z+, r1
    1828:	8a 95       	dec	r24
    182a:	e9 f7       	brne	.-6      	; 0x1826 <main+0x42>
    182c:	4a e0       	ldi	r20, 0x0A	; 10
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	ce 01       	movw	r24, r28
    1832:	8b 5b       	subi	r24, 0xBB	; 187
    1834:	9f 4f       	sbci	r25, 0xFF	; 255
    1836:	75 da       	rcall	.-2838   	; 0xd22 <rb32_init>
    1838:	be 01       	movw	r22, r28
    183a:	63 5b       	subi	r22, 0xB3	; 179
    183c:	7f 4f       	sbci	r23, 0xFF	; 255
    183e:	fb 01       	movw	r30, r22
    1840:	11 92       	st	Z+, r1
    1842:	1a 95       	dec	r17
    1844:	e9 f7       	brne	.-6      	; 0x1840 <main+0x5c>
    1846:	4a e0       	ldi	r20, 0x0A	; 10
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	ce 01       	movw	r24, r28
    184c:	8f 59       	subi	r24, 0x9F	; 159
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	e0 d9       	rcall	.-3136   	; 0xc12 <rb16_init>
    1852:	af 96       	adiw	r28, 0x2f	; 47
    1854:	1f ae       	std	Y+63, r1	; 0x3f
    1856:	af 97       	sbiw	r28, 0x2f	; 47
    1858:	ae 96       	adiw	r28, 0x2e	; 46
    185a:	1f ae       	std	Y+63, r1	; 0x3f
    185c:	ae 97       	sbiw	r28, 0x2e	; 46
    185e:	0f 2e       	mov	r0, r31
    1860:	f2 e2       	ldi	r31, 0x22	; 34
    1862:	cf 2e       	mov	r12, r31
    1864:	f1 e2       	ldi	r31, 0x21	; 33
    1866:	df 2e       	mov	r13, r31
    1868:	f0 2d       	mov	r31, r0
    186a:	be 01       	movw	r22, r28
    186c:	6b 5b       	subi	r22, 0xBB	; 187
    186e:	7f 4f       	sbci	r23, 0xFF	; 255
    1870:	ce 01       	movw	r24, r28
    1872:	45 96       	adiw	r24, 0x15	; 21
    1874:	ff dd       	rcall	.-1026   	; 0x1474 <data_collect>
    1876:	7e de       	rcall	.-772    	; 0x1574 <state_check>
    1878:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <state>
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	41 f0       	breq	.+16     	; 0x1890 <main+0xac>
    1880:	08 f4       	brcc	.+2      	; 0x1884 <main+0xa0>
    1882:	58 c0       	rjmp	.+176    	; 0x1934 <main+0x150>
    1884:	82 30       	cpi	r24, 0x02	; 2
    1886:	01 f1       	breq	.+64     	; 0x18c8 <main+0xe4>
    1888:	83 30       	cpi	r24, 0x03	; 3
    188a:	09 f4       	brne	.+2      	; 0x188e <main+0xaa>
    188c:	47 c0       	rjmp	.+142    	; 0x191c <main+0x138>
    188e:	50 c0       	rjmp	.+160    	; 0x1930 <main+0x14c>
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	46 e1       	ldi	r20, 0x16	; 22
    1896:	54 e4       	ldi	r21, 0x44	; 68
    1898:	60 91 de 20 	lds	r22, 0x20DE	; 0x8020de <alt>
    189c:	70 91 df 20 	lds	r23, 0x20DF	; 0x8020df <alt+0x1>
    18a0:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <alt+0x2>
    18a4:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <alt+0x3>
    18a8:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__gesf2>
    18ac:	18 16       	cp	r1, r24
    18ae:	0c f0       	brlt	.+2      	; 0x18b2 <main+0xce>
    18b0:	41 c0       	rjmp	.+130    	; 0x1934 <main+0x150>
    18b2:	ae 96       	adiw	r28, 0x2e	; 46
    18b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    18b6:	ae 97       	sbiw	r28, 0x2e	; 46
    18b8:	f1 11       	cpse	r31, r1
    18ba:	3c c0       	rjmp	.+120    	; 0x1934 <main+0x150>
    18bc:	3d d8       	rcall	.-3974   	; 0x938 <cam_switch>
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	ae 96       	adiw	r28, 0x2e	; 46
    18c2:	8f af       	std	Y+63, r24	; 0x3f
    18c4:	ae 97       	sbiw	r28, 0x2e	; 46
    18c6:	36 c0       	rjmp	.+108    	; 0x1934 <main+0x150>
    18c8:	ae 96       	adiw	r28, 0x2e	; 46
    18ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    18cc:	ae 97       	sbiw	r28, 0x2e	; 46
    18ce:	91 11       	cpse	r25, r1
    18d0:	05 c0       	rjmp	.+10     	; 0x18dc <main+0xf8>
    18d2:	32 d8       	rcall	.-3996   	; 0x938 <cam_switch>
    18d4:	e1 e0       	ldi	r30, 0x01	; 1
    18d6:	ae 96       	adiw	r28, 0x2e	; 46
    18d8:	ef af       	std	Y+63, r30	; 0x3f
    18da:	ae 97       	sbiw	r28, 0x2e	; 46
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	41 ee       	ldi	r20, 0xE1	; 225
    18e2:	53 e4       	ldi	r21, 0x43	; 67
    18e4:	60 91 de 20 	lds	r22, 0x20DE	; 0x8020de <alt>
    18e8:	70 91 df 20 	lds	r23, 0x20DF	; 0x8020df <alt+0x1>
    18ec:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <alt+0x2>
    18f0:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <alt+0x3>
    18f4:	07 d6       	rcall	.+3086   	; 0x2504 <__subsf3>
    18f6:	11 d7       	rcall	.+3618   	; 0x271a <__fixsfsi>
    18f8:	67 5f       	subi	r22, 0xF7	; 247
    18fa:	7f 4f       	sbci	r23, 0xFF	; 255
    18fc:	63 31       	cpi	r22, 0x13	; 19
    18fe:	71 05       	cpc	r23, r1
    1900:	20 f4       	brcc	.+8      	; 0x190a <main+0x126>
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <released>
    1908:	10 d8       	rcall	.-4064   	; 0x92a <hall_sensor_init>
    190a:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <released>
    190e:	88 23       	and	r24, r24
    1910:	89 f0       	breq	.+34     	; 0x1934 <main+0x150>
    1912:	ce 01       	movw	r24, r28
    1914:	8f 59       	subi	r24, 0x9F	; 159
    1916:	9f 4f       	sbci	r25, 0xFF	; 255
    1918:	7d de       	rcall	.-774    	; 0x1614 <servo_pid>
    191a:	0c c0       	rjmp	.+24     	; 0x1934 <main+0x150>
    191c:	af 96       	adiw	r28, 0x2f	; 47
    191e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1920:	af 97       	sbiw	r28, 0x2f	; 47
    1922:	f1 11       	cpse	r31, r1
    1924:	07 c0       	rjmp	.+14     	; 0x1934 <main+0x150>
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	af 96       	adiw	r28, 0x2f	; 47
    192a:	8f af       	std	Y+63, r24	; 0x3f
    192c:	af 97       	sbiw	r28, 0x2f	; 47
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <main+0x150>
    1930:	10 92 05 21 	sts	0x2105, r1	; 0x802105 <state>
    1934:	e0 90 ea 20 	lds	r14, 0x20EA	; 0x8020ea <packets>
    1938:	f0 90 eb 20 	lds	r15, 0x20EB	; 0x8020eb <packets+0x1>
    193c:	9f ef       	ldi	r25, 0xFF	; 255
    193e:	e9 1a       	sub	r14, r25
    1940:	f9 0a       	sbc	r15, r25
    1942:	e0 92 ea 20 	sts	0x20EA, r14	; 0x8020ea <packets>
    1946:	f0 92 eb 20 	sts	0x20EB, r15	; 0x8020eb <packets+0x1>
    194a:	20 90 ec 20 	lds	r2, 0x20EC	; 0x8020ec <timer>
    194e:	30 90 ed 20 	lds	r3, 0x20ED	; 0x8020ed <timer+0x1>
    1952:	21 14       	cp	r2, r1
    1954:	31 04       	cpc	r3, r1
    1956:	41 f0       	breq	.+16     	; 0x1968 <main+0x184>
    1958:	c7 01       	movw	r24, r14
    195a:	b1 01       	movw	r22, r2
    195c:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__udivmodhi4>
    1960:	60 93 19 20 	sts	0x2019, r22	; 0x802019 <rate>
    1964:	70 93 1a 20 	sts	0x201A, r23	; 0x80201a <rate+0x1>
    1968:	60 91 c6 20 	lds	r22, 0x20C6	; 0x8020c6 <gps_alt>
    196c:	70 91 c7 20 	lds	r23, 0x20C7	; 0x8020c7 <gps_alt+0x1>
    1970:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <gps_alt+0x2>
    1974:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <gps_alt+0x3>
    1978:	d0 d6       	rcall	.+3488   	; 0x271a <__fixsfsi>
    197a:	16 2f       	mov	r17, r22
    197c:	07 2f       	mov	r16, r23
    197e:	80 90 ca 20 	lds	r8, 0x20CA	; 0x8020ca <gps_long>
    1982:	90 90 cb 20 	lds	r9, 0x20CB	; 0x8020cb <gps_long+0x1>
    1986:	a0 90 cc 20 	lds	r10, 0x20CC	; 0x8020cc <gps_long+0x2>
    198a:	b0 90 cd 20 	lds	r11, 0x20CD	; 0x8020cd <gps_long+0x3>
    198e:	40 90 ce 20 	lds	r4, 0x20CE	; 0x8020ce <gps_lat>
    1992:	50 90 cf 20 	lds	r5, 0x20CF	; 0x8020cf <gps_lat+0x1>
    1996:	60 90 d0 20 	lds	r6, 0x20D0	; 0x8020d0 <gps_lat+0x2>
    199a:	70 90 d1 20 	lds	r7, 0x20D1	; 0x8020d1 <gps_lat+0x3>
    199e:	60 91 d2 20 	lds	r22, 0x20D2	; 0x8020d2 <gps_t>
    19a2:	70 91 d3 20 	lds	r23, 0x20D3	; 0x8020d3 <gps_t+0x1>
    19a6:	80 91 d4 20 	lds	r24, 0x20D4	; 0x8020d4 <gps_t+0x2>
    19aa:	90 91 d5 20 	lds	r25, 0x20D5	; 0x8020d5 <gps_t+0x3>
    19ae:	b5 d6       	rcall	.+3434   	; 0x271a <__fixsfsi>
    19b0:	ad 96       	adiw	r28, 0x2d	; 45
    19b2:	6c af       	std	Y+60, r22	; 0x3c
    19b4:	7d af       	std	Y+61, r23	; 0x3d
    19b6:	8e af       	std	Y+62, r24	; 0x3e
    19b8:	9f af       	std	Y+63, r25	; 0x3f
    19ba:	ad 97       	sbiw	r28, 0x2d	; 45
    19bc:	1f 92       	push	r1
    19be:	1f 92       	push	r1
    19c0:	60 91 b4 20 	lds	r22, 0x20B4	; 0x8020b4 <__data_end>
    19c4:	70 91 b5 20 	lds	r23, 0x20B5	; 0x8020b5 <__data_end+0x1>
    19c8:	80 91 b6 20 	lds	r24, 0x20B6	; 0x8020b6 <__data_end+0x2>
    19cc:	90 91 b7 20 	lds	r25, 0x20B7	; 0x8020b7 <__data_end+0x3>
    19d0:	a4 d6       	rcall	.+3400   	; 0x271a <__fixsfsi>
    19d2:	7f 93       	push	r23
    19d4:	6f 93       	push	r22
    19d6:	80 91 05 21 	lds	r24, 0x2105	; 0x802105 <state>
    19da:	1f 92       	push	r1
    19dc:	8f 93       	push	r24
    19de:	60 91 b8 20 	lds	r22, 0x20B8	; 0x8020b8 <rpm>
    19e2:	70 91 b9 20 	lds	r23, 0x20B9	; 0x8020b9 <rpm+0x1>
    19e6:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <rpm+0x2>
    19ea:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <rpm+0x3>
    19ee:	95 d6       	rcall	.+3370   	; 0x271a <__fixsfsi>
    19f0:	7f 93       	push	r23
    19f2:	6f 93       	push	r22
    19f4:	60 91 bc 20 	lds	r22, 0x20BC	; 0x8020bc <roll>
    19f8:	70 91 bd 20 	lds	r23, 0x20BD	; 0x8020bd <roll+0x1>
    19fc:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <roll+0x2>
    1a00:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <roll+0x3>
    1a04:	8a d6       	rcall	.+3348   	; 0x271a <__fixsfsi>
    1a06:	7f 93       	push	r23
    1a08:	6f 93       	push	r22
    1a0a:	60 91 c0 20 	lds	r22, 0x20C0	; 0x8020c0 <pitch>
    1a0e:	70 91 c1 20 	lds	r23, 0x20C1	; 0x8020c1 <pitch+0x1>
    1a12:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <pitch+0x2>
    1a16:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <pitch+0x3>
    1a1a:	7f d6       	rcall	.+3326   	; 0x271a <__fixsfsi>
    1a1c:	7f 93       	push	r23
    1a1e:	6f 93       	push	r22
    1a20:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <gps_sats+0x1>
    1a24:	8f 93       	push	r24
    1a26:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <gps_sats>
    1a2a:	8f 93       	push	r24
    1a2c:	81 2f       	mov	r24, r17
    1a2e:	90 2f       	mov	r25, r16
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	9c 01       	movw	r18, r24
    1a36:	22 0f       	add	r18, r18
    1a38:	33 1f       	adc	r19, r19
    1a3a:	22 0f       	add	r18, r18
    1a3c:	33 1f       	adc	r19, r19
    1a3e:	82 0f       	add	r24, r18
    1a40:	93 1f       	adc	r25, r19
    1a42:	6a e0       	ldi	r22, 0x0A	; 10
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__divmodhi4>
    1a4a:	9f 93       	push	r25
    1a4c:	8f 93       	push	r24
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	34 e2       	ldi	r19, 0x24	; 36
    1a56:	44 e7       	ldi	r20, 0x74	; 116
    1a58:	59 e4       	ldi	r21, 0x49	; 73
    1a5a:	c5 01       	movw	r24, r10
    1a5c:	b4 01       	movw	r22, r8
    1a5e:	be d7       	rcall	.+3964   	; 0x29dc <__mulsf3>
    1a60:	5c d6       	rcall	.+3256   	; 0x271a <__fixsfsi>
    1a62:	20 e4       	ldi	r18, 0x40	; 64
    1a64:	32 e4       	ldi	r19, 0x42	; 66
    1a66:	4f e0       	ldi	r20, 0x0F	; 15
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__divmodsi4>
    1a6e:	9b 01       	movw	r18, r22
    1a70:	77 23       	and	r23, r23
    1a72:	24 f4       	brge	.+8      	; 0x1a7c <main+0x298>
    1a74:	22 27       	eor	r18, r18
    1a76:	33 27       	eor	r19, r19
    1a78:	26 1b       	sub	r18, r22
    1a7a:	37 0b       	sbc	r19, r23
    1a7c:	c9 01       	movw	r24, r18
    1a7e:	33 0f       	add	r19, r19
    1a80:	aa 0b       	sbc	r26, r26
    1a82:	bb 0b       	sbc	r27, r27
    1a84:	bf 93       	push	r27
    1a86:	af 93       	push	r26
    1a88:	9f 93       	push	r25
    1a8a:	8f 93       	push	r24
    1a8c:	c5 01       	movw	r24, r10
    1a8e:	b4 01       	movw	r22, r8
    1a90:	44 d6       	rcall	.+3208   	; 0x271a <__fixsfsi>
    1a92:	7f 93       	push	r23
    1a94:	6f 93       	push	r22
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	34 e2       	ldi	r19, 0x24	; 36
    1a9a:	44 e7       	ldi	r20, 0x74	; 116
    1a9c:	59 e4       	ldi	r21, 0x49	; 73
    1a9e:	c3 01       	movw	r24, r6
    1aa0:	b2 01       	movw	r22, r4
    1aa2:	9c d7       	rcall	.+3896   	; 0x29dc <__mulsf3>
    1aa4:	3a d6       	rcall	.+3188   	; 0x271a <__fixsfsi>
    1aa6:	20 e4       	ldi	r18, 0x40	; 64
    1aa8:	32 e4       	ldi	r19, 0x42	; 66
    1aaa:	4f e0       	ldi	r20, 0x0F	; 15
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__divmodsi4>
    1ab2:	9f 93       	push	r25
    1ab4:	8f 93       	push	r24
    1ab6:	7f 93       	push	r23
    1ab8:	6f 93       	push	r22
    1aba:	c3 01       	movw	r24, r6
    1abc:	b2 01       	movw	r22, r4
    1abe:	2d d6       	rcall	.+3162   	; 0x271a <__fixsfsi>
    1ac0:	7f 93       	push	r23
    1ac2:	6f 93       	push	r22
    1ac4:	ad 96       	adiw	r28, 0x2d	; 45
    1ac6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ac8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1aca:	8e ad       	ldd	r24, Y+62	; 0x3e
    1acc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ace:	ad 97       	sbiw	r28, 0x2d	; 45
    1ad0:	24 e6       	ldi	r18, 0x64	; 100
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__divmodsi4>
    1adc:	7f 93       	push	r23
    1ade:	6f 93       	push	r22
    1ae0:	ad 96       	adiw	r28, 0x2d	; 45
    1ae2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ae4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ae6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ae8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aea:	ad 97       	sbiw	r28, 0x2d	; 45
    1aec:	20 e1       	ldi	r18, 0x10	; 16
    1aee:	37 e2       	ldi	r19, 0x27	; 39
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__divmodsi4>
    1af8:	12 2f       	mov	r17, r18
    1afa:	03 2f       	mov	r16, r19
    1afc:	24 e6       	ldi	r18, 0x64	; 100
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__divmodsi4>
    1b08:	3f 93       	push	r19
    1b0a:	2f 93       	push	r18
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	60 91 da 20 	lds	r22, 0x20DA	; 0x8020da <volt>
    1b14:	70 91 db 20 	lds	r23, 0x20DB	; 0x8020db <volt+0x1>
    1b18:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <volt+0x2>
    1b1c:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <volt+0x3>
    1b20:	fc d5       	rcall	.+3064   	; 0x271a <__fixsfsi>
    1b22:	7f 93       	push	r23
    1b24:	6f 93       	push	r22
    1b26:	23 e3       	ldi	r18, 0x33	; 51
    1b28:	33 e9       	ldi	r19, 0x93	; 147
    1b2a:	48 e8       	ldi	r20, 0x88	; 136
    1b2c:	53 e4       	ldi	r21, 0x43	; 67
    1b2e:	60 91 e2 20 	lds	r22, 0x20E2	; 0x8020e2 <temp>
    1b32:	70 91 e3 20 	lds	r23, 0x20E3	; 0x8020e3 <temp+0x1>
    1b36:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <temp+0x2>
    1b3a:	90 91 e5 20 	lds	r25, 0x20E5	; 0x8020e5 <temp+0x3>
    1b3e:	e2 d4       	rcall	.+2500   	; 0x2504 <__subsf3>
    1b40:	ec d5       	rcall	.+3032   	; 0x271a <__fixsfsi>
    1b42:	7f 93       	push	r23
    1b44:	6f 93       	push	r22
    1b46:	60 91 e6 20 	lds	r22, 0x20E6	; 0x8020e6 <press>
    1b4a:	70 91 e7 20 	lds	r23, 0x20E7	; 0x8020e7 <press+0x1>
    1b4e:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <press+0x2>
    1b52:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <press+0x3>
    1b56:	e1 d5       	rcall	.+3010   	; 0x271a <__fixsfsi>
    1b58:	9f 93       	push	r25
    1b5a:	8f 93       	push	r24
    1b5c:	7f 93       	push	r23
    1b5e:	6f 93       	push	r22
    1b60:	60 91 de 20 	lds	r22, 0x20DE	; 0x8020de <alt>
    1b64:	70 91 df 20 	lds	r23, 0x20DF	; 0x8020df <alt+0x1>
    1b68:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <alt+0x2>
    1b6c:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <alt+0x3>
    1b70:	d4 d5       	rcall	.+2984   	; 0x271a <__fixsfsi>
    1b72:	7f 93       	push	r23
    1b74:	6f 93       	push	r22
    1b76:	ff 92       	push	r15
    1b78:	ef 92       	push	r14
    1b7a:	3f 92       	push	r3
    1b7c:	2f 92       	push	r2
    1b7e:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <format+0x1>
    1b82:	8f 93       	push	r24
    1b84:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <format>
    1b88:	8f 93       	push	r24
    1b8a:	df 92       	push	r13
    1b8c:	cf 92       	push	r12
    1b8e:	0e 94 98 17 	call	0x2f30	; 0x2f30 <sprintf>
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	df 92       	push	r13
    1b98:	cf 92       	push	r12
    1b9a:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <printf>
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	63 ce       	rjmp	.-826    	; 0x186a <main+0x86>

00001ba4 <reset>:
    1ba4:	10 92 e6 20 	sts	0x20E6, r1	; 0x8020e6 <press>
    1ba8:	10 92 e7 20 	sts	0x20E7, r1	; 0x8020e7 <press+0x1>
    1bac:	10 92 e8 20 	sts	0x20E8, r1	; 0x8020e8 <press+0x2>
    1bb0:	10 92 e9 20 	sts	0x20E9, r1	; 0x8020e9 <press+0x3>
    1bb4:	10 92 e2 20 	sts	0x20E2, r1	; 0x8020e2 <temp>
    1bb8:	10 92 e3 20 	sts	0x20E3, r1	; 0x8020e3 <temp+0x1>
    1bbc:	10 92 e4 20 	sts	0x20E4, r1	; 0x8020e4 <temp+0x2>
    1bc0:	10 92 e5 20 	sts	0x20E5, r1	; 0x8020e5 <temp+0x3>
    1bc4:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <alt>
    1bc8:	10 92 df 20 	sts	0x20DF, r1	; 0x8020df <alt+0x1>
    1bcc:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <alt+0x2>
    1bd0:	10 92 e1 20 	sts	0x20E1, r1	; 0x8020e1 <alt+0x3>
    1bd4:	10 92 da 20 	sts	0x20DA, r1	; 0x8020da <volt>
    1bd8:	10 92 db 20 	sts	0x20DB, r1	; 0x8020db <volt+0x1>
    1bdc:	10 92 dc 20 	sts	0x20DC, r1	; 0x8020dc <volt+0x2>
    1be0:	10 92 dd 20 	sts	0x20DD, r1	; 0x8020dd <volt+0x3>
    1be4:	10 92 d6 20 	sts	0x20D6, r1	; 0x8020d6 <velocity>
    1be8:	10 92 d7 20 	sts	0x20D7, r1	; 0x8020d7 <velocity+0x1>
    1bec:	10 92 d8 20 	sts	0x20D8, r1	; 0x8020d8 <velocity+0x2>
    1bf0:	10 92 d9 20 	sts	0x20D9, r1	; 0x8020d9 <velocity+0x3>
    1bf4:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <gps_t>
    1bf8:	10 92 d3 20 	sts	0x20D3, r1	; 0x8020d3 <gps_t+0x1>
    1bfc:	10 92 d4 20 	sts	0x20D4, r1	; 0x8020d4 <gps_t+0x2>
    1c00:	10 92 d5 20 	sts	0x20D5, r1	; 0x8020d5 <gps_t+0x3>
    1c04:	10 92 ce 20 	sts	0x20CE, r1	; 0x8020ce <gps_lat>
    1c08:	10 92 cf 20 	sts	0x20CF, r1	; 0x8020cf <gps_lat+0x1>
    1c0c:	10 92 d0 20 	sts	0x20D0, r1	; 0x8020d0 <gps_lat+0x2>
    1c10:	10 92 d1 20 	sts	0x20D1, r1	; 0x8020d1 <gps_lat+0x3>
    1c14:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <gps_long>
    1c18:	10 92 cb 20 	sts	0x20CB, r1	; 0x8020cb <gps_long+0x1>
    1c1c:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <gps_long+0x2>
    1c20:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <gps_long+0x3>
    1c24:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <gps_alt>
    1c28:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <gps_alt+0x1>
    1c2c:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <gps_alt+0x2>
    1c30:	10 92 c9 20 	sts	0x20C9, r1	; 0x8020c9 <gps_alt+0x3>
    1c34:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <gps_sats>
    1c38:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <gps_sats+0x1>
    1c3c:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <pitch>
    1c40:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <pitch+0x1>
    1c44:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <pitch+0x2>
    1c48:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <pitch+0x3>
    1c4c:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <roll>
    1c50:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <roll+0x1>
    1c54:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <roll+0x2>
    1c58:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <roll+0x3>
    1c5c:	10 92 b8 20 	sts	0x20B8, r1	; 0x8020b8 <rpm>
    1c60:	10 92 b9 20 	sts	0x20B9, r1	; 0x8020b9 <rpm+0x1>
    1c64:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <rpm+0x2>
    1c68:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <rpm+0x3>
    1c6c:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <__data_end>
    1c70:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <__data_end+0x1>
    1c74:	10 92 b6 20 	sts	0x20B6, r1	; 0x8020b6 <__data_end+0x2>
    1c78:	10 92 b7 20 	sts	0x20B7, r1	; 0x8020b7 <__data_end+0x3>
    1c7c:	10 92 05 21 	sts	0x2105, r1	; 0x802105 <state>
    1c80:	10 92 04 21 	sts	0x2104, r1	; 0x802104 <released>
    1c84:	5c dd       	rcall	.-1352   	; 0x173e <system_init>
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	80 93 03 21 	sts	0x2103, r24	; 0x802103 <reset_received>
    1c8c:	08 95       	ret

00001c8e <cali_alt>:
    1c8e:	80 91 e6 20 	lds	r24, 0x20E6	; 0x8020e6 <press>
    1c92:	90 91 e7 20 	lds	r25, 0x20E7	; 0x8020e7 <press+0x1>
    1c96:	a0 91 e8 20 	lds	r26, 0x20E8	; 0x8020e8 <press+0x2>
    1c9a:	b0 91 e9 20 	lds	r27, 0x20E9	; 0x8020e9 <press+0x3>
    1c9e:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <ground_p>
    1ca2:	90 93 2e 20 	sts	0x202E, r25	; 0x80202e <ground_p+0x1>
    1ca6:	a0 93 2f 20 	sts	0x202F, r26	; 0x80202f <ground_p+0x2>
    1caa:	b0 93 30 20 	sts	0x2030, r27	; 0x802030 <ground_p+0x3>
    1cae:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <alt>
    1cb2:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <alt+0x1>
    1cb6:	a0 91 e0 20 	lds	r26, 0x20E0	; 0x8020e0 <alt+0x2>
    1cba:	b0 91 e1 20 	lds	r27, 0x20E1	; 0x8020e1 <alt+0x3>
    1cbe:	80 93 ff 20 	sts	0x20FF, r24	; 0x8020ff <ground_a>
    1cc2:	90 93 00 21 	sts	0x2100, r25	; 0x802100 <ground_a+0x1>
    1cc6:	a0 93 01 21 	sts	0x2101, r26	; 0x802101 <ground_a+0x2>
    1cca:	b0 93 02 21 	sts	0x2102, r27	; 0x802102 <ground_a+0x3>
    1cce:	83 e3       	ldi	r24, 0x33	; 51
    1cd0:	93 e1       	ldi	r25, 0x13	; 19
    1cd2:	a0 e9       	ldi	r26, 0x90	; 144
    1cd4:	b3 e4       	ldi	r27, 0x43	; 67
    1cd6:	80 93 29 20 	sts	0x2029, r24	; 0x802029 <ground_t>
    1cda:	90 93 2a 20 	sts	0x202A, r25	; 0x80202a <ground_t+0x1>
    1cde:	a0 93 2b 20 	sts	0x202B, r26	; 0x80202b <ground_t+0x2>
    1ce2:	b0 93 2c 20 	sts	0x202C, r27	; 0x80202c <ground_t+0x3>
    1ce6:	08 95       	ret

00001ce8 <send_gps>:
    1ce8:	8f 92       	push	r8
    1cea:	9f 92       	push	r9
    1cec:	af 92       	push	r10
    1cee:	bf 92       	push	r11
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	c6 54       	subi	r28, 0x46	; 70
    1d06:	d1 09       	sbc	r29, r1
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	60 91 ca 20 	lds	r22, 0x20CA	; 0x8020ca <gps_long>
    1d10:	70 91 cb 20 	lds	r23, 0x20CB	; 0x8020cb <gps_long+0x1>
    1d14:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <gps_long+0x2>
    1d18:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <gps_long+0x3>
    1d1c:	fe d4       	rcall	.+2556   	; 0x271a <__fixsfsi>
    1d1e:	16 2f       	mov	r17, r22
    1d20:	07 2f       	mov	r16, r23
    1d22:	c0 90 ce 20 	lds	r12, 0x20CE	; 0x8020ce <gps_lat>
    1d26:	d0 90 cf 20 	lds	r13, 0x20CF	; 0x8020cf <gps_lat+0x1>
    1d2a:	e0 90 d0 20 	lds	r14, 0x20D0	; 0x8020d0 <gps_lat+0x2>
    1d2e:	f0 90 d1 20 	lds	r15, 0x20D1	; 0x8020d1 <gps_lat+0x3>
    1d32:	a6 2f       	mov	r26, r22
    1d34:	b7 2f       	mov	r27, r23
    1d36:	bb 23       	and	r27, r27
    1d38:	1c f4       	brge	.+6      	; 0x1d40 <send_gps+0x58>
    1d3a:	b1 95       	neg	r27
    1d3c:	a1 95       	neg	r26
    1d3e:	b1 09       	sbc	r27, r1
    1d40:	20 e4       	ldi	r18, 0x40	; 64
    1d42:	32 e4       	ldi	r19, 0x42	; 66
    1d44:	4f e0       	ldi	r20, 0x0F	; 15
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__mulshisi3>
    1d4c:	0f 2e       	mov	r0, r31
    1d4e:	f0 e4       	ldi	r31, 0x40	; 64
    1d50:	8f 2e       	mov	r8, r31
    1d52:	f2 e4       	ldi	r31, 0x42	; 66
    1d54:	9f 2e       	mov	r9, r31
    1d56:	ff e0       	ldi	r31, 0x0F	; 15
    1d58:	af 2e       	mov	r10, r31
    1d5a:	b1 2c       	mov	r11, r1
    1d5c:	f0 2d       	mov	r31, r0
    1d5e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__divmodsi4>
    1d62:	9f 93       	push	r25
    1d64:	8f 93       	push	r24
    1d66:	7f 93       	push	r23
    1d68:	6f 93       	push	r22
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	34 e2       	ldi	r19, 0x24	; 36
    1d72:	44 e7       	ldi	r20, 0x74	; 116
    1d74:	59 e4       	ldi	r21, 0x49	; 73
    1d76:	c7 01       	movw	r24, r14
    1d78:	b6 01       	movw	r22, r12
    1d7a:	30 d6       	rcall	.+3168   	; 0x29dc <__mulsf3>
    1d7c:	ce d4       	rcall	.+2460   	; 0x271a <__fixsfsi>
    1d7e:	a5 01       	movw	r20, r10
    1d80:	94 01       	movw	r18, r8
    1d82:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__divmodsi4>
    1d86:	9f 93       	push	r25
    1d88:	8f 93       	push	r24
    1d8a:	7f 93       	push	r23
    1d8c:	6f 93       	push	r22
    1d8e:	c7 01       	movw	r24, r14
    1d90:	b6 01       	movw	r22, r12
    1d92:	c3 d4       	rcall	.+2438   	; 0x271a <__fixsfsi>
    1d94:	7f 93       	push	r23
    1d96:	6f 93       	push	r22
    1d98:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <gps_msg+0x1>
    1d9c:	8f 93       	push	r24
    1d9e:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <gps_msg>
    1da2:	8f 93       	push	r24
    1da4:	8e 01       	movw	r16, r28
    1da6:	0f 5f       	subi	r16, 0xFF	; 255
    1da8:	1f 4f       	sbci	r17, 0xFF	; 255
    1daa:	1f 93       	push	r17
    1dac:	0f 93       	push	r16
    1dae:	0e 94 98 17 	call	0x2f30	; 0x2f30 <sprintf>
    1db2:	1f 93       	push	r17
    1db4:	0f 93       	push	r16
    1db6:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <printf>
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	ca 5b       	subi	r28, 0xBA	; 186
    1dc0:	df 4f       	sbci	r29, 0xFF	; 255
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	bf 90       	pop	r11
    1dd8:	af 90       	pop	r10
    1dda:	9f 90       	pop	r9
    1ddc:	8f 90       	pop	r8
    1dde:	08 95       	ret

00001de0 <packet>:
    1de0:	82 e2       	ldi	r24, 0x22	; 34
    1de2:	91 e2       	ldi	r25, 0x21	; 33
    1de4:	9f 93       	push	r25
    1de6:	8f 93       	push	r24
    1de8:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <printf>
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	08 95       	ret

00001df2 <xbee_command>:
    1df2:	84 36       	cpi	r24, 0x64	; 100
    1df4:	91 f0       	breq	.+36     	; 0x1e1a <xbee_command+0x28>
    1df6:	28 f4       	brcc	.+10     	; 0x1e02 <xbee_command+0x10>
    1df8:	81 36       	cpi	r24, 0x61	; 97
    1dfa:	69 f0       	breq	.+26     	; 0x1e16 <xbee_command+0x24>
    1dfc:	83 36       	cpi	r24, 0x63	; 99
    1dfe:	49 f0       	breq	.+18     	; 0x1e12 <xbee_command+0x20>
    1e00:	08 95       	ret
    1e02:	85 36       	cpi	r24, 0x65	; 101
    1e04:	21 f0       	breq	.+8      	; 0x1e0e <xbee_command+0x1c>
    1e06:	86 36       	cpi	r24, 0x66	; 102
    1e08:	49 f4       	brne	.+18     	; 0x1e1c <xbee_command+0x2a>
    1e0a:	cc ce       	rjmp	.-616    	; 0x1ba4 <reset>
    1e0c:	08 95       	ret
    1e0e:	3f cf       	rjmp	.-386    	; 0x1c8e <cali_alt>
    1e10:	08 95       	ret
    1e12:	3d cf       	rjmp	.-390    	; 0x1c8e <cali_alt>
    1e14:	08 95       	ret
    1e16:	68 cf       	rjmp	.-304    	; 0x1ce8 <send_gps>
    1e18:	08 95       	ret
    1e1a:	e2 cf       	rjmp	.-60     	; 0x1de0 <packet>
    1e1c:	08 95       	ret

00001e1e <__vector_47>:

ISR(TCE0_OVF_vect){
    1e1e:	1f 92       	push	r1
    1e20:	0f 92       	push	r0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	0f 92       	push	r0
    1e26:	11 24       	eor	r1, r1
    1e28:	08 b6       	in	r0, 0x38	; 56
    1e2a:	0f 92       	push	r0
    1e2c:	18 be       	out	0x38, r1	; 56
    1e2e:	09 b6       	in	r0, 0x39	; 57
    1e30:	0f 92       	push	r0
    1e32:	19 be       	out	0x39, r1	; 57
    1e34:	0b b6       	in	r0, 0x3b	; 59
    1e36:	0f 92       	push	r0
    1e38:	1b be       	out	0x3b, r1	; 59
    1e3a:	2f 93       	push	r18
    1e3c:	3f 93       	push	r19
    1e3e:	4f 93       	push	r20
    1e40:	5f 93       	push	r21
    1e42:	6f 93       	push	r22
    1e44:	7f 93       	push	r23
    1e46:	8f 93       	push	r24
    1e48:	9f 93       	push	r25
    1e4a:	af 93       	push	r26
    1e4c:	bf 93       	push	r27
    1e4e:	ef 93       	push	r30
    1e50:	ff 93       	push	r31
	timer++;
    1e52:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <timer>
    1e56:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <timer+0x1>
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	80 93 ec 20 	sts	0x20EC, r24	; 0x8020ec <timer>
    1e60:	90 93 ed 20 	sts	0x20ED, r25	; 0x8020ed <timer+0x1>
	printf(str);
    1e64:	82 e2       	ldi	r24, 0x22	; 34
    1e66:	91 e2       	ldi	r25, 0x21	; 33
    1e68:	9f 93       	push	r25
    1e6a:	8f 93       	push	r24
    1e6c:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <printf>
	//XBEE_spi_write(str);
}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	ff 91       	pop	r31
    1e76:	ef 91       	pop	r30
    1e78:	bf 91       	pop	r27
    1e7a:	af 91       	pop	r26
    1e7c:	9f 91       	pop	r25
    1e7e:	8f 91       	pop	r24
    1e80:	7f 91       	pop	r23
    1e82:	6f 91       	pop	r22
    1e84:	5f 91       	pop	r21
    1e86:	4f 91       	pop	r20
    1e88:	3f 91       	pop	r19
    1e8a:	2f 91       	pop	r18
    1e8c:	0f 90       	pop	r0
    1e8e:	0b be       	out	0x3b, r0	; 59
    1e90:	0f 90       	pop	r0
    1e92:	09 be       	out	0x39, r0	; 57
    1e94:	0f 90       	pop	r0
    1e96:	08 be       	out	0x38, r0	; 56
    1e98:	0f 90       	pop	r0
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	0f 90       	pop	r0
    1e9e:	1f 90       	pop	r1
    1ea0:	18 95       	reti

00001ea2 <__vector_58>:

ISR(USARTE0_RXC_vect){
    1ea2:	1f 92       	push	r1
    1ea4:	0f 92       	push	r0
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	0f 92       	push	r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	08 b6       	in	r0, 0x38	; 56
    1eae:	0f 92       	push	r0
    1eb0:	18 be       	out	0x38, r1	; 56
    1eb2:	09 b6       	in	r0, 0x39	; 57
    1eb4:	0f 92       	push	r0
    1eb6:	19 be       	out	0x39, r1	; 57
    1eb8:	0b b6       	in	r0, 0x3b	; 59
    1eba:	0f 92       	push	r0
    1ebc:	1b be       	out	0x3b, r1	; 59
    1ebe:	2f 93       	push	r18
    1ec0:	3f 93       	push	r19
    1ec2:	4f 93       	push	r20
    1ec4:	5f 93       	push	r21
    1ec6:	6f 93       	push	r22
    1ec8:	7f 93       	push	r23
    1eca:	8f 93       	push	r24
    1ecc:	9f 93       	push	r25
    1ece:	af 93       	push	r26
    1ed0:	bf 93       	push	r27
    1ed2:	ef 93       	push	r30
    1ed4:	ff 93       	push	r31
	uint8_t c = usart_getchar(UART_TERMINAL_SERIAL);
    1ed6:	80 ea       	ldi	r24, 0xA0	; 160
    1ed8:	9a e0       	ldi	r25, 0x0A	; 10
    1eda:	0e 94 93 02 	call	0x526	; 0x526 <usart_getchar>
	//printf("%c\n", c);
	xbee_command(c);
    1ede:	89 df       	rcall	.-238    	; 0x1df2 <xbee_command>
}
    1ee0:	ff 91       	pop	r31
    1ee2:	ef 91       	pop	r30
    1ee4:	bf 91       	pop	r27
    1ee6:	af 91       	pop	r26
    1ee8:	9f 91       	pop	r25
    1eea:	8f 91       	pop	r24
    1eec:	7f 91       	pop	r23
    1eee:	6f 91       	pop	r22
    1ef0:	5f 91       	pop	r21
    1ef2:	4f 91       	pop	r20
    1ef4:	3f 91       	pop	r19
    1ef6:	2f 91       	pop	r18
    1ef8:	0f 90       	pop	r0
    1efa:	0b be       	out	0x3b, r0	; 59
    1efc:	0f 90       	pop	r0
    1efe:	09 be       	out	0x39, r0	; 57
    1f00:	0f 90       	pop	r0
    1f02:	08 be       	out	0x38, r0	; 56
    1f04:	0f 90       	pop	r0
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	0f 90       	pop	r0
    1f0a:	1f 90       	pop	r1
    1f0c:	18 95       	reti

00001f0e <__vector_91>:


// GPS recording
ISR(USARTD1_RXC_vect){
    1f0e:	1f 92       	push	r1
    1f10:	0f 92       	push	r0
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	0f 92       	push	r0
    1f16:	11 24       	eor	r1, r1
    1f18:	08 b6       	in	r0, 0x38	; 56
    1f1a:	0f 92       	push	r0
    1f1c:	18 be       	out	0x38, r1	; 56
    1f1e:	09 b6       	in	r0, 0x39	; 57
    1f20:	0f 92       	push	r0
    1f22:	19 be       	out	0x39, r1	; 57
    1f24:	0a b6       	in	r0, 0x3a	; 58
    1f26:	0f 92       	push	r0
    1f28:	1a be       	out	0x3a, r1	; 58
    1f2a:	0b b6       	in	r0, 0x3b	; 59
    1f2c:	0f 92       	push	r0
    1f2e:	1b be       	out	0x3b, r1	; 59
    1f30:	8f 92       	push	r8
    1f32:	9f 92       	push	r9
    1f34:	af 92       	push	r10
    1f36:	bf 92       	push	r11
    1f38:	cf 92       	push	r12
    1f3a:	df 92       	push	r13
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	1f 93       	push	r17
    1f42:	2f 93       	push	r18
    1f44:	3f 93       	push	r19
    1f46:	4f 93       	push	r20
    1f48:	5f 93       	push	r21
    1f4a:	6f 93       	push	r22
    1f4c:	7f 93       	push	r23
    1f4e:	8f 93       	push	r24
    1f50:	9f 93       	push	r25
    1f52:	af 93       	push	r26
    1f54:	bf 93       	push	r27
    1f56:	ef 93       	push	r30
    1f58:	ff 93       	push	r31
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <__vector_91+0x52>
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <__vector_91+0x54>
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = usart_getchar(GPS_TERMINAL_SERIAL);
    1f66:	80 eb       	ldi	r24, 0xB0	; 176
    1f68:	99 e0       	ldi	r25, 0x09	; 9
    1f6a:	0e 94 93 02 	call	0x526	; 0x526 <usart_getchar>
    1f6e:	18 2f       	mov	r17, r24
	//printf("%c",c);
	
	if(c == (uint8_t) '$'){
    1f70:	84 32       	cpi	r24, 0x24	; 36
    1f72:	49 f4       	brne	.+18     	; 0x1f86 <__vector_91+0x78>
		writing = 1;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	80 93 f2 20 	sts	0x20F2, r24	; 0x8020f2 <writing>
		pos = 0;
		word_pos = 0;
    1f7a:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <word_pos>
		commas = 0;
    1f7e:	10 92 ef 20 	sts	0x20EF, r1	; 0x8020ef <commas>
			}
		}
	}
		
	if(writing){
		switch(pos){
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	68 c2       	rjmp	.+1232   	; 0x2456 <__vector_91+0x548>
		writing = 1;
		pos = 0;
		word_pos = 0;
		commas = 0;
	}
	else if(c == (uint8_t) '*'){
    1f86:	8a 32       	cpi	r24, 0x2A	; 42
    1f88:	29 f4       	brne	.+10     	; 0x1f94 <__vector_91+0x86>
		commas = 0;
    1f8a:	10 92 ef 20 	sts	0x20EF, r1	; 0x8020ef <commas>
		writing = 0;
    1f8e:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <writing>
    1f92:	91 c2       	rjmp	.+1314   	; 0x24b6 <__vector_91+0x5a8>
	}
	else if(c == (uint8_t) ','){
    1f94:	8c 32       	cpi	r24, 0x2C	; 44
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <__vector_91+0x8c>
    1f98:	49 c2       	rjmp	.+1170   	; 0x242c <__vector_91+0x51e>
		gps[0] = 32;
    1f9a:	ee e0       	ldi	r30, 0x0E	; 14
    1f9c:	f1 e2       	ldi	r31, 0x21	; 33
    1f9e:	80 e2       	ldi	r24, 0x20	; 32
    1fa0:	80 83       	st	Z, r24
		if(gps[1] == 32){
    1fa2:	81 81       	ldd	r24, Z+1	; 0x01
    1fa4:	80 32       	cpi	r24, 0x20	; 32
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <__vector_91+0x9c>
    1fa8:	6d c2       	rjmp	.+1242   	; 0x2484 <__vector_91+0x576>
			gps[0] = '0';
    1faa:	80 e3       	ldi	r24, 0x30	; 48
    1fac:	80 93 0e 21 	sts	0x210E, r24	; 0x80210e <gps>
    1fb0:	69 c2       	rjmp	.+1234   	; 0x2484 <__vector_91+0x576>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1fb2:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <gps>
    1fb6:	8e 32       	cpi	r24, 0x2E	; 46
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <__vector_91+0xae>
    1fba:	9e c1       	rjmp	.+828    	; 0x22f8 <__vector_91+0x3ea>
    1fbc:	a4 c1       	rjmp	.+840    	; 0x2306 <__vector_91+0x3f8>
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1fbe:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <gps>
    1fc2:	8e 32       	cpi	r24, 0x2E	; 46
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <__vector_91+0xba>
    1fc6:	ec c0       	rjmp	.+472    	; 0x21a0 <__vector_91+0x292>
    1fc8:	f2 c0       	rjmp	.+484    	; 0x21ae <__vector_91+0x2a0>
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1fca:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <gps>
    1fce:	8e 32       	cpi	r24, 0x2E	; 46
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <__vector_91+0xc6>
    1fd2:	51 c0       	rjmp	.+162    	; 0x2076 <__vector_91+0x168>
    1fd4:	57 c0       	rjmp	.+174    	; 0x2084 <__vector_91+0x176>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    1fd6:	91 91       	ld	r25, Z+
    1fd8:	9e 32       	cpi	r25, 0x2E	; 46
    1fda:	29 f4       	brne	.+10     	; 0x1fe6 <__vector_91+0xd8>
    1fdc:	01 c0       	rjmp	.+2      	; 0x1fe0 <__vector_91+0xd2>
    1fde:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    1fe0:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <idx>
						break;
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <__vector_91+0xde>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    1fe6:	8f 5f       	subi	r24, 0xFF	; 255
    1fe8:	8f 30       	cpi	r24, 0x0F	; 15
    1fea:	a9 f7       	brne	.-22     	; 0x1fd6 <__vector_91+0xc8>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    1fec:	20 91 ee 20 	lds	r18, 0x20EE	; 0x8020ee <idx>
    1ff0:	e2 2f       	mov	r30, r18
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	e2 5f       	subi	r30, 0xF2	; 242
    1ff6:	fe 4d       	sbci	r31, 0xDE	; 222
    1ff8:	80 e2       	ldi	r24, 0x20	; 32
    1ffa:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    1ffc:	2f 5f       	subi	r18, 0xFF	; 255
    1ffe:	2f 30       	cpi	r18, 0x0F	; 15
    2000:	c8 f4       	brcc	.+50     	; 0x2034 <__vector_91+0x126>
					if(gps[i] == 32){
    2002:	82 2f       	mov	r24, r18
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	fc 01       	movw	r30, r24
    2008:	e2 5f       	subi	r30, 0xF2	; 242
    200a:	fe 4d       	sbci	r31, 0xDE	; 222
    200c:	30 81       	ld	r19, Z
    200e:	30 32       	cpi	r19, 0x20	; 32
    2010:	89 f0       	breq	.+34     	; 0x2034 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    2012:	40 e2       	ldi	r20, 0x20	; 32
    2014:	08 c0       	rjmp	.+16     	; 0x2026 <__vector_91+0x118>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2016:	82 2f       	mov	r24, r18
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	fc 01       	movw	r30, r24
    201c:	e2 5f       	subi	r30, 0xF2	; 242
    201e:	fe 4d       	sbci	r31, 0xDE	; 222
    2020:	30 81       	ld	r19, Z
    2022:	30 32       	cpi	r19, 0x20	; 32
    2024:	39 f0       	breq	.+14     	; 0x2034 <__vector_91+0x126>
						break;
					}
					gps[i] = 32;
    2026:	fc 01       	movw	r30, r24
    2028:	e2 5f       	subi	r30, 0xF2	; 242
    202a:	fe 4d       	sbci	r31, 0xDE	; 222
    202c:	40 83       	st	Z, r20
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    202e:	2f 5f       	subi	r18, 0xFF	; 255
    2030:	2f 30       	cpi	r18, 0x0F	; 15
    2032:	89 f7       	brne	.-30     	; 0x2016 <__vector_91+0x108>
					if(gps[i] == 32){
						break;
					}
					gps[i] = 32;
				}
				sscanf(gps,"%ld",&val);
    2034:	ce 01       	movw	r24, r28
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	9f 93       	push	r25
    203a:	8f 93       	push	r24
    203c:	8c ea       	ldi	r24, 0xAC	; 172
    203e:	90 e2       	ldi	r25, 0x20	; 32
    2040:	9f 93       	push	r25
    2042:	8f 93       	push	r24
    2044:	8e e0       	ldi	r24, 0x0E	; 14
    2046:	91 e2       	ldi	r25, 0x21	; 33
    2048:	9f 93       	push	r25
    204a:	8f 93       	push	r24
    204c:	99 d7       	rcall	.+3890   	; 0x2f80 <sscanf>
				gps_t = (double) val;
    204e:	69 81       	ldd	r22, Y+1	; 0x01
    2050:	7a 81       	ldd	r23, Y+2	; 0x02
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	94 d3       	rcall	.+1832   	; 0x2780 <__floatsisf>
    2058:	60 93 d2 20 	sts	0x20D2, r22	; 0x8020d2 <gps_t>
    205c:	70 93 d3 20 	sts	0x20D3, r23	; 0x8020d3 <gps_t+0x1>
    2060:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <gps_t+0x2>
    2064:	90 93 d5 20 	sts	0x20D5, r25	; 0x8020d5 <gps_t+0x3>
				break;
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	bd c1       	rjmp	.+890    	; 0x23f0 <__vector_91+0x4e2>
    2076:	ef e0       	ldi	r30, 0x0F	; 15
    2078:	f1 e2       	ldi	r31, 0x21	; 33
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    207a:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    207c:	91 91       	ld	r25, Z+
    207e:	9e 32       	cpi	r25, 0x2E	; 46
    2080:	29 f4       	brne	.+10     	; 0x208c <__vector_91+0x17e>
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <__vector_91+0x178>
    2084:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    2086:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <idx>
						break;
    208a:	03 c0       	rjmp	.+6      	; 0x2092 <__vector_91+0x184>
				}
				sscanf(gps,"%ld",&val);
				gps_t = (double) val;
				break;
			case 2:			//Latitude
				for(uint8_t i = 0; i < 15; i++){
    208c:	8f 5f       	subi	r24, 0xFF	; 255
    208e:	8f 30       	cpi	r24, 0x0F	; 15
    2090:	a9 f7       	brne	.-22     	; 0x207c <__vector_91+0x16e>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2092:	20 91 ee 20 	lds	r18, 0x20EE	; 0x8020ee <idx>
    2096:	42 2f       	mov	r20, r18
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	fa 01       	movw	r30, r20
    209c:	e2 5f       	subi	r30, 0xF2	; 242
    209e:	fe 4d       	sbci	r31, 0xDE	; 222
    20a0:	80 e2       	ldi	r24, 0x20	; 32
    20a2:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    20a4:	2f 5f       	subi	r18, 0xFF	; 255
    20a6:	2f 30       	cpi	r18, 0x0F	; 15
    20a8:	f8 f4       	brcc	.+62     	; 0x20e8 <__vector_91+0x1da>
					if(gps[i] == 32){
    20aa:	82 2f       	mov	r24, r18
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	fc 01       	movw	r30, r24
    20b0:	e2 5f       	subi	r30, 0xF2	; 242
    20b2:	fe 4d       	sbci	r31, 0xDE	; 222
    20b4:	30 81       	ld	r19, Z
    20b6:	30 32       	cpi	r19, 0x20	; 32
    20b8:	b9 f0       	breq	.+46     	; 0x20e8 <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    20ba:	60 e2       	ldi	r22, 0x20	; 32
    20bc:	08 c0       	rjmp	.+16     	; 0x20ce <__vector_91+0x1c0>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    20be:	82 2f       	mov	r24, r18
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	fc 01       	movw	r30, r24
    20c4:	e2 5f       	subi	r30, 0xF2	; 242
    20c6:	fe 4d       	sbci	r31, 0xDE	; 222
    20c8:	30 81       	ld	r19, Z
    20ca:	30 32       	cpi	r19, 0x20	; 32
    20cc:	69 f0       	breq	.+26     	; 0x20e8 <__vector_91+0x1da>
						break;
					}
					dec[i-idx-1] = gps[i];
    20ce:	fc 01       	movw	r30, r24
    20d0:	e4 1b       	sub	r30, r20
    20d2:	f5 0b       	sbc	r31, r21
    20d4:	e4 5e       	subi	r30, 0xE4	; 228
    20d6:	fe 4d       	sbci	r31, 0xDE	; 222
    20d8:	30 83       	st	Z, r19
					gps[i] = 32;
    20da:	fc 01       	movw	r30, r24
    20dc:	e2 5f       	subi	r30, 0xF2	; 242
    20de:	fe 4d       	sbci	r31, 0xDE	; 222
    20e0:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    20e2:	2f 5f       	subi	r18, 0xFF	; 255
    20e4:	2f 30       	cpi	r18, 0x0F	; 15
    20e6:	59 f7       	brne	.-42     	; 0x20be <__vector_91+0x1b0>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    20e8:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <dec>
    20ec:	80 32       	cpi	r24, 0x20	; 32
    20ee:	19 f4       	brne	.+6      	; 0x20f6 <__vector_91+0x1e8>
					dec[0] = '0';
    20f0:	80 e3       	ldi	r24, 0x30	; 48
    20f2:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <dec>
				}
				sscanf(gps,"%ld",&val);
    20f6:	ce 01       	movw	r24, r28
    20f8:	01 96       	adiw	r24, 0x01	; 1
    20fa:	9f 93       	push	r25
    20fc:	8f 93       	push	r24
    20fe:	8c ea       	ldi	r24, 0xAC	; 172
    2100:	90 e2       	ldi	r25, 0x20	; 32
    2102:	9f 93       	push	r25
    2104:	8f 93       	push	r24
    2106:	8e e0       	ldi	r24, 0x0E	; 14
    2108:	91 e2       	ldi	r25, 0x21	; 33
    210a:	9f 93       	push	r25
    210c:	8f 93       	push	r24
    210e:	38 d7       	rcall	.+3696   	; 0x2f80 <sscanf>
				sscanf(dec,"%d",&val2);
    2110:	ce 01       	movw	r24, r28
    2112:	05 96       	adiw	r24, 0x05	; 5
    2114:	9f 93       	push	r25
    2116:	8f 93       	push	r24
    2118:	80 eb       	ldi	r24, 0xB0	; 176
    211a:	90 e2       	ldi	r25, 0x20	; 32
    211c:	9f 93       	push	r25
    211e:	8f 93       	push	r24
    2120:	8d e1       	ldi	r24, 0x1D	; 29
    2122:	91 e2       	ldi	r25, 0x21	; 33
    2124:	9f 93       	push	r25
    2126:	8f 93       	push	r24
    2128:	2b d7       	rcall	.+3670   	; 0x2f80 <sscanf>
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
    212a:	89 80       	ldd	r8, Y+1	; 0x01
    212c:	9a 80       	ldd	r9, Y+2	; 0x02
    212e:	ab 80       	ldd	r10, Y+3	; 0x03
    2130:	bc 80       	ldd	r11, Y+4	; 0x04
    2132:	6d 81       	ldd	r22, Y+5	; 0x05
    2134:	7e 81       	ldd	r23, Y+6	; 0x06
    2136:	07 2e       	mov	r0, r23
    2138:	00 0c       	add	r0, r0
    213a:	88 0b       	sbc	r24, r24
    213c:	99 0b       	sbc	r25, r25
    213e:	20 d3       	rcall	.+1600   	; 0x2780 <__floatsisf>
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e4       	ldi	r19, 0x40	; 64
    2144:	4c e1       	ldi	r20, 0x1C	; 28
    2146:	56 e4       	ldi	r21, 0x46	; 70
    2148:	46 d2       	rcall	.+1164   	; 0x25d6 <__divsf3>
    214a:	6b 01       	movw	r12, r22
    214c:	7c 01       	movw	r14, r24
    214e:	c5 01       	movw	r24, r10
    2150:	b4 01       	movw	r22, r8
    2152:	24 e6       	ldi	r18, 0x64	; 100
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	34 d6       	rcall	.+3176   	; 0x2dc4 <__divmodsi4>
    215c:	49 01       	movw	r8, r18
    215e:	5a 01       	movw	r10, r20
    2160:	0f d3       	rcall	.+1566   	; 0x2780 <__floatsisf>
    2162:	9b 01       	movw	r18, r22
    2164:	ac 01       	movw	r20, r24
    2166:	c7 01       	movw	r24, r14
    2168:	b6 01       	movw	r22, r12
    216a:	cd d1       	rcall	.+922    	; 0x2506 <__addsf3>
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e7       	ldi	r20, 0x70	; 112
    2172:	52 e4       	ldi	r21, 0x42	; 66
    2174:	30 d2       	rcall	.+1120   	; 0x25d6 <__divsf3>
    2176:	6b 01       	movw	r12, r22
    2178:	7c 01       	movw	r14, r24
    217a:	c5 01       	movw	r24, r10
    217c:	b4 01       	movw	r22, r8
    217e:	00 d3       	rcall	.+1536   	; 0x2780 <__floatsisf>
    2180:	9b 01       	movw	r18, r22
    2182:	ac 01       	movw	r20, r24
    2184:	c7 01       	movw	r24, r14
    2186:	b6 01       	movw	r22, r12
    2188:	be d1       	rcall	.+892    	; 0x2506 <__addsf3>
    218a:	60 93 ce 20 	sts	0x20CE, r22	; 0x8020ce <gps_lat>
    218e:	70 93 cf 20 	sts	0x20CF, r23	; 0x8020cf <gps_lat+0x1>
    2192:	80 93 d0 20 	sts	0x20D0, r24	; 0x8020d0 <gps_lat+0x2>
    2196:	90 93 d1 20 	sts	0x20D1, r25	; 0x8020d1 <gps_lat+0x3>
				break;
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	28 c1       	rjmp	.+592    	; 0x23f0 <__vector_91+0x4e2>
    21a0:	ef e0       	ldi	r30, 0x0F	; 15
    21a2:	f1 e2       	ldi	r31, 0x21	; 33
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    21a4:	81 e0       	ldi	r24, 0x01	; 1
					if(gps[i] == (uint8_t) '.'){
    21a6:	91 91       	ld	r25, Z+
    21a8:	9e 32       	cpi	r25, 0x2E	; 46
    21aa:	29 f4       	brne	.+10     	; 0x21b6 <__vector_91+0x2a8>
    21ac:	01 c0       	rjmp	.+2      	; 0x21b0 <__vector_91+0x2a2>
    21ae:	80 e0       	ldi	r24, 0x00	; 0
						idx = i;
    21b0:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <idx>
						break;
    21b4:	03 c0       	rjmp	.+6      	; 0x21bc <__vector_91+0x2ae>
				sscanf(gps,"%ld",&val);
				sscanf(dec,"%d",&val2);
				gps_lat = val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0;
				break;
			case 4:			//Longitude
				for(uint8_t i = 0; i < 15; i++){
    21b6:	8f 5f       	subi	r24, 0xFF	; 255
    21b8:	8f 30       	cpi	r24, 0x0F	; 15
    21ba:	a9 f7       	brne	.-22     	; 0x21a6 <__vector_91+0x298>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    21bc:	20 91 ee 20 	lds	r18, 0x20EE	; 0x8020ee <idx>
    21c0:	42 2f       	mov	r20, r18
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	fa 01       	movw	r30, r20
    21c6:	e2 5f       	subi	r30, 0xF2	; 242
    21c8:	fe 4d       	sbci	r31, 0xDE	; 222
    21ca:	80 e2       	ldi	r24, 0x20	; 32
    21cc:	80 83       	st	Z, r24
				for(uint8_t i = idx+1; i < 15; i++){
    21ce:	2f 5f       	subi	r18, 0xFF	; 255
    21d0:	2f 30       	cpi	r18, 0x0F	; 15
    21d2:	f8 f4       	brcc	.+62     	; 0x2212 <__vector_91+0x304>
					if(gps[i] == 32){
    21d4:	82 2f       	mov	r24, r18
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	fc 01       	movw	r30, r24
    21da:	e2 5f       	subi	r30, 0xF2	; 242
    21dc:	fe 4d       	sbci	r31, 0xDE	; 222
    21de:	30 81       	ld	r19, Z
    21e0:	30 32       	cpi	r19, 0x20	; 32
    21e2:	b9 f0       	breq	.+46     	; 0x2212 <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    21e4:	60 e2       	ldi	r22, 0x20	; 32
    21e6:	08 c0       	rjmp	.+16     	; 0x21f8 <__vector_91+0x2ea>
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    21e8:	82 2f       	mov	r24, r18
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	fc 01       	movw	r30, r24
    21ee:	e2 5f       	subi	r30, 0xF2	; 242
    21f0:	fe 4d       	sbci	r31, 0xDE	; 222
    21f2:	30 81       	ld	r19, Z
    21f4:	30 32       	cpi	r19, 0x20	; 32
    21f6:	69 f0       	breq	.+26     	; 0x2212 <__vector_91+0x304>
						break;
					}
					dec[i-idx-1] = gps[i];
    21f8:	fc 01       	movw	r30, r24
    21fa:	e4 1b       	sub	r30, r20
    21fc:	f5 0b       	sbc	r31, r21
    21fe:	e4 5e       	subi	r30, 0xE4	; 228
    2200:	fe 4d       	sbci	r31, 0xDE	; 222
    2202:	30 83       	st	Z, r19
					gps[i] = 32;
    2204:	fc 01       	movw	r30, r24
    2206:	e2 5f       	subi	r30, 0xF2	; 242
    2208:	fe 4d       	sbci	r31, 0xDE	; 222
    220a:	60 83       	st	Z, r22
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    220c:	2f 5f       	subi	r18, 0xFF	; 255
    220e:	2f 30       	cpi	r18, 0x0F	; 15
    2210:	59 f7       	brne	.-42     	; 0x21e8 <__vector_91+0x2da>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    2212:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <dec>
    2216:	80 32       	cpi	r24, 0x20	; 32
    2218:	19 f4       	brne	.+6      	; 0x2220 <__vector_91+0x312>
					dec[0] = '0';
    221a:	80 e3       	ldi	r24, 0x30	; 48
    221c:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <dec>
				}
				sscanf(gps,"%ld",&val);
    2220:	ce 01       	movw	r24, r28
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	9f 93       	push	r25
    2226:	8f 93       	push	r24
    2228:	8c ea       	ldi	r24, 0xAC	; 172
    222a:	90 e2       	ldi	r25, 0x20	; 32
    222c:	9f 93       	push	r25
    222e:	8f 93       	push	r24
    2230:	8e e0       	ldi	r24, 0x0E	; 14
    2232:	91 e2       	ldi	r25, 0x21	; 33
    2234:	9f 93       	push	r25
    2236:	8f 93       	push	r24
    2238:	a3 d6       	rcall	.+3398   	; 0x2f80 <sscanf>
				sscanf(dec,"%d",&val2);
    223a:	ce 01       	movw	r24, r28
    223c:	05 96       	adiw	r24, 0x05	; 5
    223e:	9f 93       	push	r25
    2240:	8f 93       	push	r24
    2242:	80 eb       	ldi	r24, 0xB0	; 176
    2244:	90 e2       	ldi	r25, 0x20	; 32
    2246:	9f 93       	push	r25
    2248:	8f 93       	push	r24
    224a:	8d e1       	ldi	r24, 0x1D	; 29
    224c:	91 e2       	ldi	r25, 0x21	; 33
    224e:	9f 93       	push	r25
    2250:	8f 93       	push	r24
				gps_long = -(val/100 + ((double)(val%100) + ((double)(val2))/10000) / 60.0);
    2252:	96 d6       	rcall	.+3372   	; 0x2f80 <sscanf>
    2254:	89 80       	ldd	r8, Y+1	; 0x01
    2256:	9a 80       	ldd	r9, Y+2	; 0x02
    2258:	ab 80       	ldd	r10, Y+3	; 0x03
    225a:	bc 80       	ldd	r11, Y+4	; 0x04
    225c:	6d 81       	ldd	r22, Y+5	; 0x05
    225e:	7e 81       	ldd	r23, Y+6	; 0x06
    2260:	07 2e       	mov	r0, r23
    2262:	00 0c       	add	r0, r0
    2264:	88 0b       	sbc	r24, r24
    2266:	99 0b       	sbc	r25, r25
    2268:	8b d2       	rcall	.+1302   	; 0x2780 <__floatsisf>
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e4       	ldi	r19, 0x40	; 64
    226e:	4c e1       	ldi	r20, 0x1C	; 28
    2270:	56 e4       	ldi	r21, 0x46	; 70
    2272:	b1 d1       	rcall	.+866    	; 0x25d6 <__divsf3>
    2274:	6b 01       	movw	r12, r22
    2276:	7c 01       	movw	r14, r24
    2278:	c5 01       	movw	r24, r10
    227a:	b4 01       	movw	r22, r8
    227c:	24 e6       	ldi	r18, 0x64	; 100
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	9f d5       	rcall	.+2878   	; 0x2dc4 <__divmodsi4>
    2286:	49 01       	movw	r8, r18
    2288:	5a 01       	movw	r10, r20
    228a:	7a d2       	rcall	.+1268   	; 0x2780 <__floatsisf>
    228c:	9b 01       	movw	r18, r22
    228e:	ac 01       	movw	r20, r24
    2290:	c7 01       	movw	r24, r14
    2292:	b6 01       	movw	r22, r12
    2294:	38 d1       	rcall	.+624    	; 0x2506 <__addsf3>
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e7       	ldi	r20, 0x70	; 112
    229c:	52 e4       	ldi	r21, 0x42	; 66
    229e:	9b d1       	rcall	.+822    	; 0x25d6 <__divsf3>
    22a0:	6b 01       	movw	r12, r22
    22a2:	7c 01       	movw	r14, r24
    22a4:	c5 01       	movw	r24, r10
    22a6:	b4 01       	movw	r22, r8
    22a8:	6b d2       	rcall	.+1238   	; 0x2780 <__floatsisf>
    22aa:	9b 01       	movw	r18, r22
    22ac:	ac 01       	movw	r20, r24
    22ae:	c7 01       	movw	r24, r14
    22b0:	b6 01       	movw	r22, r12
    22b2:	29 d1       	rcall	.+594    	; 0x2506 <__addsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	b0 58       	subi	r27, 0x80	; 128
    22ba:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <gps_long>
    22be:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <gps_long+0x1>
    22c2:	a0 93 cc 20 	sts	0x20CC, r26	; 0x8020cc <gps_long+0x2>
    22c6:	b0 93 cd 20 	sts	0x20CD, r27	; 0x8020cd <gps_long+0x3>
				break;
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	90 c0       	rjmp	.+288    	; 0x23f0 <__vector_91+0x4e2>
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
    22d0:	84 ec       	ldi	r24, 0xC4	; 196
    22d2:	90 e2       	ldi	r25, 0x20	; 32
    22d4:	9f 93       	push	r25
    22d6:	8f 93       	push	r24
    22d8:	80 eb       	ldi	r24, 0xB0	; 176
    22da:	90 e2       	ldi	r25, 0x20	; 32
    22dc:	9f 93       	push	r25
    22de:	8f 93       	push	r24
    22e0:	8e e0       	ldi	r24, 0x0E	; 14
    22e2:	91 e2       	ldi	r25, 0x21	; 33
    22e4:	9f 93       	push	r25
    22e6:	8f 93       	push	r24
    22e8:	4b d6       	rcall	.+3222   	; 0x2f80 <sscanf>
    22ea:	0f 90       	pop	r0
				break;
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	7c c0       	rjmp	.+248    	; 0x23f0 <__vector_91+0x4e2>
    22f8:	ef e0       	ldi	r30, 0x0F	; 15
    22fa:	f1 e2       	ldi	r31, 0x21	; 33
    22fc:	81 e0       	ldi	r24, 0x01	; 1
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    22fe:	91 91       	ld	r25, Z+
					if(gps[i] == (uint8_t) '.'){
    2300:	9e 32       	cpi	r25, 0x2E	; 46
    2302:	29 f4       	brne	.+10     	; 0x230e <__vector_91+0x400>
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <__vector_91+0x3fa>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	80 93 ee 20 	sts	0x20EE, r24	; 0x8020ee <idx>
						idx = i;
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <__vector_91+0x406>
						break;
    230e:	8f 5f       	subi	r24, 0xFF	; 255
				break;
			case 7:			//Sats
				sscanf(gps,"%d",&gps_sats);
				break;
			case 9:			//Altitude
				for(uint8_t i = 0; i < 15; i++){
    2310:	8f 30       	cpi	r24, 0x0F	; 15
    2312:	a9 f7       	brne	.-22     	; 0x22fe <__vector_91+0x3f0>
    2314:	20 91 ee 20 	lds	r18, 0x20EE	; 0x8020ee <idx>
					if(gps[i] == (uint8_t) '.'){
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
    2318:	42 2f       	mov	r20, r18
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	fa 01       	movw	r30, r20
    231e:	e2 5f       	subi	r30, 0xF2	; 242
    2320:	fe 4d       	sbci	r31, 0xDE	; 222
    2322:	80 e2       	ldi	r24, 0x20	; 32
    2324:	80 83       	st	Z, r24
    2326:	2f 5f       	subi	r18, 0xFF	; 255
				for(uint8_t i = idx+1; i < 15; i++){
    2328:	2f 30       	cpi	r18, 0x0F	; 15
    232a:	f8 f4       	brcc	.+62     	; 0x236a <__vector_91+0x45c>
    232c:	82 2f       	mov	r24, r18
					if(gps[i] == 32){
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	fc 01       	movw	r30, r24
    2332:	e2 5f       	subi	r30, 0xF2	; 242
    2334:	fe 4d       	sbci	r31, 0xDE	; 222
    2336:	30 81       	ld	r19, Z
    2338:	30 32       	cpi	r19, 0x20	; 32
    233a:	b9 f0       	breq	.+46     	; 0x236a <__vector_91+0x45c>
    233c:	60 e2       	ldi	r22, 0x20	; 32
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
    233e:	08 c0       	rjmp	.+16     	; 0x2350 <__vector_91+0x442>
    2340:	82 2f       	mov	r24, r18
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
					if(gps[i] == 32){
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	fc 01       	movw	r30, r24
    2346:	e2 5f       	subi	r30, 0xF2	; 242
    2348:	fe 4d       	sbci	r31, 0xDE	; 222
    234a:	30 81       	ld	r19, Z
    234c:	30 32       	cpi	r19, 0x20	; 32
    234e:	69 f0       	breq	.+26     	; 0x236a <__vector_91+0x45c>
    2350:	fc 01       	movw	r30, r24
						break;
					}
					dec[i-idx-1] = gps[i];
    2352:	e4 1b       	sub	r30, r20
    2354:	f5 0b       	sbc	r31, r21
    2356:	e4 5e       	subi	r30, 0xE4	; 228
    2358:	fe 4d       	sbci	r31, 0xDE	; 222
    235a:	30 83       	st	Z, r19
    235c:	fc 01       	movw	r30, r24
					gps[i] = 32;
    235e:	e2 5f       	subi	r30, 0xF2	; 242
    2360:	fe 4d       	sbci	r31, 0xDE	; 222
    2362:	60 83       	st	Z, r22
    2364:	2f 5f       	subi	r18, 0xFF	; 255
						idx = i;
						break;
					}
				}
				gps[idx] = 32;
				for(uint8_t i = idx+1; i < 15; i++){
    2366:	2f 30       	cpi	r18, 0x0F	; 15
    2368:	59 f7       	brne	.-42     	; 0x2340 <__vector_91+0x432>
						break;
					}
					dec[i-idx-1] = gps[i];
					gps[i] = 32;
				}
				if(dec[0] == 32){
    236a:	80 91 1d 21 	lds	r24, 0x211D	; 0x80211d <dec>
    236e:	80 32       	cpi	r24, 0x20	; 32
    2370:	19 f4       	brne	.+6      	; 0x2378 <__vector_91+0x46a>
					dec[0] = '0';
    2372:	80 e3       	ldi	r24, 0x30	; 48
    2374:	80 93 1d 21 	sts	0x211D, r24	; 0x80211d <dec>
				}
				sscanf(gps,"%ld",&val);
    2378:	ce 01       	movw	r24, r28
    237a:	01 96       	adiw	r24, 0x01	; 1
    237c:	9f 93       	push	r25
    237e:	8f 93       	push	r24
    2380:	8c ea       	ldi	r24, 0xAC	; 172
    2382:	90 e2       	ldi	r25, 0x20	; 32
    2384:	9f 93       	push	r25
    2386:	8f 93       	push	r24
    2388:	8e e0       	ldi	r24, 0x0E	; 14
    238a:	91 e2       	ldi	r25, 0x21	; 33
    238c:	9f 93       	push	r25
    238e:	8f 93       	push	r24
				sscanf(dec,"%d",&val2);
    2390:	f7 d5       	rcall	.+3054   	; 0x2f80 <sscanf>
    2392:	ce 01       	movw	r24, r28
    2394:	05 96       	adiw	r24, 0x05	; 5
    2396:	9f 93       	push	r25
    2398:	8f 93       	push	r24
    239a:	80 eb       	ldi	r24, 0xB0	; 176
    239c:	90 e2       	ldi	r25, 0x20	; 32
    239e:	9f 93       	push	r25
    23a0:	8f 93       	push	r24
    23a2:	8d e1       	ldi	r24, 0x1D	; 29
    23a4:	91 e2       	ldi	r25, 0x21	; 33
    23a6:	9f 93       	push	r25
				gps_alt = (double) val + ((double) val2/10.0);
    23a8:	8f 93       	push	r24
    23aa:	ea d5       	rcall	.+3028   	; 0x2f80 <sscanf>
    23ac:	69 81       	ldd	r22, Y+1	; 0x01
    23ae:	7a 81       	ldd	r23, Y+2	; 0x02
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	e5 d1       	rcall	.+970    	; 0x2780 <__floatsisf>
    23b6:	6b 01       	movw	r12, r22
    23b8:	7c 01       	movw	r14, r24
    23ba:	6d 81       	ldd	r22, Y+5	; 0x05
    23bc:	7e 81       	ldd	r23, Y+6	; 0x06
    23be:	07 2e       	mov	r0, r23
    23c0:	00 0c       	add	r0, r0
    23c2:	88 0b       	sbc	r24, r24
    23c4:	99 0b       	sbc	r25, r25
    23c6:	dc d1       	rcall	.+952    	; 0x2780 <__floatsisf>
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e2       	ldi	r20, 0x20	; 32
    23ce:	51 e4       	ldi	r21, 0x41	; 65
    23d0:	02 d1       	rcall	.+516    	; 0x25d6 <__divsf3>
    23d2:	9b 01       	movw	r18, r22
    23d4:	ac 01       	movw	r20, r24
    23d6:	c7 01       	movw	r24, r14
    23d8:	b6 01       	movw	r22, r12
    23da:	95 d0       	rcall	.+298    	; 0x2506 <__addsf3>
    23dc:	60 93 c6 20 	sts	0x20C6, r22	; 0x8020c6 <gps_alt>
    23e0:	70 93 c7 20 	sts	0x20C7, r23	; 0x8020c7 <gps_alt+0x1>
    23e4:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <gps_alt+0x2>
    23e8:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <gps_alt+0x3>
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	de bf       	out	0x3e, r29	; 62
				break;
    23f0:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <writing>
		}
	
		if(writing){
    23f4:	88 23       	and	r24, r24
    23f6:	d1 f0       	breq	.+52     	; 0x242c <__vector_91+0x51e>
    23f8:	10 92 ee 20 	sts	0x20EE, r1	; 0x8020ee <idx>
			idx = 0;
    23fc:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <commas>
			commas++;
    2400:	8f 5f       	subi	r24, 0xFF	; 255
    2402:	80 93 ef 20 	sts	0x20EF, r24	; 0x8020ef <commas>
    2406:	10 92 f0 20 	sts	0x20F0, r1	; 0x8020f0 <word_pos>
			word_pos = 0;
    240a:	ee e0       	ldi	r30, 0x0E	; 14
    240c:	f1 e2       	ldi	r31, 0x21	; 33
    240e:	2d e1       	ldi	r18, 0x1D	; 29
    2410:	31 e2       	ldi	r19, 0x21	; 33
    2412:	80 e2       	ldi	r24, 0x20	; 32
    2414:	81 93       	st	Z+, r24
			for(uint8_t i = 0; i < 15; i++){
				gps[i] = 32;
    2416:	2e 17       	cp	r18, r30
    2418:	3f 07       	cpc	r19, r31
	
		if(writing){
			idx = 0;
			commas++;
			word_pos = 0;
			for(uint8_t i = 0; i < 15; i++){
    241a:	e1 f7       	brne	.-8      	; 0x2414 <__vector_91+0x506>
    241c:	ed e1       	ldi	r30, 0x1D	; 29
    241e:	f1 e2       	ldi	r31, 0x21	; 33
				gps[i] = 32;
			}
			for(uint8_t i = 0; i < 5; i++){
				dec[i] = 32;
    2420:	80 e2       	ldi	r24, 0x20	; 32
    2422:	80 83       	st	Z, r24
    2424:	81 83       	std	Z+1, r24	; 0x01
    2426:	82 83       	std	Z+2, r24	; 0x02
    2428:	83 83       	std	Z+3, r24	; 0x03
    242a:	84 83       	std	Z+4, r24	; 0x04
    242c:	80 91 f2 20 	lds	r24, 0x20F2	; 0x8020f2 <writing>
			}
		}
	}
		
	if(writing){
    2430:	88 23       	and	r24, r24
    2432:	09 f4       	brne	.+2      	; 0x2436 <__vector_91+0x528>
    2434:	40 c0       	rjmp	.+128    	; 0x24b6 <__vector_91+0x5a8>
    2436:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <pos>
		switch(pos){
    243a:	93 30       	cpi	r25, 0x03	; 3
    243c:	19 f0       	breq	.+6      	; 0x2444 <__vector_91+0x536>
    243e:	94 30       	cpi	r25, 0x04	; 4
    2440:	31 f0       	breq	.+12     	; 0x244e <__vector_91+0x540>
    2442:	09 c0       	rjmp	.+18     	; 0x2456 <__vector_91+0x548>
    2444:	17 34       	cpi	r17, 0x47	; 71
    2446:	39 f0       	breq	.+14     	; 0x2456 <__vector_91+0x548>
			case 3:
				if(c != 'G'){
    2448:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <writing>
					writing = 0;
    244c:	04 c0       	rjmp	.+8      	; 0x2456 <__vector_91+0x548>
    244e:	17 34       	cpi	r17, 0x47	; 71
    2450:	11 f0       	breq	.+4      	; 0x2456 <__vector_91+0x548>
				}
				break;
				
			case 4:
				if(c != 'G'){
    2452:	10 92 f2 20 	sts	0x20F2, r1	; 0x8020f2 <writing>
					writing = 0;
    2456:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <word_pos>
				}
				break;
		}
		gps[word_pos] = c;
    245a:	e8 2f       	mov	r30, r24
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	e2 5f       	subi	r30, 0xF2	; 242
    2460:	fe 4d       	sbci	r31, 0xDE	; 222
    2462:	10 83       	st	Z, r17
    2464:	8f 5f       	subi	r24, 0xFF	; 255
    2466:	80 93 f0 20 	sts	0x20F0, r24	; 0x8020f0 <word_pos>
		word_pos++;
    246a:	9f 5f       	subi	r25, 0xFF	; 255
    246c:	90 93 f1 20 	sts	0x20F1, r25	; 0x8020f1 <pos>
		pos++;
    2470:	22 c0       	rjmp	.+68     	; 0x24b6 <__vector_91+0x5a8>
    2472:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <gps>
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
					if(gps[i] == (uint8_t) '.'){
    2476:	8e 32       	cpi	r24, 0x2E	; 46
    2478:	09 f4       	brne	.+2      	; 0x247c <__vector_91+0x56e>
    247a:	b1 cd       	rjmp	.-1182   	; 0x1fde <__vector_91+0xd0>
    247c:	ef e0       	ldi	r30, 0x0F	; 15
    247e:	f1 e2       	ldi	r31, 0x21	; 33
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	a9 cd       	rjmp	.-1198   	; 0x1fd6 <__vector_91+0xc8>
		}
		int32_t val = 0;
		int16_t val2 = 0;
		switch(commas){
			case 1:			//Time
				for(uint8_t i = 0; i < 15; i++){
    2484:	19 82       	std	Y+1, r1	; 0x01
    2486:	1a 82       	std	Y+2, r1	; 0x02
	else if(c == (uint8_t) ','){
		gps[0] = 32;
		if(gps[1] == 32){
			gps[0] = '0';
		}
		int32_t val = 0;
    2488:	1b 82       	std	Y+3, r1	; 0x03
    248a:	1c 82       	std	Y+4, r1	; 0x04
    248c:	1d 82       	std	Y+5, r1	; 0x05
    248e:	1e 82       	std	Y+6, r1	; 0x06
		int16_t val2 = 0;
    2490:	80 91 ef 20 	lds	r24, 0x20EF	; 0x8020ef <commas>
		switch(commas){
    2494:	84 30       	cpi	r24, 0x04	; 4
    2496:	09 f4       	brne	.+2      	; 0x249a <__vector_91+0x58c>
    2498:	92 cd       	rjmp	.-1244   	; 0x1fbe <__vector_91+0xb0>
    249a:	30 f4       	brcc	.+12     	; 0x24a8 <__vector_91+0x59a>
    249c:	81 30       	cpi	r24, 0x01	; 1
    249e:	49 f3       	breq	.-46     	; 0x2472 <__vector_91+0x564>
    24a0:	82 30       	cpi	r24, 0x02	; 2
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <__vector_91+0x598>
    24a4:	92 cd       	rjmp	.-1244   	; 0x1fca <__vector_91+0xbc>
    24a6:	a4 cf       	rjmp	.-184    	; 0x23f0 <__vector_91+0x4e2>
    24a8:	87 30       	cpi	r24, 0x07	; 7
    24aa:	09 f4       	brne	.+2      	; 0x24ae <__vector_91+0x5a0>
    24ac:	11 cf       	rjmp	.-478    	; 0x22d0 <__vector_91+0x3c2>
    24ae:	89 30       	cpi	r24, 0x09	; 9
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <__vector_91+0x5a6>
    24b2:	7f cd       	rjmp	.-1282   	; 0x1fb2 <__vector_91+0xa4>
    24b4:	9d cf       	rjmp	.-198    	; 0x23f0 <__vector_91+0x4e2>
    24b6:	26 96       	adiw	r28, 0x06	; 6
    24b8:	cd bf       	out	0x3d, r28	; 61
		}
		gps[word_pos] = c;
		word_pos++;
		pos++;
	}
}
    24ba:	de bf       	out	0x3e, r29	; 62
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	ff 91       	pop	r31
    24c2:	ef 91       	pop	r30
    24c4:	bf 91       	pop	r27
    24c6:	af 91       	pop	r26
    24c8:	9f 91       	pop	r25
    24ca:	8f 91       	pop	r24
    24cc:	7f 91       	pop	r23
    24ce:	6f 91       	pop	r22
    24d0:	5f 91       	pop	r21
    24d2:	4f 91       	pop	r20
    24d4:	3f 91       	pop	r19
    24d6:	2f 91       	pop	r18
    24d8:	1f 91       	pop	r17
    24da:	ff 90       	pop	r15
    24dc:	ef 90       	pop	r14
    24de:	df 90       	pop	r13
    24e0:	cf 90       	pop	r12
    24e2:	bf 90       	pop	r11
    24e4:	af 90       	pop	r10
    24e6:	9f 90       	pop	r9
    24e8:	8f 90       	pop	r8
    24ea:	0f 90       	pop	r0
    24ec:	0b be       	out	0x3b, r0	; 59
    24ee:	0f 90       	pop	r0
    24f0:	0a be       	out	0x3a, r0	; 58
    24f2:	0f 90       	pop	r0
    24f4:	09 be       	out	0x39, r0	; 57
    24f6:	0f 90       	pop	r0
    24f8:	08 be       	out	0x38, r0	; 56
    24fa:	0f 90       	pop	r0
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	0f 90       	pop	r0
    2500:	1f 90       	pop	r1
    2502:	18 95       	reti

00002504 <__subsf3>:
    2504:	50 58       	subi	r21, 0x80	; 128

00002506 <__addsf3>:
    2506:	bb 27       	eor	r27, r27
    2508:	aa 27       	eor	r26, r26
    250a:	0e d0       	rcall	.+28     	; 0x2528 <__addsf3x>
    250c:	22 c2       	rjmp	.+1092   	; 0x2952 <__fp_round>
    250e:	13 d2       	rcall	.+1062   	; 0x2936 <__fp_pscA>
    2510:	30 f0       	brcs	.+12     	; 0x251e <__addsf3+0x18>
    2512:	18 d2       	rcall	.+1072   	; 0x2944 <__fp_pscB>
    2514:	20 f0       	brcs	.+8      	; 0x251e <__addsf3+0x18>
    2516:	31 f4       	brne	.+12     	; 0x2524 <__addsf3+0x1e>
    2518:	9f 3f       	cpi	r25, 0xFF	; 255
    251a:	11 f4       	brne	.+4      	; 0x2520 <__addsf3+0x1a>
    251c:	1e f4       	brtc	.+6      	; 0x2524 <__addsf3+0x1e>
    251e:	d3 c1       	rjmp	.+934    	; 0x28c6 <__fp_nan>
    2520:	0e f4       	brtc	.+2      	; 0x2524 <__addsf3+0x1e>
    2522:	e0 95       	com	r30
    2524:	e7 fb       	bst	r30, 7
    2526:	c9 c1       	rjmp	.+914    	; 0x28ba <__fp_inf>

00002528 <__addsf3x>:
    2528:	e9 2f       	mov	r30, r25
    252a:	24 d2       	rcall	.+1096   	; 0x2974 <__fp_split3>
    252c:	80 f3       	brcs	.-32     	; 0x250e <__addsf3+0x8>
    252e:	ba 17       	cp	r27, r26
    2530:	62 07       	cpc	r22, r18
    2532:	73 07       	cpc	r23, r19
    2534:	84 07       	cpc	r24, r20
    2536:	95 07       	cpc	r25, r21
    2538:	18 f0       	brcs	.+6      	; 0x2540 <__addsf3x+0x18>
    253a:	71 f4       	brne	.+28     	; 0x2558 <__addsf3x+0x30>
    253c:	9e f5       	brtc	.+102    	; 0x25a4 <__addsf3x+0x7c>
    253e:	3c c2       	rjmp	.+1144   	; 0x29b8 <__fp_zero>
    2540:	0e f4       	brtc	.+2      	; 0x2544 <__addsf3x+0x1c>
    2542:	e0 95       	com	r30
    2544:	0b 2e       	mov	r0, r27
    2546:	ba 2f       	mov	r27, r26
    2548:	a0 2d       	mov	r26, r0
    254a:	0b 01       	movw	r0, r22
    254c:	b9 01       	movw	r22, r18
    254e:	90 01       	movw	r18, r0
    2550:	0c 01       	movw	r0, r24
    2552:	ca 01       	movw	r24, r20
    2554:	a0 01       	movw	r20, r0
    2556:	11 24       	eor	r1, r1
    2558:	ff 27       	eor	r31, r31
    255a:	59 1b       	sub	r21, r25
    255c:	99 f0       	breq	.+38     	; 0x2584 <__addsf3x+0x5c>
    255e:	59 3f       	cpi	r21, 0xF9	; 249
    2560:	50 f4       	brcc	.+20     	; 0x2576 <__addsf3x+0x4e>
    2562:	50 3e       	cpi	r21, 0xE0	; 224
    2564:	68 f1       	brcs	.+90     	; 0x25c0 <__addsf3x+0x98>
    2566:	1a 16       	cp	r1, r26
    2568:	f0 40       	sbci	r31, 0x00	; 0
    256a:	a2 2f       	mov	r26, r18
    256c:	23 2f       	mov	r18, r19
    256e:	34 2f       	mov	r19, r20
    2570:	44 27       	eor	r20, r20
    2572:	58 5f       	subi	r21, 0xF8	; 248
    2574:	f3 cf       	rjmp	.-26     	; 0x255c <__addsf3x+0x34>
    2576:	46 95       	lsr	r20
    2578:	37 95       	ror	r19
    257a:	27 95       	ror	r18
    257c:	a7 95       	ror	r26
    257e:	f0 40       	sbci	r31, 0x00	; 0
    2580:	53 95       	inc	r21
    2582:	c9 f7       	brne	.-14     	; 0x2576 <__addsf3x+0x4e>
    2584:	7e f4       	brtc	.+30     	; 0x25a4 <__addsf3x+0x7c>
    2586:	1f 16       	cp	r1, r31
    2588:	ba 0b       	sbc	r27, r26
    258a:	62 0b       	sbc	r22, r18
    258c:	73 0b       	sbc	r23, r19
    258e:	84 0b       	sbc	r24, r20
    2590:	ba f0       	brmi	.+46     	; 0x25c0 <__addsf3x+0x98>
    2592:	91 50       	subi	r25, 0x01	; 1
    2594:	a1 f0       	breq	.+40     	; 0x25be <__addsf3x+0x96>
    2596:	ff 0f       	add	r31, r31
    2598:	bb 1f       	adc	r27, r27
    259a:	66 1f       	adc	r22, r22
    259c:	77 1f       	adc	r23, r23
    259e:	88 1f       	adc	r24, r24
    25a0:	c2 f7       	brpl	.-16     	; 0x2592 <__addsf3x+0x6a>
    25a2:	0e c0       	rjmp	.+28     	; 0x25c0 <__addsf3x+0x98>
    25a4:	ba 0f       	add	r27, r26
    25a6:	62 1f       	adc	r22, r18
    25a8:	73 1f       	adc	r23, r19
    25aa:	84 1f       	adc	r24, r20
    25ac:	48 f4       	brcc	.+18     	; 0x25c0 <__addsf3x+0x98>
    25ae:	87 95       	ror	r24
    25b0:	77 95       	ror	r23
    25b2:	67 95       	ror	r22
    25b4:	b7 95       	ror	r27
    25b6:	f7 95       	ror	r31
    25b8:	9e 3f       	cpi	r25, 0xFE	; 254
    25ba:	08 f0       	brcs	.+2      	; 0x25be <__addsf3x+0x96>
    25bc:	b3 cf       	rjmp	.-154    	; 0x2524 <__addsf3+0x1e>
    25be:	93 95       	inc	r25
    25c0:	88 0f       	add	r24, r24
    25c2:	08 f0       	brcs	.+2      	; 0x25c6 <__addsf3x+0x9e>
    25c4:	99 27       	eor	r25, r25
    25c6:	ee 0f       	add	r30, r30
    25c8:	97 95       	ror	r25
    25ca:	87 95       	ror	r24
    25cc:	08 95       	ret

000025ce <__cmpsf2>:
    25ce:	51 d1       	rcall	.+674    	; 0x2872 <__fp_cmp>
    25d0:	08 f4       	brcc	.+2      	; 0x25d4 <__cmpsf2+0x6>
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	08 95       	ret

000025d6 <__divsf3>:
    25d6:	0c d0       	rcall	.+24     	; 0x25f0 <__divsf3x>
    25d8:	bc c1       	rjmp	.+888    	; 0x2952 <__fp_round>
    25da:	b4 d1       	rcall	.+872    	; 0x2944 <__fp_pscB>
    25dc:	40 f0       	brcs	.+16     	; 0x25ee <__divsf3+0x18>
    25de:	ab d1       	rcall	.+854    	; 0x2936 <__fp_pscA>
    25e0:	30 f0       	brcs	.+12     	; 0x25ee <__divsf3+0x18>
    25e2:	21 f4       	brne	.+8      	; 0x25ec <__divsf3+0x16>
    25e4:	5f 3f       	cpi	r21, 0xFF	; 255
    25e6:	19 f0       	breq	.+6      	; 0x25ee <__divsf3+0x18>
    25e8:	68 c1       	rjmp	.+720    	; 0x28ba <__fp_inf>
    25ea:	51 11       	cpse	r21, r1
    25ec:	e6 c1       	rjmp	.+972    	; 0x29ba <__fp_szero>
    25ee:	6b c1       	rjmp	.+726    	; 0x28c6 <__fp_nan>

000025f0 <__divsf3x>:
    25f0:	c1 d1       	rcall	.+898    	; 0x2974 <__fp_split3>
    25f2:	98 f3       	brcs	.-26     	; 0x25da <__divsf3+0x4>

000025f4 <__divsf3_pse>:
    25f4:	99 23       	and	r25, r25
    25f6:	c9 f3       	breq	.-14     	; 0x25ea <__divsf3+0x14>
    25f8:	55 23       	and	r21, r21
    25fa:	b1 f3       	breq	.-20     	; 0x25e8 <__divsf3+0x12>
    25fc:	95 1b       	sub	r25, r21
    25fe:	55 0b       	sbc	r21, r21
    2600:	bb 27       	eor	r27, r27
    2602:	aa 27       	eor	r26, r26
    2604:	62 17       	cp	r22, r18
    2606:	73 07       	cpc	r23, r19
    2608:	84 07       	cpc	r24, r20
    260a:	38 f0       	brcs	.+14     	; 0x261a <__divsf3_pse+0x26>
    260c:	9f 5f       	subi	r25, 0xFF	; 255
    260e:	5f 4f       	sbci	r21, 0xFF	; 255
    2610:	22 0f       	add	r18, r18
    2612:	33 1f       	adc	r19, r19
    2614:	44 1f       	adc	r20, r20
    2616:	aa 1f       	adc	r26, r26
    2618:	a9 f3       	breq	.-22     	; 0x2604 <__divsf3_pse+0x10>
    261a:	33 d0       	rcall	.+102    	; 0x2682 <__divsf3_pse+0x8e>
    261c:	0e 2e       	mov	r0, r30
    261e:	3a f0       	brmi	.+14     	; 0x262e <__divsf3_pse+0x3a>
    2620:	e0 e8       	ldi	r30, 0x80	; 128
    2622:	30 d0       	rcall	.+96     	; 0x2684 <__divsf3_pse+0x90>
    2624:	91 50       	subi	r25, 0x01	; 1
    2626:	50 40       	sbci	r21, 0x00	; 0
    2628:	e6 95       	lsr	r30
    262a:	00 1c       	adc	r0, r0
    262c:	ca f7       	brpl	.-14     	; 0x2620 <__divsf3_pse+0x2c>
    262e:	29 d0       	rcall	.+82     	; 0x2682 <__divsf3_pse+0x8e>
    2630:	fe 2f       	mov	r31, r30
    2632:	27 d0       	rcall	.+78     	; 0x2682 <__divsf3_pse+0x8e>
    2634:	66 0f       	add	r22, r22
    2636:	77 1f       	adc	r23, r23
    2638:	88 1f       	adc	r24, r24
    263a:	bb 1f       	adc	r27, r27
    263c:	26 17       	cp	r18, r22
    263e:	37 07       	cpc	r19, r23
    2640:	48 07       	cpc	r20, r24
    2642:	ab 07       	cpc	r26, r27
    2644:	b0 e8       	ldi	r27, 0x80	; 128
    2646:	09 f0       	breq	.+2      	; 0x264a <__divsf3_pse+0x56>
    2648:	bb 0b       	sbc	r27, r27
    264a:	80 2d       	mov	r24, r0
    264c:	bf 01       	movw	r22, r30
    264e:	ff 27       	eor	r31, r31
    2650:	93 58       	subi	r25, 0x83	; 131
    2652:	5f 4f       	sbci	r21, 0xFF	; 255
    2654:	2a f0       	brmi	.+10     	; 0x2660 <__divsf3_pse+0x6c>
    2656:	9e 3f       	cpi	r25, 0xFE	; 254
    2658:	51 05       	cpc	r21, r1
    265a:	68 f0       	brcs	.+26     	; 0x2676 <__divsf3_pse+0x82>
    265c:	2e c1       	rjmp	.+604    	; 0x28ba <__fp_inf>
    265e:	ad c1       	rjmp	.+858    	; 0x29ba <__fp_szero>
    2660:	5f 3f       	cpi	r21, 0xFF	; 255
    2662:	ec f3       	brlt	.-6      	; 0x265e <__divsf3_pse+0x6a>
    2664:	98 3e       	cpi	r25, 0xE8	; 232
    2666:	dc f3       	brlt	.-10     	; 0x265e <__divsf3_pse+0x6a>
    2668:	86 95       	lsr	r24
    266a:	77 95       	ror	r23
    266c:	67 95       	ror	r22
    266e:	b7 95       	ror	r27
    2670:	f7 95       	ror	r31
    2672:	9f 5f       	subi	r25, 0xFF	; 255
    2674:	c9 f7       	brne	.-14     	; 0x2668 <__divsf3_pse+0x74>
    2676:	88 0f       	add	r24, r24
    2678:	91 1d       	adc	r25, r1
    267a:	96 95       	lsr	r25
    267c:	87 95       	ror	r24
    267e:	97 f9       	bld	r25, 7
    2680:	08 95       	ret
    2682:	e1 e0       	ldi	r30, 0x01	; 1
    2684:	66 0f       	add	r22, r22
    2686:	77 1f       	adc	r23, r23
    2688:	88 1f       	adc	r24, r24
    268a:	bb 1f       	adc	r27, r27
    268c:	62 17       	cp	r22, r18
    268e:	73 07       	cpc	r23, r19
    2690:	84 07       	cpc	r24, r20
    2692:	ba 07       	cpc	r27, r26
    2694:	20 f0       	brcs	.+8      	; 0x269e <__divsf3_pse+0xaa>
    2696:	62 1b       	sub	r22, r18
    2698:	73 0b       	sbc	r23, r19
    269a:	84 0b       	sbc	r24, r20
    269c:	ba 0b       	sbc	r27, r26
    269e:	ee 1f       	adc	r30, r30
    26a0:	88 f7       	brcc	.-30     	; 0x2684 <__divsf3_pse+0x90>
    26a2:	e0 95       	com	r30
    26a4:	08 95       	ret

000026a6 <__fixsfdi>:
    26a6:	be e3       	ldi	r27, 0x3E	; 62
    26a8:	04 d0       	rcall	.+8      	; 0x26b2 <__fixunssfdi+0x2>
    26aa:	08 f4       	brcc	.+2      	; 0x26ae <__fixsfdi+0x8>
    26ac:	90 e8       	ldi	r25, 0x80	; 128
    26ae:	08 95       	ret

000026b0 <__fixunssfdi>:
    26b0:	bf e3       	ldi	r27, 0x3F	; 63
    26b2:	22 27       	eor	r18, r18
    26b4:	33 27       	eor	r19, r19
    26b6:	a9 01       	movw	r20, r18
    26b8:	65 d1       	rcall	.+714    	; 0x2984 <__fp_splitA>
    26ba:	58 f1       	brcs	.+86     	; 0x2712 <__fixunssfdi+0x62>
    26bc:	9f 57       	subi	r25, 0x7F	; 127
    26be:	40 f1       	brcs	.+80     	; 0x2710 <__fixunssfdi+0x60>
    26c0:	b9 17       	cp	r27, r25
    26c2:	38 f1       	brcs	.+78     	; 0x2712 <__fixunssfdi+0x62>
    26c4:	bf e3       	ldi	r27, 0x3F	; 63
    26c6:	b9 1b       	sub	r27, r25
    26c8:	99 27       	eor	r25, r25
    26ca:	b8 50       	subi	r27, 0x08	; 8
    26cc:	3a f4       	brpl	.+14     	; 0x26dc <__fixunssfdi+0x2c>
    26ce:	66 0f       	add	r22, r22
    26d0:	77 1f       	adc	r23, r23
    26d2:	88 1f       	adc	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	b3 95       	inc	r27
    26d8:	d2 f3       	brmi	.-12     	; 0x26ce <__fixunssfdi+0x1e>
    26da:	16 c0       	rjmp	.+44     	; 0x2708 <__fixunssfdi+0x58>
    26dc:	b8 50       	subi	r27, 0x08	; 8
    26de:	4a f0       	brmi	.+18     	; 0x26f2 <__fixunssfdi+0x42>
    26e0:	23 2f       	mov	r18, r19
    26e2:	34 2f       	mov	r19, r20
    26e4:	45 2f       	mov	r20, r21
    26e6:	56 2f       	mov	r21, r22
    26e8:	67 2f       	mov	r22, r23
    26ea:	78 2f       	mov	r23, r24
    26ec:	88 27       	eor	r24, r24
    26ee:	b8 50       	subi	r27, 0x08	; 8
    26f0:	ba f7       	brpl	.-18     	; 0x26e0 <__fixunssfdi+0x30>
    26f2:	b8 5f       	subi	r27, 0xF8	; 248
    26f4:	49 f0       	breq	.+18     	; 0x2708 <__fixunssfdi+0x58>
    26f6:	86 95       	lsr	r24
    26f8:	77 95       	ror	r23
    26fa:	67 95       	ror	r22
    26fc:	57 95       	ror	r21
    26fe:	47 95       	ror	r20
    2700:	37 95       	ror	r19
    2702:	27 95       	ror	r18
    2704:	ba 95       	dec	r27
    2706:	b9 f7       	brne	.-18     	; 0x26f6 <__fixunssfdi+0x46>
    2708:	0e f4       	brtc	.+2      	; 0x270c <__fixunssfdi+0x5c>
    270a:	e0 d0       	rcall	.+448    	; 0x28cc <__fp_negdi>
    270c:	88 94       	clc
    270e:	08 95       	ret
    2710:	88 94       	clc
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	cb 01       	movw	r24, r22
    2718:	08 95       	ret

0000271a <__fixsfsi>:
    271a:	04 d0       	rcall	.+8      	; 0x2724 <__fixunssfsi>
    271c:	68 94       	set
    271e:	b1 11       	cpse	r27, r1
    2720:	4c c1       	rjmp	.+664    	; 0x29ba <__fp_szero>
    2722:	08 95       	ret

00002724 <__fixunssfsi>:
    2724:	2f d1       	rcall	.+606    	; 0x2984 <__fp_splitA>
    2726:	88 f0       	brcs	.+34     	; 0x274a <__fixunssfsi+0x26>
    2728:	9f 57       	subi	r25, 0x7F	; 127
    272a:	90 f0       	brcs	.+36     	; 0x2750 <__fixunssfsi+0x2c>
    272c:	b9 2f       	mov	r27, r25
    272e:	99 27       	eor	r25, r25
    2730:	b7 51       	subi	r27, 0x17	; 23
    2732:	a0 f0       	brcs	.+40     	; 0x275c <__fixunssfsi+0x38>
    2734:	d1 f0       	breq	.+52     	; 0x276a <__fixunssfsi+0x46>
    2736:	66 0f       	add	r22, r22
    2738:	77 1f       	adc	r23, r23
    273a:	88 1f       	adc	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	1a f0       	brmi	.+6      	; 0x2746 <__fixunssfsi+0x22>
    2740:	ba 95       	dec	r27
    2742:	c9 f7       	brne	.-14     	; 0x2736 <__fixunssfsi+0x12>
    2744:	12 c0       	rjmp	.+36     	; 0x276a <__fixunssfsi+0x46>
    2746:	b1 30       	cpi	r27, 0x01	; 1
    2748:	81 f0       	breq	.+32     	; 0x276a <__fixunssfsi+0x46>
    274a:	36 d1       	rcall	.+620    	; 0x29b8 <__fp_zero>
    274c:	b1 e0       	ldi	r27, 0x01	; 1
    274e:	08 95       	ret
    2750:	33 c1       	rjmp	.+614    	; 0x29b8 <__fp_zero>
    2752:	67 2f       	mov	r22, r23
    2754:	78 2f       	mov	r23, r24
    2756:	88 27       	eor	r24, r24
    2758:	b8 5f       	subi	r27, 0xF8	; 248
    275a:	39 f0       	breq	.+14     	; 0x276a <__fixunssfsi+0x46>
    275c:	b9 3f       	cpi	r27, 0xF9	; 249
    275e:	cc f3       	brlt	.-14     	; 0x2752 <__fixunssfsi+0x2e>
    2760:	86 95       	lsr	r24
    2762:	77 95       	ror	r23
    2764:	67 95       	ror	r22
    2766:	b3 95       	inc	r27
    2768:	d9 f7       	brne	.-10     	; 0x2760 <__fixunssfsi+0x3c>
    276a:	3e f4       	brtc	.+14     	; 0x277a <__fixunssfsi+0x56>
    276c:	90 95       	com	r25
    276e:	80 95       	com	r24
    2770:	70 95       	com	r23
    2772:	61 95       	neg	r22
    2774:	7f 4f       	sbci	r23, 0xFF	; 255
    2776:	8f 4f       	sbci	r24, 0xFF	; 255
    2778:	9f 4f       	sbci	r25, 0xFF	; 255
    277a:	08 95       	ret

0000277c <__floatunsisf>:
    277c:	e8 94       	clt
    277e:	09 c0       	rjmp	.+18     	; 0x2792 <__floatsisf+0x12>

00002780 <__floatsisf>:
    2780:	97 fb       	bst	r25, 7
    2782:	3e f4       	brtc	.+14     	; 0x2792 <__floatsisf+0x12>
    2784:	90 95       	com	r25
    2786:	80 95       	com	r24
    2788:	70 95       	com	r23
    278a:	61 95       	neg	r22
    278c:	7f 4f       	sbci	r23, 0xFF	; 255
    278e:	8f 4f       	sbci	r24, 0xFF	; 255
    2790:	9f 4f       	sbci	r25, 0xFF	; 255
    2792:	99 23       	and	r25, r25
    2794:	a9 f0       	breq	.+42     	; 0x27c0 <__floatsisf+0x40>
    2796:	f9 2f       	mov	r31, r25
    2798:	96 e9       	ldi	r25, 0x96	; 150
    279a:	bb 27       	eor	r27, r27
    279c:	93 95       	inc	r25
    279e:	f6 95       	lsr	r31
    27a0:	87 95       	ror	r24
    27a2:	77 95       	ror	r23
    27a4:	67 95       	ror	r22
    27a6:	b7 95       	ror	r27
    27a8:	f1 11       	cpse	r31, r1
    27aa:	f8 cf       	rjmp	.-16     	; 0x279c <__floatsisf+0x1c>
    27ac:	fa f4       	brpl	.+62     	; 0x27ec <__floatsisf+0x6c>
    27ae:	bb 0f       	add	r27, r27
    27b0:	11 f4       	brne	.+4      	; 0x27b6 <__floatsisf+0x36>
    27b2:	60 ff       	sbrs	r22, 0
    27b4:	1b c0       	rjmp	.+54     	; 0x27ec <__floatsisf+0x6c>
    27b6:	6f 5f       	subi	r22, 0xFF	; 255
    27b8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ba:	8f 4f       	sbci	r24, 0xFF	; 255
    27bc:	9f 4f       	sbci	r25, 0xFF	; 255
    27be:	16 c0       	rjmp	.+44     	; 0x27ec <__floatsisf+0x6c>
    27c0:	88 23       	and	r24, r24
    27c2:	11 f0       	breq	.+4      	; 0x27c8 <__floatsisf+0x48>
    27c4:	96 e9       	ldi	r25, 0x96	; 150
    27c6:	11 c0       	rjmp	.+34     	; 0x27ea <__floatsisf+0x6a>
    27c8:	77 23       	and	r23, r23
    27ca:	21 f0       	breq	.+8      	; 0x27d4 <__floatsisf+0x54>
    27cc:	9e e8       	ldi	r25, 0x8E	; 142
    27ce:	87 2f       	mov	r24, r23
    27d0:	76 2f       	mov	r23, r22
    27d2:	05 c0       	rjmp	.+10     	; 0x27de <__floatsisf+0x5e>
    27d4:	66 23       	and	r22, r22
    27d6:	71 f0       	breq	.+28     	; 0x27f4 <__floatsisf+0x74>
    27d8:	96 e8       	ldi	r25, 0x86	; 134
    27da:	86 2f       	mov	r24, r22
    27dc:	70 e0       	ldi	r23, 0x00	; 0
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	2a f0       	brmi	.+10     	; 0x27ec <__floatsisf+0x6c>
    27e2:	9a 95       	dec	r25
    27e4:	66 0f       	add	r22, r22
    27e6:	77 1f       	adc	r23, r23
    27e8:	88 1f       	adc	r24, r24
    27ea:	da f7       	brpl	.-10     	; 0x27e2 <__floatsisf+0x62>
    27ec:	88 0f       	add	r24, r24
    27ee:	96 95       	lsr	r25
    27f0:	87 95       	ror	r24
    27f2:	97 f9       	bld	r25, 7
    27f4:	08 95       	ret

000027f6 <__floatundisf>:
    27f6:	e8 94       	clt

000027f8 <__fp_di2sf>:
    27f8:	f9 2f       	mov	r31, r25
    27fa:	96 eb       	ldi	r25, 0xB6	; 182
    27fc:	ff 23       	and	r31, r31
    27fe:	81 f0       	breq	.+32     	; 0x2820 <__fp_di2sf+0x28>
    2800:	12 16       	cp	r1, r18
    2802:	13 06       	cpc	r1, r19
    2804:	14 06       	cpc	r1, r20
    2806:	44 0b       	sbc	r20, r20
    2808:	93 95       	inc	r25
    280a:	f6 95       	lsr	r31
    280c:	87 95       	ror	r24
    280e:	77 95       	ror	r23
    2810:	67 95       	ror	r22
    2812:	57 95       	ror	r21
    2814:	40 40       	sbci	r20, 0x00	; 0
    2816:	ff 23       	and	r31, r31
    2818:	b9 f7       	brne	.-18     	; 0x2808 <__fp_di2sf+0x10>
    281a:	1b c0       	rjmp	.+54     	; 0x2852 <__fp_di2sf+0x5a>
    281c:	99 27       	eor	r25, r25
    281e:	08 95       	ret
    2820:	88 23       	and	r24, r24
    2822:	51 f4       	brne	.+20     	; 0x2838 <__fp_di2sf+0x40>
    2824:	98 50       	subi	r25, 0x08	; 8
    2826:	d2 f7       	brpl	.-12     	; 0x281c <__fp_di2sf+0x24>
    2828:	87 2b       	or	r24, r23
    282a:	76 2f       	mov	r23, r22
    282c:	65 2f       	mov	r22, r21
    282e:	54 2f       	mov	r21, r20
    2830:	43 2f       	mov	r20, r19
    2832:	32 2f       	mov	r19, r18
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	b1 f3       	breq	.-20     	; 0x2824 <__fp_di2sf+0x2c>
    2838:	12 16       	cp	r1, r18
    283a:	13 06       	cpc	r1, r19
    283c:	14 06       	cpc	r1, r20
    283e:	44 0b       	sbc	r20, r20
    2840:	88 23       	and	r24, r24
    2842:	3a f0       	brmi	.+14     	; 0x2852 <__fp_di2sf+0x5a>
    2844:	9a 95       	dec	r25
    2846:	44 0f       	add	r20, r20
    2848:	55 1f       	adc	r21, r21
    284a:	66 1f       	adc	r22, r22
    284c:	77 1f       	adc	r23, r23
    284e:	88 1f       	adc	r24, r24
    2850:	ca f7       	brpl	.-14     	; 0x2844 <__fp_di2sf+0x4c>
    2852:	55 23       	and	r21, r21
    2854:	4a f4       	brpl	.+18     	; 0x2868 <__fp_di2sf+0x70>
    2856:	44 0f       	add	r20, r20
    2858:	55 1f       	adc	r21, r21
    285a:	11 f4       	brne	.+4      	; 0x2860 <__fp_di2sf+0x68>
    285c:	60 ff       	sbrs	r22, 0
    285e:	04 c0       	rjmp	.+8      	; 0x2868 <__fp_di2sf+0x70>
    2860:	6f 5f       	subi	r22, 0xFF	; 255
    2862:	7f 4f       	sbci	r23, 0xFF	; 255
    2864:	8f 4f       	sbci	r24, 0xFF	; 255
    2866:	9f 4f       	sbci	r25, 0xFF	; 255
    2868:	88 0f       	add	r24, r24
    286a:	96 95       	lsr	r25
    286c:	87 95       	ror	r24
    286e:	97 f9       	bld	r25, 7
    2870:	08 95       	ret

00002872 <__fp_cmp>:
    2872:	99 0f       	add	r25, r25
    2874:	00 08       	sbc	r0, r0
    2876:	55 0f       	add	r21, r21
    2878:	aa 0b       	sbc	r26, r26
    287a:	e0 e8       	ldi	r30, 0x80	; 128
    287c:	fe ef       	ldi	r31, 0xFE	; 254
    287e:	16 16       	cp	r1, r22
    2880:	17 06       	cpc	r1, r23
    2882:	e8 07       	cpc	r30, r24
    2884:	f9 07       	cpc	r31, r25
    2886:	c0 f0       	brcs	.+48     	; 0x28b8 <__fp_cmp+0x46>
    2888:	12 16       	cp	r1, r18
    288a:	13 06       	cpc	r1, r19
    288c:	e4 07       	cpc	r30, r20
    288e:	f5 07       	cpc	r31, r21
    2890:	98 f0       	brcs	.+38     	; 0x28b8 <__fp_cmp+0x46>
    2892:	62 1b       	sub	r22, r18
    2894:	73 0b       	sbc	r23, r19
    2896:	84 0b       	sbc	r24, r20
    2898:	95 0b       	sbc	r25, r21
    289a:	39 f4       	brne	.+14     	; 0x28aa <__fp_cmp+0x38>
    289c:	0a 26       	eor	r0, r26
    289e:	61 f0       	breq	.+24     	; 0x28b8 <__fp_cmp+0x46>
    28a0:	23 2b       	or	r18, r19
    28a2:	24 2b       	or	r18, r20
    28a4:	25 2b       	or	r18, r21
    28a6:	21 f4       	brne	.+8      	; 0x28b0 <__fp_cmp+0x3e>
    28a8:	08 95       	ret
    28aa:	0a 26       	eor	r0, r26
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <__fp_cmp+0x3e>
    28ae:	a1 40       	sbci	r26, 0x01	; 1
    28b0:	a6 95       	lsr	r26
    28b2:	8f ef       	ldi	r24, 0xFF	; 255
    28b4:	81 1d       	adc	r24, r1
    28b6:	81 1d       	adc	r24, r1
    28b8:	08 95       	ret

000028ba <__fp_inf>:
    28ba:	97 f9       	bld	r25, 7
    28bc:	9f 67       	ori	r25, 0x7F	; 127
    28be:	80 e8       	ldi	r24, 0x80	; 128
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	08 95       	ret

000028c6 <__fp_nan>:
    28c6:	9f ef       	ldi	r25, 0xFF	; 255
    28c8:	80 ec       	ldi	r24, 0xC0	; 192
    28ca:	08 95       	ret

000028cc <__fp_negdi>:
    28cc:	90 95       	com	r25
    28ce:	80 95       	com	r24
    28d0:	70 95       	com	r23
    28d2:	60 95       	com	r22
    28d4:	50 95       	com	r21
    28d6:	40 95       	com	r20
    28d8:	30 95       	com	r19
    28da:	21 95       	neg	r18
    28dc:	3f 4f       	sbci	r19, 0xFF	; 255
    28de:	4f 4f       	sbci	r20, 0xFF	; 255
    28e0:	5f 4f       	sbci	r21, 0xFF	; 255
    28e2:	6f 4f       	sbci	r22, 0xFF	; 255
    28e4:	7f 4f       	sbci	r23, 0xFF	; 255
    28e6:	8f 4f       	sbci	r24, 0xFF	; 255
    28e8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ea:	08 95       	ret

000028ec <__fp_powser>:
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	1f 93       	push	r17
    28f2:	0f 93       	push	r16
    28f4:	ff 92       	push	r15
    28f6:	ef 92       	push	r14
    28f8:	df 92       	push	r13
    28fa:	7b 01       	movw	r14, r22
    28fc:	8c 01       	movw	r16, r24
    28fe:	68 94       	set
    2900:	05 c0       	rjmp	.+10     	; 0x290c <__fp_powser+0x20>
    2902:	da 2e       	mov	r13, r26
    2904:	ef 01       	movw	r28, r30
    2906:	76 d0       	rcall	.+236    	; 0x29f4 <__mulsf3x>
    2908:	fe 01       	movw	r30, r28
    290a:	e8 94       	clt
    290c:	a5 91       	lpm	r26, Z+
    290e:	25 91       	lpm	r18, Z+
    2910:	35 91       	lpm	r19, Z+
    2912:	45 91       	lpm	r20, Z+
    2914:	55 91       	lpm	r21, Z+
    2916:	ae f3       	brts	.-22     	; 0x2902 <__fp_powser+0x16>
    2918:	ef 01       	movw	r28, r30
    291a:	06 de       	rcall	.-1012   	; 0x2528 <__addsf3x>
    291c:	fe 01       	movw	r30, r28
    291e:	97 01       	movw	r18, r14
    2920:	a8 01       	movw	r20, r16
    2922:	da 94       	dec	r13
    2924:	79 f7       	brne	.-34     	; 0x2904 <__fp_powser+0x18>
    2926:	df 90       	pop	r13
    2928:	ef 90       	pop	r14
    292a:	ff 90       	pop	r15
    292c:	0f 91       	pop	r16
    292e:	1f 91       	pop	r17
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <__fp_pscA>:
    2936:	00 24       	eor	r0, r0
    2938:	0a 94       	dec	r0
    293a:	16 16       	cp	r1, r22
    293c:	17 06       	cpc	r1, r23
    293e:	18 06       	cpc	r1, r24
    2940:	09 06       	cpc	r0, r25
    2942:	08 95       	ret

00002944 <__fp_pscB>:
    2944:	00 24       	eor	r0, r0
    2946:	0a 94       	dec	r0
    2948:	12 16       	cp	r1, r18
    294a:	13 06       	cpc	r1, r19
    294c:	14 06       	cpc	r1, r20
    294e:	05 06       	cpc	r0, r21
    2950:	08 95       	ret

00002952 <__fp_round>:
    2952:	09 2e       	mov	r0, r25
    2954:	03 94       	inc	r0
    2956:	00 0c       	add	r0, r0
    2958:	11 f4       	brne	.+4      	; 0x295e <__fp_round+0xc>
    295a:	88 23       	and	r24, r24
    295c:	52 f0       	brmi	.+20     	; 0x2972 <__fp_round+0x20>
    295e:	bb 0f       	add	r27, r27
    2960:	40 f4       	brcc	.+16     	; 0x2972 <__fp_round+0x20>
    2962:	bf 2b       	or	r27, r31
    2964:	11 f4       	brne	.+4      	; 0x296a <__fp_round+0x18>
    2966:	60 ff       	sbrs	r22, 0
    2968:	04 c0       	rjmp	.+8      	; 0x2972 <__fp_round+0x20>
    296a:	6f 5f       	subi	r22, 0xFF	; 255
    296c:	7f 4f       	sbci	r23, 0xFF	; 255
    296e:	8f 4f       	sbci	r24, 0xFF	; 255
    2970:	9f 4f       	sbci	r25, 0xFF	; 255
    2972:	08 95       	ret

00002974 <__fp_split3>:
    2974:	57 fd       	sbrc	r21, 7
    2976:	90 58       	subi	r25, 0x80	; 128
    2978:	44 0f       	add	r20, r20
    297a:	55 1f       	adc	r21, r21
    297c:	59 f0       	breq	.+22     	; 0x2994 <__fp_splitA+0x10>
    297e:	5f 3f       	cpi	r21, 0xFF	; 255
    2980:	71 f0       	breq	.+28     	; 0x299e <__fp_splitA+0x1a>
    2982:	47 95       	ror	r20

00002984 <__fp_splitA>:
    2984:	88 0f       	add	r24, r24
    2986:	97 fb       	bst	r25, 7
    2988:	99 1f       	adc	r25, r25
    298a:	61 f0       	breq	.+24     	; 0x29a4 <__fp_splitA+0x20>
    298c:	9f 3f       	cpi	r25, 0xFF	; 255
    298e:	79 f0       	breq	.+30     	; 0x29ae <__fp_splitA+0x2a>
    2990:	87 95       	ror	r24
    2992:	08 95       	ret
    2994:	12 16       	cp	r1, r18
    2996:	13 06       	cpc	r1, r19
    2998:	14 06       	cpc	r1, r20
    299a:	55 1f       	adc	r21, r21
    299c:	f2 cf       	rjmp	.-28     	; 0x2982 <__fp_split3+0xe>
    299e:	46 95       	lsr	r20
    29a0:	f1 df       	rcall	.-30     	; 0x2984 <__fp_splitA>
    29a2:	08 c0       	rjmp	.+16     	; 0x29b4 <__fp_splitA+0x30>
    29a4:	16 16       	cp	r1, r22
    29a6:	17 06       	cpc	r1, r23
    29a8:	18 06       	cpc	r1, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	f1 cf       	rjmp	.-30     	; 0x2990 <__fp_splitA+0xc>
    29ae:	86 95       	lsr	r24
    29b0:	71 05       	cpc	r23, r1
    29b2:	61 05       	cpc	r22, r1
    29b4:	08 94       	sec
    29b6:	08 95       	ret

000029b8 <__fp_zero>:
    29b8:	e8 94       	clt

000029ba <__fp_szero>:
    29ba:	bb 27       	eor	r27, r27
    29bc:	66 27       	eor	r22, r22
    29be:	77 27       	eor	r23, r23
    29c0:	cb 01       	movw	r24, r22
    29c2:	97 f9       	bld	r25, 7
    29c4:	08 95       	ret

000029c6 <__gesf2>:
    29c6:	55 df       	rcall	.-342    	; 0x2872 <__fp_cmp>
    29c8:	08 f4       	brcc	.+2      	; 0x29cc <__gesf2+0x6>
    29ca:	8f ef       	ldi	r24, 0xFF	; 255
    29cc:	08 95       	ret

000029ce <inverse>:
    29ce:	9b 01       	movw	r18, r22
    29d0:	ac 01       	movw	r20, r24
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	70 e0       	ldi	r23, 0x00	; 0
    29d6:	80 e8       	ldi	r24, 0x80	; 128
    29d8:	9f e3       	ldi	r25, 0x3F	; 63
    29da:	fd cd       	rjmp	.-1030   	; 0x25d6 <__divsf3>

000029dc <__mulsf3>:
    29dc:	0b d0       	rcall	.+22     	; 0x29f4 <__mulsf3x>
    29de:	b9 cf       	rjmp	.-142    	; 0x2952 <__fp_round>
    29e0:	aa df       	rcall	.-172    	; 0x2936 <__fp_pscA>
    29e2:	28 f0       	brcs	.+10     	; 0x29ee <__mulsf3+0x12>
    29e4:	af df       	rcall	.-162    	; 0x2944 <__fp_pscB>
    29e6:	18 f0       	brcs	.+6      	; 0x29ee <__mulsf3+0x12>
    29e8:	95 23       	and	r25, r21
    29ea:	09 f0       	breq	.+2      	; 0x29ee <__mulsf3+0x12>
    29ec:	66 cf       	rjmp	.-308    	; 0x28ba <__fp_inf>
    29ee:	6b cf       	rjmp	.-298    	; 0x28c6 <__fp_nan>
    29f0:	11 24       	eor	r1, r1
    29f2:	e3 cf       	rjmp	.-58     	; 0x29ba <__fp_szero>

000029f4 <__mulsf3x>:
    29f4:	bf df       	rcall	.-130    	; 0x2974 <__fp_split3>
    29f6:	a0 f3       	brcs	.-24     	; 0x29e0 <__mulsf3+0x4>

000029f8 <__mulsf3_pse>:
    29f8:	95 9f       	mul	r25, r21
    29fa:	d1 f3       	breq	.-12     	; 0x29f0 <__mulsf3+0x14>
    29fc:	95 0f       	add	r25, r21
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	55 1f       	adc	r21, r21
    2a02:	62 9f       	mul	r22, r18
    2a04:	f0 01       	movw	r30, r0
    2a06:	72 9f       	mul	r23, r18
    2a08:	bb 27       	eor	r27, r27
    2a0a:	f0 0d       	add	r31, r0
    2a0c:	b1 1d       	adc	r27, r1
    2a0e:	63 9f       	mul	r22, r19
    2a10:	aa 27       	eor	r26, r26
    2a12:	f0 0d       	add	r31, r0
    2a14:	b1 1d       	adc	r27, r1
    2a16:	aa 1f       	adc	r26, r26
    2a18:	64 9f       	mul	r22, r20
    2a1a:	66 27       	eor	r22, r22
    2a1c:	b0 0d       	add	r27, r0
    2a1e:	a1 1d       	adc	r26, r1
    2a20:	66 1f       	adc	r22, r22
    2a22:	82 9f       	mul	r24, r18
    2a24:	22 27       	eor	r18, r18
    2a26:	b0 0d       	add	r27, r0
    2a28:	a1 1d       	adc	r26, r1
    2a2a:	62 1f       	adc	r22, r18
    2a2c:	73 9f       	mul	r23, r19
    2a2e:	b0 0d       	add	r27, r0
    2a30:	a1 1d       	adc	r26, r1
    2a32:	62 1f       	adc	r22, r18
    2a34:	83 9f       	mul	r24, r19
    2a36:	a0 0d       	add	r26, r0
    2a38:	61 1d       	adc	r22, r1
    2a3a:	22 1f       	adc	r18, r18
    2a3c:	74 9f       	mul	r23, r20
    2a3e:	33 27       	eor	r19, r19
    2a40:	a0 0d       	add	r26, r0
    2a42:	61 1d       	adc	r22, r1
    2a44:	23 1f       	adc	r18, r19
    2a46:	84 9f       	mul	r24, r20
    2a48:	60 0d       	add	r22, r0
    2a4a:	21 1d       	adc	r18, r1
    2a4c:	82 2f       	mov	r24, r18
    2a4e:	76 2f       	mov	r23, r22
    2a50:	6a 2f       	mov	r22, r26
    2a52:	11 24       	eor	r1, r1
    2a54:	9f 57       	subi	r25, 0x7F	; 127
    2a56:	50 40       	sbci	r21, 0x00	; 0
    2a58:	8a f0       	brmi	.+34     	; 0x2a7c <__mulsf3_pse+0x84>
    2a5a:	e1 f0       	breq	.+56     	; 0x2a94 <__mulsf3_pse+0x9c>
    2a5c:	88 23       	and	r24, r24
    2a5e:	4a f0       	brmi	.+18     	; 0x2a72 <__mulsf3_pse+0x7a>
    2a60:	ee 0f       	add	r30, r30
    2a62:	ff 1f       	adc	r31, r31
    2a64:	bb 1f       	adc	r27, r27
    2a66:	66 1f       	adc	r22, r22
    2a68:	77 1f       	adc	r23, r23
    2a6a:	88 1f       	adc	r24, r24
    2a6c:	91 50       	subi	r25, 0x01	; 1
    2a6e:	50 40       	sbci	r21, 0x00	; 0
    2a70:	a9 f7       	brne	.-22     	; 0x2a5c <__mulsf3_pse+0x64>
    2a72:	9e 3f       	cpi	r25, 0xFE	; 254
    2a74:	51 05       	cpc	r21, r1
    2a76:	70 f0       	brcs	.+28     	; 0x2a94 <__mulsf3_pse+0x9c>
    2a78:	20 cf       	rjmp	.-448    	; 0x28ba <__fp_inf>
    2a7a:	9f cf       	rjmp	.-194    	; 0x29ba <__fp_szero>
    2a7c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a7e:	ec f3       	brlt	.-6      	; 0x2a7a <__mulsf3_pse+0x82>
    2a80:	98 3e       	cpi	r25, 0xE8	; 232
    2a82:	dc f3       	brlt	.-10     	; 0x2a7a <__mulsf3_pse+0x82>
    2a84:	86 95       	lsr	r24
    2a86:	77 95       	ror	r23
    2a88:	67 95       	ror	r22
    2a8a:	b7 95       	ror	r27
    2a8c:	f7 95       	ror	r31
    2a8e:	e7 95       	ror	r30
    2a90:	9f 5f       	subi	r25, 0xFF	; 255
    2a92:	c1 f7       	brne	.-16     	; 0x2a84 <__mulsf3_pse+0x8c>
    2a94:	fe 2b       	or	r31, r30
    2a96:	88 0f       	add	r24, r24
    2a98:	91 1d       	adc	r25, r1
    2a9a:	96 95       	lsr	r25
    2a9c:	87 95       	ror	r24
    2a9e:	97 f9       	bld	r25, 7
    2aa0:	08 95       	ret

00002aa2 <pow>:
    2aa2:	fa 01       	movw	r30, r20
    2aa4:	ee 0f       	add	r30, r30
    2aa6:	ff 1f       	adc	r31, r31
    2aa8:	30 96       	adiw	r30, 0x00	; 0
    2aaa:	21 05       	cpc	r18, r1
    2aac:	31 05       	cpc	r19, r1
    2aae:	99 f1       	breq	.+102    	; 0x2b16 <pow+0x74>
    2ab0:	61 15       	cp	r22, r1
    2ab2:	71 05       	cpc	r23, r1
    2ab4:	61 f4       	brne	.+24     	; 0x2ace <pow+0x2c>
    2ab6:	80 38       	cpi	r24, 0x80	; 128
    2ab8:	bf e3       	ldi	r27, 0x3F	; 63
    2aba:	9b 07       	cpc	r25, r27
    2abc:	49 f1       	breq	.+82     	; 0x2b10 <pow+0x6e>
    2abe:	68 94       	set
    2ac0:	90 38       	cpi	r25, 0x80	; 128
    2ac2:	81 05       	cpc	r24, r1
    2ac4:	61 f0       	breq	.+24     	; 0x2ade <pow+0x3c>
    2ac6:	80 38       	cpi	r24, 0x80	; 128
    2ac8:	bf ef       	ldi	r27, 0xFF	; 255
    2aca:	9b 07       	cpc	r25, r27
    2acc:	41 f0       	breq	.+16     	; 0x2ade <pow+0x3c>
    2ace:	99 23       	and	r25, r25
    2ad0:	42 f5       	brpl	.+80     	; 0x2b22 <pow+0x80>
    2ad2:	ff 3f       	cpi	r31, 0xFF	; 255
    2ad4:	e1 05       	cpc	r30, r1
    2ad6:	31 05       	cpc	r19, r1
    2ad8:	21 05       	cpc	r18, r1
    2ada:	11 f1       	breq	.+68     	; 0x2b20 <pow+0x7e>
    2adc:	e8 94       	clt
    2ade:	08 94       	sec
    2ae0:	e7 95       	ror	r30
    2ae2:	d9 01       	movw	r26, r18
    2ae4:	aa 23       	and	r26, r26
    2ae6:	29 f4       	brne	.+10     	; 0x2af2 <pow+0x50>
    2ae8:	ab 2f       	mov	r26, r27
    2aea:	be 2f       	mov	r27, r30
    2aec:	f8 5f       	subi	r31, 0xF8	; 248
    2aee:	d0 f3       	brcs	.-12     	; 0x2ae4 <pow+0x42>
    2af0:	10 c0       	rjmp	.+32     	; 0x2b12 <pow+0x70>
    2af2:	ff 5f       	subi	r31, 0xFF	; 255
    2af4:	70 f4       	brcc	.+28     	; 0x2b12 <pow+0x70>
    2af6:	a6 95       	lsr	r26
    2af8:	e0 f7       	brcc	.-8      	; 0x2af2 <pow+0x50>
    2afa:	f7 39       	cpi	r31, 0x97	; 151
    2afc:	50 f0       	brcs	.+20     	; 0x2b12 <pow+0x70>
    2afe:	19 f0       	breq	.+6      	; 0x2b06 <pow+0x64>
    2b00:	ff 3a       	cpi	r31, 0xAF	; 175
    2b02:	38 f4       	brcc	.+14     	; 0x2b12 <pow+0x70>
    2b04:	9f 77       	andi	r25, 0x7F	; 127
    2b06:	9f 93       	push	r25
    2b08:	0c d0       	rcall	.+24     	; 0x2b22 <pow+0x80>
    2b0a:	0f 90       	pop	r0
    2b0c:	07 fc       	sbrc	r0, 7
    2b0e:	90 58       	subi	r25, 0x80	; 128
    2b10:	08 95       	ret
    2b12:	3e f0       	brts	.+14     	; 0x2b22 <pow+0x80>
    2b14:	d8 ce       	rjmp	.-592    	; 0x28c6 <__fp_nan>
    2b16:	60 e0       	ldi	r22, 0x00	; 0
    2b18:	70 e0       	ldi	r23, 0x00	; 0
    2b1a:	80 e8       	ldi	r24, 0x80	; 128
    2b1c:	9f e3       	ldi	r25, 0x3F	; 63
    2b1e:	08 95       	ret
    2b20:	4f e7       	ldi	r20, 0x7F	; 127
    2b22:	9f 77       	andi	r25, 0x7F	; 127
    2b24:	5f 93       	push	r21
    2b26:	4f 93       	push	r20
    2b28:	3f 93       	push	r19
    2b2a:	2f 93       	push	r18
    2b2c:	80 d0       	rcall	.+256    	; 0x2c2e <log>
    2b2e:	2f 91       	pop	r18
    2b30:	3f 91       	pop	r19
    2b32:	4f 91       	pop	r20
    2b34:	5f 91       	pop	r21
    2b36:	52 df       	rcall	.-348    	; 0x29dc <__mulsf3>
    2b38:	05 c0       	rjmp	.+10     	; 0x2b44 <exp>
    2b3a:	19 f4       	brne	.+6      	; 0x2b42 <pow+0xa0>
    2b3c:	0e f0       	brts	.+2      	; 0x2b40 <pow+0x9e>
    2b3e:	bd ce       	rjmp	.-646    	; 0x28ba <__fp_inf>
    2b40:	3b cf       	rjmp	.-394    	; 0x29b8 <__fp_zero>
    2b42:	c1 ce       	rjmp	.-638    	; 0x28c6 <__fp_nan>

00002b44 <exp>:
    2b44:	1f df       	rcall	.-450    	; 0x2984 <__fp_splitA>
    2b46:	c8 f3       	brcs	.-14     	; 0x2b3a <pow+0x98>
    2b48:	96 38       	cpi	r25, 0x86	; 134
    2b4a:	c0 f7       	brcc	.-16     	; 0x2b3c <pow+0x9a>
    2b4c:	07 f8       	bld	r0, 7
    2b4e:	0f 92       	push	r0
    2b50:	e8 94       	clt
    2b52:	2b e3       	ldi	r18, 0x3B	; 59
    2b54:	3a ea       	ldi	r19, 0xAA	; 170
    2b56:	48 eb       	ldi	r20, 0xB8	; 184
    2b58:	5f e7       	ldi	r21, 0x7F	; 127
    2b5a:	4e df       	rcall	.-356    	; 0x29f8 <__mulsf3_pse>
    2b5c:	0f 92       	push	r0
    2b5e:	0f 92       	push	r0
    2b60:	0f 92       	push	r0
    2b62:	4d b7       	in	r20, 0x3d	; 61
    2b64:	5e b7       	in	r21, 0x3e	; 62
    2b66:	0f 92       	push	r0
    2b68:	a2 d0       	rcall	.+324    	; 0x2cae <modf>
    2b6a:	ec ef       	ldi	r30, 0xFC	; 252
    2b6c:	f1 e0       	ldi	r31, 0x01	; 1
    2b6e:	be de       	rcall	.-644    	; 0x28ec <__fp_powser>
    2b70:	4f 91       	pop	r20
    2b72:	5f 91       	pop	r21
    2b74:	ef 91       	pop	r30
    2b76:	ff 91       	pop	r31
    2b78:	e5 95       	asr	r30
    2b7a:	ee 1f       	adc	r30, r30
    2b7c:	ff 1f       	adc	r31, r31
    2b7e:	49 f0       	breq	.+18     	; 0x2b92 <exp+0x4e>
    2b80:	fe 57       	subi	r31, 0x7E	; 126
    2b82:	e0 68       	ori	r30, 0x80	; 128
    2b84:	44 27       	eor	r20, r20
    2b86:	ee 0f       	add	r30, r30
    2b88:	44 1f       	adc	r20, r20
    2b8a:	fa 95       	dec	r31
    2b8c:	e1 f7       	brne	.-8      	; 0x2b86 <exp+0x42>
    2b8e:	41 95       	neg	r20
    2b90:	55 0b       	sbc	r21, r21
    2b92:	14 d0       	rcall	.+40     	; 0x2bbc <ldexp>
    2b94:	0f 90       	pop	r0
    2b96:	07 fe       	sbrs	r0, 7
    2b98:	1a cf       	rjmp	.-460    	; 0x29ce <inverse>
    2b9a:	08 95       	ret

00002b9c <__fp_mpack>:
    2b9c:	9f 3f       	cpi	r25, 0xFF	; 255
    2b9e:	31 f0       	breq	.+12     	; 0x2bac <__fp_mpack_finite+0xc>

00002ba0 <__fp_mpack_finite>:
    2ba0:	91 50       	subi	r25, 0x01	; 1
    2ba2:	20 f4       	brcc	.+8      	; 0x2bac <__fp_mpack_finite+0xc>
    2ba4:	87 95       	ror	r24
    2ba6:	77 95       	ror	r23
    2ba8:	67 95       	ror	r22
    2baa:	b7 95       	ror	r27
    2bac:	88 0f       	add	r24, r24
    2bae:	91 1d       	adc	r25, r1
    2bb0:	96 95       	lsr	r25
    2bb2:	87 95       	ror	r24
    2bb4:	97 f9       	bld	r25, 7
    2bb6:	08 95       	ret
    2bb8:	80 ce       	rjmp	.-768    	; 0x28ba <__fp_inf>
    2bba:	f0 cf       	rjmp	.-32     	; 0x2b9c <__fp_mpack>

00002bbc <ldexp>:
    2bbc:	e3 de       	rcall	.-570    	; 0x2984 <__fp_splitA>
    2bbe:	e8 f3       	brcs	.-6      	; 0x2bba <__fp_mpack_finite+0x1a>
    2bc0:	99 23       	and	r25, r25
    2bc2:	d9 f3       	breq	.-10     	; 0x2bba <__fp_mpack_finite+0x1a>
    2bc4:	94 0f       	add	r25, r20
    2bc6:	51 1d       	adc	r21, r1
    2bc8:	bb f3       	brvs	.-18     	; 0x2bb8 <__fp_mpack_finite+0x18>
    2bca:	91 50       	subi	r25, 0x01	; 1
    2bcc:	50 40       	sbci	r21, 0x00	; 0
    2bce:	94 f0       	brlt	.+36     	; 0x2bf4 <ldexp+0x38>
    2bd0:	59 f0       	breq	.+22     	; 0x2be8 <ldexp+0x2c>
    2bd2:	88 23       	and	r24, r24
    2bd4:	32 f0       	brmi	.+12     	; 0x2be2 <ldexp+0x26>
    2bd6:	66 0f       	add	r22, r22
    2bd8:	77 1f       	adc	r23, r23
    2bda:	88 1f       	adc	r24, r24
    2bdc:	91 50       	subi	r25, 0x01	; 1
    2bde:	50 40       	sbci	r21, 0x00	; 0
    2be0:	c1 f7       	brne	.-16     	; 0x2bd2 <ldexp+0x16>
    2be2:	9e 3f       	cpi	r25, 0xFE	; 254
    2be4:	51 05       	cpc	r21, r1
    2be6:	44 f7       	brge	.-48     	; 0x2bb8 <__fp_mpack_finite+0x18>
    2be8:	88 0f       	add	r24, r24
    2bea:	91 1d       	adc	r25, r1
    2bec:	96 95       	lsr	r25
    2bee:	87 95       	ror	r24
    2bf0:	97 f9       	bld	r25, 7
    2bf2:	08 95       	ret
    2bf4:	5f 3f       	cpi	r21, 0xFF	; 255
    2bf6:	ac f0       	brlt	.+42     	; 0x2c22 <ldexp+0x66>
    2bf8:	98 3e       	cpi	r25, 0xE8	; 232
    2bfa:	9c f0       	brlt	.+38     	; 0x2c22 <ldexp+0x66>
    2bfc:	bb 27       	eor	r27, r27
    2bfe:	86 95       	lsr	r24
    2c00:	77 95       	ror	r23
    2c02:	67 95       	ror	r22
    2c04:	b7 95       	ror	r27
    2c06:	08 f4       	brcc	.+2      	; 0x2c0a <ldexp+0x4e>
    2c08:	b1 60       	ori	r27, 0x01	; 1
    2c0a:	93 95       	inc	r25
    2c0c:	c1 f7       	brne	.-16     	; 0x2bfe <ldexp+0x42>
    2c0e:	bb 0f       	add	r27, r27
    2c10:	58 f7       	brcc	.-42     	; 0x2be8 <ldexp+0x2c>
    2c12:	11 f4       	brne	.+4      	; 0x2c18 <ldexp+0x5c>
    2c14:	60 ff       	sbrs	r22, 0
    2c16:	e8 cf       	rjmp	.-48     	; 0x2be8 <ldexp+0x2c>
    2c18:	6f 5f       	subi	r22, 0xFF	; 255
    2c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c20:	e3 cf       	rjmp	.-58     	; 0x2be8 <ldexp+0x2c>
    2c22:	cb ce       	rjmp	.-618    	; 0x29ba <__fp_szero>
    2c24:	0e f0       	brts	.+2      	; 0x2c28 <ldexp+0x6c>
    2c26:	ba cf       	rjmp	.-140    	; 0x2b9c <__fp_mpack>
    2c28:	4e ce       	rjmp	.-868    	; 0x28c6 <__fp_nan>
    2c2a:	68 94       	set
    2c2c:	46 ce       	rjmp	.-884    	; 0x28ba <__fp_inf>

00002c2e <log>:
    2c2e:	aa de       	rcall	.-684    	; 0x2984 <__fp_splitA>
    2c30:	c8 f3       	brcs	.-14     	; 0x2c24 <ldexp+0x68>
    2c32:	99 23       	and	r25, r25
    2c34:	d1 f3       	breq	.-12     	; 0x2c2a <ldexp+0x6e>
    2c36:	c6 f3       	brts	.-16     	; 0x2c28 <ldexp+0x6c>
    2c38:	df 93       	push	r29
    2c3a:	cf 93       	push	r28
    2c3c:	1f 93       	push	r17
    2c3e:	0f 93       	push	r16
    2c40:	ff 92       	push	r15
    2c42:	c9 2f       	mov	r28, r25
    2c44:	dd 27       	eor	r29, r29
    2c46:	88 23       	and	r24, r24
    2c48:	2a f0       	brmi	.+10     	; 0x2c54 <log+0x26>
    2c4a:	21 97       	sbiw	r28, 0x01	; 1
    2c4c:	66 0f       	add	r22, r22
    2c4e:	77 1f       	adc	r23, r23
    2c50:	88 1f       	adc	r24, r24
    2c52:	da f7       	brpl	.-10     	; 0x2c4a <log+0x1c>
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e8       	ldi	r20, 0x80	; 128
    2c5a:	5f eb       	ldi	r21, 0xBF	; 191
    2c5c:	9f e3       	ldi	r25, 0x3F	; 63
    2c5e:	88 39       	cpi	r24, 0x98	; 152
    2c60:	20 f0       	brcs	.+8      	; 0x2c6a <log+0x3c>
    2c62:	80 3e       	cpi	r24, 0xE0	; 224
    2c64:	30 f0       	brcs	.+12     	; 0x2c72 <log+0x44>
    2c66:	21 96       	adiw	r28, 0x01	; 1
    2c68:	8f 77       	andi	r24, 0x7F	; 127
    2c6a:	4d dc       	rcall	.-1894   	; 0x2506 <__addsf3>
    2c6c:	e4 e2       	ldi	r30, 0x24	; 36
    2c6e:	f2 e0       	ldi	r31, 0x02	; 2
    2c70:	03 c0       	rjmp	.+6      	; 0x2c78 <log+0x4a>
    2c72:	49 dc       	rcall	.-1902   	; 0x2506 <__addsf3>
    2c74:	e1 e5       	ldi	r30, 0x51	; 81
    2c76:	f2 e0       	ldi	r31, 0x02	; 2
    2c78:	39 de       	rcall	.-910    	; 0x28ec <__fp_powser>
    2c7a:	8b 01       	movw	r16, r22
    2c7c:	be 01       	movw	r22, r28
    2c7e:	ec 01       	movw	r28, r24
    2c80:	fb 2e       	mov	r15, r27
    2c82:	6f 57       	subi	r22, 0x7F	; 127
    2c84:	71 09       	sbc	r23, r1
    2c86:	75 95       	asr	r23
    2c88:	77 1f       	adc	r23, r23
    2c8a:	88 0b       	sbc	r24, r24
    2c8c:	99 0b       	sbc	r25, r25
    2c8e:	78 dd       	rcall	.-1296   	; 0x2780 <__floatsisf>
    2c90:	28 e1       	ldi	r18, 0x18	; 24
    2c92:	32 e7       	ldi	r19, 0x72	; 114
    2c94:	41 e3       	ldi	r20, 0x31	; 49
    2c96:	5f e3       	ldi	r21, 0x3F	; 63
    2c98:	ad de       	rcall	.-678    	; 0x29f4 <__mulsf3x>
    2c9a:	af 2d       	mov	r26, r15
    2c9c:	98 01       	movw	r18, r16
    2c9e:	ae 01       	movw	r20, r28
    2ca0:	ff 90       	pop	r15
    2ca2:	0f 91       	pop	r16
    2ca4:	1f 91       	pop	r17
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	3e dc       	rcall	.-1924   	; 0x2528 <__addsf3x>
    2cac:	52 ce       	rjmp	.-860    	; 0x2952 <__fp_round>

00002cae <modf>:
    2cae:	fa 01       	movw	r30, r20
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	aa 0f       	add	r26, r26
    2cb4:	bb 1f       	adc	r27, r27
    2cb6:	9b 01       	movw	r18, r22
    2cb8:	ac 01       	movw	r20, r24
    2cba:	bf 57       	subi	r27, 0x7F	; 127
    2cbc:	28 f4       	brcc	.+10     	; 0x2cc8 <modf+0x1a>
    2cbe:	22 27       	eor	r18, r18
    2cc0:	33 27       	eor	r19, r19
    2cc2:	44 27       	eor	r20, r20
    2cc4:	50 78       	andi	r21, 0x80	; 128
    2cc6:	1f c0       	rjmp	.+62     	; 0x2d06 <modf+0x58>
    2cc8:	b7 51       	subi	r27, 0x17	; 23
    2cca:	88 f4       	brcc	.+34     	; 0x2cee <modf+0x40>
    2ccc:	ab 2f       	mov	r26, r27
    2cce:	00 24       	eor	r0, r0
    2cd0:	46 95       	lsr	r20
    2cd2:	37 95       	ror	r19
    2cd4:	27 95       	ror	r18
    2cd6:	01 1c       	adc	r0, r1
    2cd8:	a3 95       	inc	r26
    2cda:	d2 f3       	brmi	.-12     	; 0x2cd0 <modf+0x22>
    2cdc:	00 20       	and	r0, r0
    2cde:	69 f0       	breq	.+26     	; 0x2cfa <modf+0x4c>
    2ce0:	22 0f       	add	r18, r18
    2ce2:	33 1f       	adc	r19, r19
    2ce4:	44 1f       	adc	r20, r20
    2ce6:	b3 95       	inc	r27
    2ce8:	da f3       	brmi	.-10     	; 0x2ce0 <modf+0x32>
    2cea:	0d d0       	rcall	.+26     	; 0x2d06 <modf+0x58>
    2cec:	0b cc       	rjmp	.-2026   	; 0x2504 <__subsf3>
    2cee:	61 30       	cpi	r22, 0x01	; 1
    2cf0:	71 05       	cpc	r23, r1
    2cf2:	a0 e8       	ldi	r26, 0x80	; 128
    2cf4:	8a 07       	cpc	r24, r26
    2cf6:	b9 46       	sbci	r27, 0x69	; 105
    2cf8:	30 f4       	brcc	.+12     	; 0x2d06 <modf+0x58>
    2cfa:	9b 01       	movw	r18, r22
    2cfc:	ac 01       	movw	r20, r24
    2cfe:	66 27       	eor	r22, r22
    2d00:	77 27       	eor	r23, r23
    2d02:	88 27       	eor	r24, r24
    2d04:	90 78       	andi	r25, 0x80	; 128
    2d06:	30 96       	adiw	r30, 0x00	; 0
    2d08:	21 f0       	breq	.+8      	; 0x2d12 <modf+0x64>
    2d0a:	20 83       	st	Z, r18
    2d0c:	31 83       	std	Z+1, r19	; 0x01
    2d0e:	42 83       	std	Z+2, r20	; 0x02
    2d10:	53 83       	std	Z+3, r21	; 0x03
    2d12:	08 95       	ret

00002d14 <__mulsi3>:
    2d14:	db 01       	movw	r26, r22
    2d16:	8f 93       	push	r24
    2d18:	9f 93       	push	r25
    2d1a:	70 d0       	rcall	.+224    	; 0x2dfc <__muluhisi3>
    2d1c:	bf 91       	pop	r27
    2d1e:	af 91       	pop	r26
    2d20:	a2 9f       	mul	r26, r18
    2d22:	80 0d       	add	r24, r0
    2d24:	91 1d       	adc	r25, r1
    2d26:	a3 9f       	mul	r26, r19
    2d28:	90 0d       	add	r25, r0
    2d2a:	b2 9f       	mul	r27, r18
    2d2c:	90 0d       	add	r25, r0
    2d2e:	11 24       	eor	r1, r1
    2d30:	08 95       	ret

00002d32 <__udivmodhi4>:
    2d32:	aa 1b       	sub	r26, r26
    2d34:	bb 1b       	sub	r27, r27
    2d36:	51 e1       	ldi	r21, 0x11	; 17
    2d38:	07 c0       	rjmp	.+14     	; 0x2d48 <__udivmodhi4_ep>

00002d3a <__udivmodhi4_loop>:
    2d3a:	aa 1f       	adc	r26, r26
    2d3c:	bb 1f       	adc	r27, r27
    2d3e:	a6 17       	cp	r26, r22
    2d40:	b7 07       	cpc	r27, r23
    2d42:	10 f0       	brcs	.+4      	; 0x2d48 <__udivmodhi4_ep>
    2d44:	a6 1b       	sub	r26, r22
    2d46:	b7 0b       	sbc	r27, r23

00002d48 <__udivmodhi4_ep>:
    2d48:	88 1f       	adc	r24, r24
    2d4a:	99 1f       	adc	r25, r25
    2d4c:	5a 95       	dec	r21
    2d4e:	a9 f7       	brne	.-22     	; 0x2d3a <__udivmodhi4_loop>
    2d50:	80 95       	com	r24
    2d52:	90 95       	com	r25
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	08 95       	ret

00002d5a <__divmodhi4>:
    2d5a:	97 fb       	bst	r25, 7
    2d5c:	07 2e       	mov	r0, r23
    2d5e:	16 f4       	brtc	.+4      	; 0x2d64 <__divmodhi4+0xa>
    2d60:	00 94       	com	r0
    2d62:	06 d0       	rcall	.+12     	; 0x2d70 <__divmodhi4_neg1>
    2d64:	77 fd       	sbrc	r23, 7
    2d66:	08 d0       	rcall	.+16     	; 0x2d78 <__divmodhi4_neg2>
    2d68:	e4 df       	rcall	.-56     	; 0x2d32 <__udivmodhi4>
    2d6a:	07 fc       	sbrc	r0, 7
    2d6c:	05 d0       	rcall	.+10     	; 0x2d78 <__divmodhi4_neg2>
    2d6e:	3e f4       	brtc	.+14     	; 0x2d7e <__divmodhi4_exit>

00002d70 <__divmodhi4_neg1>:
    2d70:	90 95       	com	r25
    2d72:	81 95       	neg	r24
    2d74:	9f 4f       	sbci	r25, 0xFF	; 255
    2d76:	08 95       	ret

00002d78 <__divmodhi4_neg2>:
    2d78:	70 95       	com	r23
    2d7a:	61 95       	neg	r22
    2d7c:	7f 4f       	sbci	r23, 0xFF	; 255

00002d7e <__divmodhi4_exit>:
    2d7e:	08 95       	ret

00002d80 <__udivmodsi4>:
    2d80:	a1 e2       	ldi	r26, 0x21	; 33
    2d82:	1a 2e       	mov	r1, r26
    2d84:	aa 1b       	sub	r26, r26
    2d86:	bb 1b       	sub	r27, r27
    2d88:	fd 01       	movw	r30, r26
    2d8a:	0d c0       	rjmp	.+26     	; 0x2da6 <__udivmodsi4_ep>

00002d8c <__udivmodsi4_loop>:
    2d8c:	aa 1f       	adc	r26, r26
    2d8e:	bb 1f       	adc	r27, r27
    2d90:	ee 1f       	adc	r30, r30
    2d92:	ff 1f       	adc	r31, r31
    2d94:	a2 17       	cp	r26, r18
    2d96:	b3 07       	cpc	r27, r19
    2d98:	e4 07       	cpc	r30, r20
    2d9a:	f5 07       	cpc	r31, r21
    2d9c:	20 f0       	brcs	.+8      	; 0x2da6 <__udivmodsi4_ep>
    2d9e:	a2 1b       	sub	r26, r18
    2da0:	b3 0b       	sbc	r27, r19
    2da2:	e4 0b       	sbc	r30, r20
    2da4:	f5 0b       	sbc	r31, r21

00002da6 <__udivmodsi4_ep>:
    2da6:	66 1f       	adc	r22, r22
    2da8:	77 1f       	adc	r23, r23
    2daa:	88 1f       	adc	r24, r24
    2dac:	99 1f       	adc	r25, r25
    2dae:	1a 94       	dec	r1
    2db0:	69 f7       	brne	.-38     	; 0x2d8c <__udivmodsi4_loop>
    2db2:	60 95       	com	r22
    2db4:	70 95       	com	r23
    2db6:	80 95       	com	r24
    2db8:	90 95       	com	r25
    2dba:	9b 01       	movw	r18, r22
    2dbc:	ac 01       	movw	r20, r24
    2dbe:	bd 01       	movw	r22, r26
    2dc0:	cf 01       	movw	r24, r30
    2dc2:	08 95       	ret

00002dc4 <__divmodsi4>:
    2dc4:	05 2e       	mov	r0, r21
    2dc6:	97 fb       	bst	r25, 7
    2dc8:	16 f4       	brtc	.+4      	; 0x2dce <__divmodsi4+0xa>
    2dca:	00 94       	com	r0
    2dcc:	0f d0       	rcall	.+30     	; 0x2dec <__negsi2>
    2dce:	57 fd       	sbrc	r21, 7
    2dd0:	05 d0       	rcall	.+10     	; 0x2ddc <__divmodsi4_neg2>
    2dd2:	d6 df       	rcall	.-84     	; 0x2d80 <__udivmodsi4>
    2dd4:	07 fc       	sbrc	r0, 7
    2dd6:	02 d0       	rcall	.+4      	; 0x2ddc <__divmodsi4_neg2>
    2dd8:	46 f4       	brtc	.+16     	; 0x2dea <__divmodsi4_exit>
    2dda:	08 c0       	rjmp	.+16     	; 0x2dec <__negsi2>

00002ddc <__divmodsi4_neg2>:
    2ddc:	50 95       	com	r21
    2dde:	40 95       	com	r20
    2de0:	30 95       	com	r19
    2de2:	21 95       	neg	r18
    2de4:	3f 4f       	sbci	r19, 0xFF	; 255
    2de6:	4f 4f       	sbci	r20, 0xFF	; 255
    2de8:	5f 4f       	sbci	r21, 0xFF	; 255

00002dea <__divmodsi4_exit>:
    2dea:	08 95       	ret

00002dec <__negsi2>:
    2dec:	90 95       	com	r25
    2dee:	80 95       	com	r24
    2df0:	70 95       	com	r23
    2df2:	61 95       	neg	r22
    2df4:	7f 4f       	sbci	r23, 0xFF	; 255
    2df6:	8f 4f       	sbci	r24, 0xFF	; 255
    2df8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfa:	08 95       	ret

00002dfc <__muluhisi3>:
    2dfc:	2d d0       	rcall	.+90     	; 0x2e58 <__umulhisi3>
    2dfe:	a5 9f       	mul	r26, r21
    2e00:	90 0d       	add	r25, r0
    2e02:	b4 9f       	mul	r27, r20
    2e04:	90 0d       	add	r25, r0
    2e06:	a4 9f       	mul	r26, r20
    2e08:	80 0d       	add	r24, r0
    2e0a:	91 1d       	adc	r25, r1
    2e0c:	11 24       	eor	r1, r1
    2e0e:	08 95       	ret

00002e10 <__mulshisi3>:
    2e10:	b7 ff       	sbrs	r27, 7
    2e12:	f4 cf       	rjmp	.-24     	; 0x2dfc <__muluhisi3>

00002e14 <__mulohisi3>:
    2e14:	f3 df       	rcall	.-26     	; 0x2dfc <__muluhisi3>
    2e16:	82 1b       	sub	r24, r18
    2e18:	93 0b       	sbc	r25, r19
    2e1a:	08 95       	ret

00002e1c <__ashrdi3>:
    2e1c:	97 fb       	bst	r25, 7
    2e1e:	10 f8       	bld	r1, 0

00002e20 <__lshrdi3>:
    2e20:	16 94       	lsr	r1
    2e22:	00 08       	sbc	r0, r0
    2e24:	0f 93       	push	r16
    2e26:	08 30       	cpi	r16, 0x08	; 8
    2e28:	98 f0       	brcs	.+38     	; 0x2e50 <__lshrdi3+0x30>
    2e2a:	08 50       	subi	r16, 0x08	; 8
    2e2c:	23 2f       	mov	r18, r19
    2e2e:	34 2f       	mov	r19, r20
    2e30:	45 2f       	mov	r20, r21
    2e32:	56 2f       	mov	r21, r22
    2e34:	67 2f       	mov	r22, r23
    2e36:	78 2f       	mov	r23, r24
    2e38:	89 2f       	mov	r24, r25
    2e3a:	90 2d       	mov	r25, r0
    2e3c:	f4 cf       	rjmp	.-24     	; 0x2e26 <__lshrdi3+0x6>
    2e3e:	05 94       	asr	r0
    2e40:	97 95       	ror	r25
    2e42:	87 95       	ror	r24
    2e44:	77 95       	ror	r23
    2e46:	67 95       	ror	r22
    2e48:	57 95       	ror	r21
    2e4a:	47 95       	ror	r20
    2e4c:	37 95       	ror	r19
    2e4e:	27 95       	ror	r18
    2e50:	0a 95       	dec	r16
    2e52:	aa f7       	brpl	.-22     	; 0x2e3e <__lshrdi3+0x1e>
    2e54:	0f 91       	pop	r16
    2e56:	08 95       	ret

00002e58 <__umulhisi3>:
    2e58:	a2 9f       	mul	r26, r18
    2e5a:	b0 01       	movw	r22, r0
    2e5c:	b3 9f       	mul	r27, r19
    2e5e:	c0 01       	movw	r24, r0
    2e60:	a3 9f       	mul	r26, r19
    2e62:	70 0d       	add	r23, r0
    2e64:	81 1d       	adc	r24, r1
    2e66:	11 24       	eor	r1, r1
    2e68:	91 1d       	adc	r25, r1
    2e6a:	b2 9f       	mul	r27, r18
    2e6c:	70 0d       	add	r23, r0
    2e6e:	81 1d       	adc	r24, r1
    2e70:	11 24       	eor	r1, r1
    2e72:	91 1d       	adc	r25, r1
    2e74:	08 95       	ret

00002e76 <fdevopen>:
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	31 f4       	brne	.+12     	; 0x2e8e <fdevopen+0x18>
    2e82:	61 15       	cp	r22, r1
    2e84:	71 05       	cpc	r23, r1
    2e86:	19 f4       	brne	.+6      	; 0x2e8e <fdevopen+0x18>
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	39 c0       	rjmp	.+114    	; 0x2f00 <fdevopen+0x8a>
    2e8e:	8b 01       	movw	r16, r22
    2e90:	ec 01       	movw	r28, r24
    2e92:	6e e0       	ldi	r22, 0x0E	; 14
    2e94:	70 e0       	ldi	r23, 0x00	; 0
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	47 d5       	rcall	.+2702   	; 0x392a <calloc>
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	89 2b       	or	r24, r25
    2ea0:	99 f3       	breq	.-26     	; 0x2e88 <fdevopen+0x12>
    2ea2:	80 e8       	ldi	r24, 0x80	; 128
    2ea4:	83 83       	std	Z+3, r24	; 0x03
    2ea6:	01 15       	cp	r16, r1
    2ea8:	11 05       	cpc	r17, r1
    2eaa:	71 f0       	breq	.+28     	; 0x2ec8 <fdevopen+0x52>
    2eac:	02 87       	std	Z+10, r16	; 0x0a
    2eae:	13 87       	std	Z+11, r17	; 0x0b
    2eb0:	81 e8       	ldi	r24, 0x81	; 129
    2eb2:	83 83       	std	Z+3, r24	; 0x03
    2eb4:	80 91 86 21 	lds	r24, 0x2186	; 0x802186 <__iob>
    2eb8:	90 91 87 21 	lds	r25, 0x2187	; 0x802187 <__iob+0x1>
    2ebc:	89 2b       	or	r24, r25
    2ebe:	21 f4       	brne	.+8      	; 0x2ec8 <fdevopen+0x52>
    2ec0:	e0 93 86 21 	sts	0x2186, r30	; 0x802186 <__iob>
    2ec4:	f0 93 87 21 	sts	0x2187, r31	; 0x802187 <__iob+0x1>
    2ec8:	20 97       	sbiw	r28, 0x00	; 0
    2eca:	c9 f0       	breq	.+50     	; 0x2efe <fdevopen+0x88>
    2ecc:	c0 87       	std	Z+8, r28	; 0x08
    2ece:	d1 87       	std	Z+9, r29	; 0x09
    2ed0:	83 81       	ldd	r24, Z+3	; 0x03
    2ed2:	82 60       	ori	r24, 0x02	; 2
    2ed4:	83 83       	std	Z+3, r24	; 0x03
    2ed6:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <__iob+0x2>
    2eda:	90 91 89 21 	lds	r25, 0x2189	; 0x802189 <__iob+0x3>
    2ede:	89 2b       	or	r24, r25
    2ee0:	71 f4       	brne	.+28     	; 0x2efe <fdevopen+0x88>
    2ee2:	e0 93 88 21 	sts	0x2188, r30	; 0x802188 <__iob+0x2>
    2ee6:	f0 93 89 21 	sts	0x2189, r31	; 0x802189 <__iob+0x3>
    2eea:	80 91 8a 21 	lds	r24, 0x218A	; 0x80218a <__iob+0x4>
    2eee:	90 91 8b 21 	lds	r25, 0x218B	; 0x80218b <__iob+0x5>
    2ef2:	89 2b       	or	r24, r25
    2ef4:	21 f4       	brne	.+8      	; 0x2efe <fdevopen+0x88>
    2ef6:	e0 93 8a 21 	sts	0x218A, r30	; 0x80218a <__iob+0x4>
    2efa:	f0 93 8b 21 	sts	0x218B, r31	; 0x80218b <__iob+0x5>
    2efe:	cf 01       	movw	r24, r30
    2f00:	df 91       	pop	r29
    2f02:	cf 91       	pop	r28
    2f04:	1f 91       	pop	r17
    2f06:	0f 91       	pop	r16
    2f08:	08 95       	ret

00002f0a <printf>:
    2f0a:	cf 93       	push	r28
    2f0c:	df 93       	push	r29
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	ae 01       	movw	r20, r28
    2f14:	4a 5f       	subi	r20, 0xFA	; 250
    2f16:	5f 4f       	sbci	r21, 0xFF	; 255
    2f18:	fa 01       	movw	r30, r20
    2f1a:	61 91       	ld	r22, Z+
    2f1c:	71 91       	ld	r23, Z+
    2f1e:	af 01       	movw	r20, r30
    2f20:	80 91 88 21 	lds	r24, 0x2188	; 0x802188 <__iob+0x2>
    2f24:	90 91 89 21 	lds	r25, 0x2189	; 0x802189 <__iob+0x3>
    2f28:	46 d0       	rcall	.+140    	; 0x2fb6 <vfprintf>
    2f2a:	df 91       	pop	r29
    2f2c:	cf 91       	pop	r28
    2f2e:	08 95       	ret

00002f30 <sprintf>:
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	2e 97       	sbiw	r28, 0x0e	; 14
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0e 89       	ldd	r16, Y+22	; 0x16
    2f44:	1f 89       	ldd	r17, Y+23	; 0x17
    2f46:	86 e0       	ldi	r24, 0x06	; 6
    2f48:	8c 83       	std	Y+4, r24	; 0x04
    2f4a:	09 83       	std	Y+1, r16	; 0x01
    2f4c:	1a 83       	std	Y+2, r17	; 0x02
    2f4e:	8f ef       	ldi	r24, 0xFF	; 255
    2f50:	9f e7       	ldi	r25, 0x7F	; 127
    2f52:	8d 83       	std	Y+5, r24	; 0x05
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	ae 01       	movw	r20, r28
    2f58:	46 5e       	subi	r20, 0xE6	; 230
    2f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f5c:	68 8d       	ldd	r22, Y+24	; 0x18
    2f5e:	79 8d       	ldd	r23, Y+25	; 0x19
    2f60:	ce 01       	movw	r24, r28
    2f62:	01 96       	adiw	r24, 0x01	; 1
    2f64:	28 d0       	rcall	.+80     	; 0x2fb6 <vfprintf>
    2f66:	ef 81       	ldd	r30, Y+7	; 0x07
    2f68:	f8 85       	ldd	r31, Y+8	; 0x08
    2f6a:	e0 0f       	add	r30, r16
    2f6c:	f1 1f       	adc	r31, r17
    2f6e:	10 82       	st	Z, r1
    2f70:	2e 96       	adiw	r28, 0x0e	; 14
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	08 95       	ret

00002f80 <sscanf>:
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	2e 97       	sbiw	r28, 0x0e	; 14
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	de bf       	out	0x3e, r29	; 62
    2f8e:	85 e0       	ldi	r24, 0x05	; 5
    2f90:	8c 83       	std	Y+4, r24	; 0x04
    2f92:	8c 89       	ldd	r24, Y+20	; 0x14
    2f94:	9d 89       	ldd	r25, Y+21	; 0x15
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	9a 83       	std	Y+2, r25	; 0x02
    2f9a:	ae 01       	movw	r20, r28
    2f9c:	48 5e       	subi	r20, 0xE8	; 232
    2f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2fa0:	6e 89       	ldd	r22, Y+22	; 0x16
    2fa2:	7f 89       	ldd	r23, Y+23	; 0x17
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	01 96       	adiw	r24, 0x01	; 1
    2fa8:	a9 d3       	rcall	.+1874   	; 0x36fc <vfscanf>
    2faa:	2e 96       	adiw	r28, 0x0e	; 14
    2fac:	cd bf       	out	0x3d, r28	; 61
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	df 91       	pop	r29
    2fb2:	cf 91       	pop	r28
    2fb4:	08 95       	ret

00002fb6 <vfprintf>:
    2fb6:	2f 92       	push	r2
    2fb8:	3f 92       	push	r3
    2fba:	4f 92       	push	r4
    2fbc:	5f 92       	push	r5
    2fbe:	6f 92       	push	r6
    2fc0:	7f 92       	push	r7
    2fc2:	8f 92       	push	r8
    2fc4:	9f 92       	push	r9
    2fc6:	af 92       	push	r10
    2fc8:	bf 92       	push	r11
    2fca:	cf 92       	push	r12
    2fcc:	df 92       	push	r13
    2fce:	ef 92       	push	r14
    2fd0:	ff 92       	push	r15
    2fd2:	0f 93       	push	r16
    2fd4:	1f 93       	push	r17
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	2b 97       	sbiw	r28, 0x0b	; 11
    2fe0:	cd bf       	out	0x3d, r28	; 61
    2fe2:	de bf       	out	0x3e, r29	; 62
    2fe4:	6c 01       	movw	r12, r24
    2fe6:	7b 01       	movw	r14, r22
    2fe8:	8a 01       	movw	r16, r20
    2fea:	fc 01       	movw	r30, r24
    2fec:	16 82       	std	Z+6, r1	; 0x06
    2fee:	17 82       	std	Z+7, r1	; 0x07
    2ff0:	83 81       	ldd	r24, Z+3	; 0x03
    2ff2:	81 ff       	sbrs	r24, 1
    2ff4:	bf c1       	rjmp	.+894    	; 0x3374 <vfprintf+0x3be>
    2ff6:	ce 01       	movw	r24, r28
    2ff8:	01 96       	adiw	r24, 0x01	; 1
    2ffa:	3c 01       	movw	r6, r24
    2ffc:	f6 01       	movw	r30, r12
    2ffe:	93 81       	ldd	r25, Z+3	; 0x03
    3000:	f7 01       	movw	r30, r14
    3002:	93 fd       	sbrc	r25, 3
    3004:	85 91       	lpm	r24, Z+
    3006:	93 ff       	sbrs	r25, 3
    3008:	81 91       	ld	r24, Z+
    300a:	7f 01       	movw	r14, r30
    300c:	88 23       	and	r24, r24
    300e:	09 f4       	brne	.+2      	; 0x3012 <vfprintf+0x5c>
    3010:	ad c1       	rjmp	.+858    	; 0x336c <vfprintf+0x3b6>
    3012:	85 32       	cpi	r24, 0x25	; 37
    3014:	39 f4       	brne	.+14     	; 0x3024 <vfprintf+0x6e>
    3016:	93 fd       	sbrc	r25, 3
    3018:	85 91       	lpm	r24, Z+
    301a:	93 ff       	sbrs	r25, 3
    301c:	81 91       	ld	r24, Z+
    301e:	7f 01       	movw	r14, r30
    3020:	85 32       	cpi	r24, 0x25	; 37
    3022:	21 f4       	brne	.+8      	; 0x302c <vfprintf+0x76>
    3024:	b6 01       	movw	r22, r12
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	29 d6       	rcall	.+3154   	; 0x3c7c <fputc>
    302a:	e8 cf       	rjmp	.-48     	; 0x2ffc <vfprintf+0x46>
    302c:	91 2c       	mov	r9, r1
    302e:	21 2c       	mov	r2, r1
    3030:	31 2c       	mov	r3, r1
    3032:	ff e1       	ldi	r31, 0x1F	; 31
    3034:	f3 15       	cp	r31, r3
    3036:	d8 f0       	brcs	.+54     	; 0x306e <vfprintf+0xb8>
    3038:	8b 32       	cpi	r24, 0x2B	; 43
    303a:	79 f0       	breq	.+30     	; 0x305a <vfprintf+0xa4>
    303c:	38 f4       	brcc	.+14     	; 0x304c <vfprintf+0x96>
    303e:	80 32       	cpi	r24, 0x20	; 32
    3040:	79 f0       	breq	.+30     	; 0x3060 <vfprintf+0xaa>
    3042:	83 32       	cpi	r24, 0x23	; 35
    3044:	a1 f4       	brne	.+40     	; 0x306e <vfprintf+0xb8>
    3046:	23 2d       	mov	r18, r3
    3048:	20 61       	ori	r18, 0x10	; 16
    304a:	1d c0       	rjmp	.+58     	; 0x3086 <vfprintf+0xd0>
    304c:	8d 32       	cpi	r24, 0x2D	; 45
    304e:	61 f0       	breq	.+24     	; 0x3068 <vfprintf+0xb2>
    3050:	80 33       	cpi	r24, 0x30	; 48
    3052:	69 f4       	brne	.+26     	; 0x306e <vfprintf+0xb8>
    3054:	23 2d       	mov	r18, r3
    3056:	21 60       	ori	r18, 0x01	; 1
    3058:	16 c0       	rjmp	.+44     	; 0x3086 <vfprintf+0xd0>
    305a:	83 2d       	mov	r24, r3
    305c:	82 60       	ori	r24, 0x02	; 2
    305e:	38 2e       	mov	r3, r24
    3060:	e3 2d       	mov	r30, r3
    3062:	e4 60       	ori	r30, 0x04	; 4
    3064:	3e 2e       	mov	r3, r30
    3066:	2a c0       	rjmp	.+84     	; 0x30bc <vfprintf+0x106>
    3068:	f3 2d       	mov	r31, r3
    306a:	f8 60       	ori	r31, 0x08	; 8
    306c:	1d c0       	rjmp	.+58     	; 0x30a8 <vfprintf+0xf2>
    306e:	37 fc       	sbrc	r3, 7
    3070:	2d c0       	rjmp	.+90     	; 0x30cc <vfprintf+0x116>
    3072:	20 ed       	ldi	r18, 0xD0	; 208
    3074:	28 0f       	add	r18, r24
    3076:	2a 30       	cpi	r18, 0x0A	; 10
    3078:	40 f0       	brcs	.+16     	; 0x308a <vfprintf+0xd4>
    307a:	8e 32       	cpi	r24, 0x2E	; 46
    307c:	b9 f4       	brne	.+46     	; 0x30ac <vfprintf+0xf6>
    307e:	36 fc       	sbrc	r3, 6
    3080:	75 c1       	rjmp	.+746    	; 0x336c <vfprintf+0x3b6>
    3082:	23 2d       	mov	r18, r3
    3084:	20 64       	ori	r18, 0x40	; 64
    3086:	32 2e       	mov	r3, r18
    3088:	19 c0       	rjmp	.+50     	; 0x30bc <vfprintf+0x106>
    308a:	36 fe       	sbrs	r3, 6
    308c:	06 c0       	rjmp	.+12     	; 0x309a <vfprintf+0xe4>
    308e:	8a e0       	ldi	r24, 0x0A	; 10
    3090:	98 9e       	mul	r9, r24
    3092:	20 0d       	add	r18, r0
    3094:	11 24       	eor	r1, r1
    3096:	92 2e       	mov	r9, r18
    3098:	11 c0       	rjmp	.+34     	; 0x30bc <vfprintf+0x106>
    309a:	ea e0       	ldi	r30, 0x0A	; 10
    309c:	2e 9e       	mul	r2, r30
    309e:	20 0d       	add	r18, r0
    30a0:	11 24       	eor	r1, r1
    30a2:	22 2e       	mov	r2, r18
    30a4:	f3 2d       	mov	r31, r3
    30a6:	f0 62       	ori	r31, 0x20	; 32
    30a8:	3f 2e       	mov	r3, r31
    30aa:	08 c0       	rjmp	.+16     	; 0x30bc <vfprintf+0x106>
    30ac:	8c 36       	cpi	r24, 0x6C	; 108
    30ae:	21 f4       	brne	.+8      	; 0x30b8 <vfprintf+0x102>
    30b0:	83 2d       	mov	r24, r3
    30b2:	80 68       	ori	r24, 0x80	; 128
    30b4:	38 2e       	mov	r3, r24
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <vfprintf+0x106>
    30b8:	88 36       	cpi	r24, 0x68	; 104
    30ba:	41 f4       	brne	.+16     	; 0x30cc <vfprintf+0x116>
    30bc:	f7 01       	movw	r30, r14
    30be:	93 fd       	sbrc	r25, 3
    30c0:	85 91       	lpm	r24, Z+
    30c2:	93 ff       	sbrs	r25, 3
    30c4:	81 91       	ld	r24, Z+
    30c6:	7f 01       	movw	r14, r30
    30c8:	81 11       	cpse	r24, r1
    30ca:	b3 cf       	rjmp	.-154    	; 0x3032 <vfprintf+0x7c>
    30cc:	98 2f       	mov	r25, r24
    30ce:	9f 7d       	andi	r25, 0xDF	; 223
    30d0:	95 54       	subi	r25, 0x45	; 69
    30d2:	93 30       	cpi	r25, 0x03	; 3
    30d4:	28 f4       	brcc	.+10     	; 0x30e0 <vfprintf+0x12a>
    30d6:	0c 5f       	subi	r16, 0xFC	; 252
    30d8:	1f 4f       	sbci	r17, 0xFF	; 255
    30da:	9f e3       	ldi	r25, 0x3F	; 63
    30dc:	99 83       	std	Y+1, r25	; 0x01
    30de:	0d c0       	rjmp	.+26     	; 0x30fa <vfprintf+0x144>
    30e0:	83 36       	cpi	r24, 0x63	; 99
    30e2:	31 f0       	breq	.+12     	; 0x30f0 <vfprintf+0x13a>
    30e4:	83 37       	cpi	r24, 0x73	; 115
    30e6:	71 f0       	breq	.+28     	; 0x3104 <vfprintf+0x14e>
    30e8:	83 35       	cpi	r24, 0x53	; 83
    30ea:	09 f0       	breq	.+2      	; 0x30ee <vfprintf+0x138>
    30ec:	55 c0       	rjmp	.+170    	; 0x3198 <vfprintf+0x1e2>
    30ee:	20 c0       	rjmp	.+64     	; 0x3130 <vfprintf+0x17a>
    30f0:	f8 01       	movw	r30, r16
    30f2:	80 81       	ld	r24, Z
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	0e 5f       	subi	r16, 0xFE	; 254
    30f8:	1f 4f       	sbci	r17, 0xFF	; 255
    30fa:	88 24       	eor	r8, r8
    30fc:	83 94       	inc	r8
    30fe:	91 2c       	mov	r9, r1
    3100:	53 01       	movw	r10, r6
    3102:	12 c0       	rjmp	.+36     	; 0x3128 <vfprintf+0x172>
    3104:	28 01       	movw	r4, r16
    3106:	f2 e0       	ldi	r31, 0x02	; 2
    3108:	4f 0e       	add	r4, r31
    310a:	51 1c       	adc	r5, r1
    310c:	f8 01       	movw	r30, r16
    310e:	a0 80       	ld	r10, Z
    3110:	b1 80       	ldd	r11, Z+1	; 0x01
    3112:	36 fe       	sbrs	r3, 6
    3114:	03 c0       	rjmp	.+6      	; 0x311c <vfprintf+0x166>
    3116:	69 2d       	mov	r22, r9
    3118:	70 e0       	ldi	r23, 0x00	; 0
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <vfprintf+0x16a>
    311c:	6f ef       	ldi	r22, 0xFF	; 255
    311e:	7f ef       	ldi	r23, 0xFF	; 255
    3120:	c5 01       	movw	r24, r10
    3122:	63 d5       	rcall	.+2758   	; 0x3bea <strnlen>
    3124:	4c 01       	movw	r8, r24
    3126:	82 01       	movw	r16, r4
    3128:	f3 2d       	mov	r31, r3
    312a:	ff 77       	andi	r31, 0x7F	; 127
    312c:	3f 2e       	mov	r3, r31
    312e:	15 c0       	rjmp	.+42     	; 0x315a <vfprintf+0x1a4>
    3130:	28 01       	movw	r4, r16
    3132:	22 e0       	ldi	r18, 0x02	; 2
    3134:	42 0e       	add	r4, r18
    3136:	51 1c       	adc	r5, r1
    3138:	f8 01       	movw	r30, r16
    313a:	a0 80       	ld	r10, Z
    313c:	b1 80       	ldd	r11, Z+1	; 0x01
    313e:	36 fe       	sbrs	r3, 6
    3140:	03 c0       	rjmp	.+6      	; 0x3148 <vfprintf+0x192>
    3142:	69 2d       	mov	r22, r9
    3144:	70 e0       	ldi	r23, 0x00	; 0
    3146:	02 c0       	rjmp	.+4      	; 0x314c <vfprintf+0x196>
    3148:	6f ef       	ldi	r22, 0xFF	; 255
    314a:	7f ef       	ldi	r23, 0xFF	; 255
    314c:	c5 01       	movw	r24, r10
    314e:	3b d5       	rcall	.+2678   	; 0x3bc6 <strnlen_P>
    3150:	4c 01       	movw	r8, r24
    3152:	f3 2d       	mov	r31, r3
    3154:	f0 68       	ori	r31, 0x80	; 128
    3156:	3f 2e       	mov	r3, r31
    3158:	82 01       	movw	r16, r4
    315a:	33 fc       	sbrc	r3, 3
    315c:	19 c0       	rjmp	.+50     	; 0x3190 <vfprintf+0x1da>
    315e:	82 2d       	mov	r24, r2
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	88 16       	cp	r8, r24
    3164:	99 06       	cpc	r9, r25
    3166:	a0 f4       	brcc	.+40     	; 0x3190 <vfprintf+0x1da>
    3168:	b6 01       	movw	r22, r12
    316a:	80 e2       	ldi	r24, 0x20	; 32
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	86 d5       	rcall	.+2828   	; 0x3c7c <fputc>
    3170:	2a 94       	dec	r2
    3172:	f5 cf       	rjmp	.-22     	; 0x315e <vfprintf+0x1a8>
    3174:	f5 01       	movw	r30, r10
    3176:	37 fc       	sbrc	r3, 7
    3178:	85 91       	lpm	r24, Z+
    317a:	37 fe       	sbrs	r3, 7
    317c:	81 91       	ld	r24, Z+
    317e:	5f 01       	movw	r10, r30
    3180:	b6 01       	movw	r22, r12
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	7b d5       	rcall	.+2806   	; 0x3c7c <fputc>
    3186:	21 10       	cpse	r2, r1
    3188:	2a 94       	dec	r2
    318a:	21 e0       	ldi	r18, 0x01	; 1
    318c:	82 1a       	sub	r8, r18
    318e:	91 08       	sbc	r9, r1
    3190:	81 14       	cp	r8, r1
    3192:	91 04       	cpc	r9, r1
    3194:	79 f7       	brne	.-34     	; 0x3174 <vfprintf+0x1be>
    3196:	e1 c0       	rjmp	.+450    	; 0x335a <vfprintf+0x3a4>
    3198:	84 36       	cpi	r24, 0x64	; 100
    319a:	11 f0       	breq	.+4      	; 0x31a0 <vfprintf+0x1ea>
    319c:	89 36       	cpi	r24, 0x69	; 105
    319e:	39 f5       	brne	.+78     	; 0x31ee <vfprintf+0x238>
    31a0:	f8 01       	movw	r30, r16
    31a2:	37 fe       	sbrs	r3, 7
    31a4:	07 c0       	rjmp	.+14     	; 0x31b4 <vfprintf+0x1fe>
    31a6:	60 81       	ld	r22, Z
    31a8:	71 81       	ldd	r23, Z+1	; 0x01
    31aa:	82 81       	ldd	r24, Z+2	; 0x02
    31ac:	93 81       	ldd	r25, Z+3	; 0x03
    31ae:	0c 5f       	subi	r16, 0xFC	; 252
    31b0:	1f 4f       	sbci	r17, 0xFF	; 255
    31b2:	08 c0       	rjmp	.+16     	; 0x31c4 <vfprintf+0x20e>
    31b4:	60 81       	ld	r22, Z
    31b6:	71 81       	ldd	r23, Z+1	; 0x01
    31b8:	07 2e       	mov	r0, r23
    31ba:	00 0c       	add	r0, r0
    31bc:	88 0b       	sbc	r24, r24
    31be:	99 0b       	sbc	r25, r25
    31c0:	0e 5f       	subi	r16, 0xFE	; 254
    31c2:	1f 4f       	sbci	r17, 0xFF	; 255
    31c4:	f3 2d       	mov	r31, r3
    31c6:	ff 76       	andi	r31, 0x6F	; 111
    31c8:	3f 2e       	mov	r3, r31
    31ca:	97 ff       	sbrs	r25, 7
    31cc:	09 c0       	rjmp	.+18     	; 0x31e0 <vfprintf+0x22a>
    31ce:	90 95       	com	r25
    31d0:	80 95       	com	r24
    31d2:	70 95       	com	r23
    31d4:	61 95       	neg	r22
    31d6:	7f 4f       	sbci	r23, 0xFF	; 255
    31d8:	8f 4f       	sbci	r24, 0xFF	; 255
    31da:	9f 4f       	sbci	r25, 0xFF	; 255
    31dc:	f0 68       	ori	r31, 0x80	; 128
    31de:	3f 2e       	mov	r3, r31
    31e0:	2a e0       	ldi	r18, 0x0A	; 10
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	a3 01       	movw	r20, r6
    31e6:	9f d5       	rcall	.+2878   	; 0x3d26 <__ultoa_invert>
    31e8:	88 2e       	mov	r8, r24
    31ea:	86 18       	sub	r8, r6
    31ec:	44 c0       	rjmp	.+136    	; 0x3276 <vfprintf+0x2c0>
    31ee:	85 37       	cpi	r24, 0x75	; 117
    31f0:	31 f4       	brne	.+12     	; 0x31fe <vfprintf+0x248>
    31f2:	23 2d       	mov	r18, r3
    31f4:	2f 7e       	andi	r18, 0xEF	; 239
    31f6:	b2 2e       	mov	r11, r18
    31f8:	2a e0       	ldi	r18, 0x0A	; 10
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	25 c0       	rjmp	.+74     	; 0x3248 <vfprintf+0x292>
    31fe:	93 2d       	mov	r25, r3
    3200:	99 7f       	andi	r25, 0xF9	; 249
    3202:	b9 2e       	mov	r11, r25
    3204:	8f 36       	cpi	r24, 0x6F	; 111
    3206:	c1 f0       	breq	.+48     	; 0x3238 <vfprintf+0x282>
    3208:	18 f4       	brcc	.+6      	; 0x3210 <vfprintf+0x25a>
    320a:	88 35       	cpi	r24, 0x58	; 88
    320c:	79 f0       	breq	.+30     	; 0x322c <vfprintf+0x276>
    320e:	ae c0       	rjmp	.+348    	; 0x336c <vfprintf+0x3b6>
    3210:	80 37       	cpi	r24, 0x70	; 112
    3212:	19 f0       	breq	.+6      	; 0x321a <vfprintf+0x264>
    3214:	88 37       	cpi	r24, 0x78	; 120
    3216:	21 f0       	breq	.+8      	; 0x3220 <vfprintf+0x26a>
    3218:	a9 c0       	rjmp	.+338    	; 0x336c <vfprintf+0x3b6>
    321a:	e9 2f       	mov	r30, r25
    321c:	e0 61       	ori	r30, 0x10	; 16
    321e:	be 2e       	mov	r11, r30
    3220:	b4 fe       	sbrs	r11, 4
    3222:	0d c0       	rjmp	.+26     	; 0x323e <vfprintf+0x288>
    3224:	fb 2d       	mov	r31, r11
    3226:	f4 60       	ori	r31, 0x04	; 4
    3228:	bf 2e       	mov	r11, r31
    322a:	09 c0       	rjmp	.+18     	; 0x323e <vfprintf+0x288>
    322c:	34 fe       	sbrs	r3, 4
    322e:	0a c0       	rjmp	.+20     	; 0x3244 <vfprintf+0x28e>
    3230:	29 2f       	mov	r18, r25
    3232:	26 60       	ori	r18, 0x06	; 6
    3234:	b2 2e       	mov	r11, r18
    3236:	06 c0       	rjmp	.+12     	; 0x3244 <vfprintf+0x28e>
    3238:	28 e0       	ldi	r18, 0x08	; 8
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	05 c0       	rjmp	.+10     	; 0x3248 <vfprintf+0x292>
    323e:	20 e1       	ldi	r18, 0x10	; 16
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <vfprintf+0x292>
    3244:	20 e1       	ldi	r18, 0x10	; 16
    3246:	32 e0       	ldi	r19, 0x02	; 2
    3248:	f8 01       	movw	r30, r16
    324a:	b7 fe       	sbrs	r11, 7
    324c:	07 c0       	rjmp	.+14     	; 0x325c <vfprintf+0x2a6>
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	0c 5f       	subi	r16, 0xFC	; 252
    3258:	1f 4f       	sbci	r17, 0xFF	; 255
    325a:	06 c0       	rjmp	.+12     	; 0x3268 <vfprintf+0x2b2>
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	0e 5f       	subi	r16, 0xFE	; 254
    3266:	1f 4f       	sbci	r17, 0xFF	; 255
    3268:	a3 01       	movw	r20, r6
    326a:	5d d5       	rcall	.+2746   	; 0x3d26 <__ultoa_invert>
    326c:	88 2e       	mov	r8, r24
    326e:	86 18       	sub	r8, r6
    3270:	fb 2d       	mov	r31, r11
    3272:	ff 77       	andi	r31, 0x7F	; 127
    3274:	3f 2e       	mov	r3, r31
    3276:	36 fe       	sbrs	r3, 6
    3278:	0d c0       	rjmp	.+26     	; 0x3294 <vfprintf+0x2de>
    327a:	23 2d       	mov	r18, r3
    327c:	2e 7f       	andi	r18, 0xFE	; 254
    327e:	a2 2e       	mov	r10, r18
    3280:	89 14       	cp	r8, r9
    3282:	58 f4       	brcc	.+22     	; 0x329a <vfprintf+0x2e4>
    3284:	34 fe       	sbrs	r3, 4
    3286:	0b c0       	rjmp	.+22     	; 0x329e <vfprintf+0x2e8>
    3288:	32 fc       	sbrc	r3, 2
    328a:	09 c0       	rjmp	.+18     	; 0x329e <vfprintf+0x2e8>
    328c:	83 2d       	mov	r24, r3
    328e:	8e 7e       	andi	r24, 0xEE	; 238
    3290:	a8 2e       	mov	r10, r24
    3292:	05 c0       	rjmp	.+10     	; 0x329e <vfprintf+0x2e8>
    3294:	b8 2c       	mov	r11, r8
    3296:	a3 2c       	mov	r10, r3
    3298:	03 c0       	rjmp	.+6      	; 0x32a0 <vfprintf+0x2ea>
    329a:	b8 2c       	mov	r11, r8
    329c:	01 c0       	rjmp	.+2      	; 0x32a0 <vfprintf+0x2ea>
    329e:	b9 2c       	mov	r11, r9
    32a0:	a4 fe       	sbrs	r10, 4
    32a2:	0f c0       	rjmp	.+30     	; 0x32c2 <vfprintf+0x30c>
    32a4:	fe 01       	movw	r30, r28
    32a6:	e8 0d       	add	r30, r8
    32a8:	f1 1d       	adc	r31, r1
    32aa:	80 81       	ld	r24, Z
    32ac:	80 33       	cpi	r24, 0x30	; 48
    32ae:	21 f4       	brne	.+8      	; 0x32b8 <vfprintf+0x302>
    32b0:	9a 2d       	mov	r25, r10
    32b2:	99 7e       	andi	r25, 0xE9	; 233
    32b4:	a9 2e       	mov	r10, r25
    32b6:	09 c0       	rjmp	.+18     	; 0x32ca <vfprintf+0x314>
    32b8:	a2 fe       	sbrs	r10, 2
    32ba:	06 c0       	rjmp	.+12     	; 0x32c8 <vfprintf+0x312>
    32bc:	b3 94       	inc	r11
    32be:	b3 94       	inc	r11
    32c0:	04 c0       	rjmp	.+8      	; 0x32ca <vfprintf+0x314>
    32c2:	8a 2d       	mov	r24, r10
    32c4:	86 78       	andi	r24, 0x86	; 134
    32c6:	09 f0       	breq	.+2      	; 0x32ca <vfprintf+0x314>
    32c8:	b3 94       	inc	r11
    32ca:	a3 fc       	sbrc	r10, 3
    32cc:	10 c0       	rjmp	.+32     	; 0x32ee <vfprintf+0x338>
    32ce:	a0 fe       	sbrs	r10, 0
    32d0:	06 c0       	rjmp	.+12     	; 0x32de <vfprintf+0x328>
    32d2:	b2 14       	cp	r11, r2
    32d4:	80 f4       	brcc	.+32     	; 0x32f6 <vfprintf+0x340>
    32d6:	28 0c       	add	r2, r8
    32d8:	92 2c       	mov	r9, r2
    32da:	9b 18       	sub	r9, r11
    32dc:	0d c0       	rjmp	.+26     	; 0x32f8 <vfprintf+0x342>
    32de:	b2 14       	cp	r11, r2
    32e0:	58 f4       	brcc	.+22     	; 0x32f8 <vfprintf+0x342>
    32e2:	b6 01       	movw	r22, r12
    32e4:	80 e2       	ldi	r24, 0x20	; 32
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	c9 d4       	rcall	.+2450   	; 0x3c7c <fputc>
    32ea:	b3 94       	inc	r11
    32ec:	f8 cf       	rjmp	.-16     	; 0x32de <vfprintf+0x328>
    32ee:	b2 14       	cp	r11, r2
    32f0:	18 f4       	brcc	.+6      	; 0x32f8 <vfprintf+0x342>
    32f2:	2b 18       	sub	r2, r11
    32f4:	02 c0       	rjmp	.+4      	; 0x32fa <vfprintf+0x344>
    32f6:	98 2c       	mov	r9, r8
    32f8:	21 2c       	mov	r2, r1
    32fa:	a4 fe       	sbrs	r10, 4
    32fc:	0f c0       	rjmp	.+30     	; 0x331c <vfprintf+0x366>
    32fe:	b6 01       	movw	r22, r12
    3300:	80 e3       	ldi	r24, 0x30	; 48
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	bb d4       	rcall	.+2422   	; 0x3c7c <fputc>
    3306:	a2 fe       	sbrs	r10, 2
    3308:	16 c0       	rjmp	.+44     	; 0x3336 <vfprintf+0x380>
    330a:	a1 fc       	sbrc	r10, 1
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <vfprintf+0x35e>
    330e:	88 e7       	ldi	r24, 0x78	; 120
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	02 c0       	rjmp	.+4      	; 0x3318 <vfprintf+0x362>
    3314:	88 e5       	ldi	r24, 0x58	; 88
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	b6 01       	movw	r22, r12
    331a:	0c c0       	rjmp	.+24     	; 0x3334 <vfprintf+0x37e>
    331c:	8a 2d       	mov	r24, r10
    331e:	86 78       	andi	r24, 0x86	; 134
    3320:	51 f0       	breq	.+20     	; 0x3336 <vfprintf+0x380>
    3322:	a1 fe       	sbrs	r10, 1
    3324:	02 c0       	rjmp	.+4      	; 0x332a <vfprintf+0x374>
    3326:	8b e2       	ldi	r24, 0x2B	; 43
    3328:	01 c0       	rjmp	.+2      	; 0x332c <vfprintf+0x376>
    332a:	80 e2       	ldi	r24, 0x20	; 32
    332c:	a7 fc       	sbrc	r10, 7
    332e:	8d e2       	ldi	r24, 0x2D	; 45
    3330:	b6 01       	movw	r22, r12
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	a3 d4       	rcall	.+2374   	; 0x3c7c <fputc>
    3336:	89 14       	cp	r8, r9
    3338:	30 f4       	brcc	.+12     	; 0x3346 <vfprintf+0x390>
    333a:	b6 01       	movw	r22, r12
    333c:	80 e3       	ldi	r24, 0x30	; 48
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	9d d4       	rcall	.+2362   	; 0x3c7c <fputc>
    3342:	9a 94       	dec	r9
    3344:	f8 cf       	rjmp	.-16     	; 0x3336 <vfprintf+0x380>
    3346:	8a 94       	dec	r8
    3348:	f3 01       	movw	r30, r6
    334a:	e8 0d       	add	r30, r8
    334c:	f1 1d       	adc	r31, r1
    334e:	80 81       	ld	r24, Z
    3350:	b6 01       	movw	r22, r12
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	93 d4       	rcall	.+2342   	; 0x3c7c <fputc>
    3356:	81 10       	cpse	r8, r1
    3358:	f6 cf       	rjmp	.-20     	; 0x3346 <vfprintf+0x390>
    335a:	22 20       	and	r2, r2
    335c:	09 f4       	brne	.+2      	; 0x3360 <vfprintf+0x3aa>
    335e:	4e ce       	rjmp	.-868    	; 0x2ffc <vfprintf+0x46>
    3360:	b6 01       	movw	r22, r12
    3362:	80 e2       	ldi	r24, 0x20	; 32
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	8a d4       	rcall	.+2324   	; 0x3c7c <fputc>
    3368:	2a 94       	dec	r2
    336a:	f7 cf       	rjmp	.-18     	; 0x335a <vfprintf+0x3a4>
    336c:	f6 01       	movw	r30, r12
    336e:	86 81       	ldd	r24, Z+6	; 0x06
    3370:	97 81       	ldd	r25, Z+7	; 0x07
    3372:	02 c0       	rjmp	.+4      	; 0x3378 <vfprintf+0x3c2>
    3374:	8f ef       	ldi	r24, 0xFF	; 255
    3376:	9f ef       	ldi	r25, 0xFF	; 255
    3378:	2b 96       	adiw	r28, 0x0b	; 11
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	de bf       	out	0x3e, r29	; 62
    337e:	df 91       	pop	r29
    3380:	cf 91       	pop	r28
    3382:	1f 91       	pop	r17
    3384:	0f 91       	pop	r16
    3386:	ff 90       	pop	r15
    3388:	ef 90       	pop	r14
    338a:	df 90       	pop	r13
    338c:	cf 90       	pop	r12
    338e:	bf 90       	pop	r11
    3390:	af 90       	pop	r10
    3392:	9f 90       	pop	r9
    3394:	8f 90       	pop	r8
    3396:	7f 90       	pop	r7
    3398:	6f 90       	pop	r6
    339a:	5f 90       	pop	r5
    339c:	4f 90       	pop	r4
    339e:	3f 90       	pop	r3
    33a0:	2f 90       	pop	r2
    33a2:	08 95       	ret

000033a4 <putval>:
    33a4:	20 fd       	sbrc	r18, 0
    33a6:	09 c0       	rjmp	.+18     	; 0x33ba <putval+0x16>
    33a8:	fc 01       	movw	r30, r24
    33aa:	23 fd       	sbrc	r18, 3
    33ac:	05 c0       	rjmp	.+10     	; 0x33b8 <putval+0x14>
    33ae:	22 ff       	sbrs	r18, 2
    33b0:	02 c0       	rjmp	.+4      	; 0x33b6 <putval+0x12>
    33b2:	73 83       	std	Z+3, r23	; 0x03
    33b4:	62 83       	std	Z+2, r22	; 0x02
    33b6:	51 83       	std	Z+1, r21	; 0x01
    33b8:	40 83       	st	Z, r20
    33ba:	08 95       	ret

000033bc <mulacc>:
    33bc:	44 fd       	sbrc	r20, 4
    33be:	17 c0       	rjmp	.+46     	; 0x33ee <mulacc+0x32>
    33c0:	46 fd       	sbrc	r20, 6
    33c2:	17 c0       	rjmp	.+46     	; 0x33f2 <mulacc+0x36>
    33c4:	ab 01       	movw	r20, r22
    33c6:	bc 01       	movw	r22, r24
    33c8:	da 01       	movw	r26, r20
    33ca:	fb 01       	movw	r30, r22
    33cc:	aa 0f       	add	r26, r26
    33ce:	bb 1f       	adc	r27, r27
    33d0:	ee 1f       	adc	r30, r30
    33d2:	ff 1f       	adc	r31, r31
    33d4:	10 94       	com	r1
    33d6:	d1 f7       	brne	.-12     	; 0x33cc <mulacc+0x10>
    33d8:	4a 0f       	add	r20, r26
    33da:	5b 1f       	adc	r21, r27
    33dc:	6e 1f       	adc	r22, r30
    33de:	7f 1f       	adc	r23, r31
    33e0:	cb 01       	movw	r24, r22
    33e2:	ba 01       	movw	r22, r20
    33e4:	66 0f       	add	r22, r22
    33e6:	77 1f       	adc	r23, r23
    33e8:	88 1f       	adc	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	09 c0       	rjmp	.+18     	; 0x3400 <mulacc+0x44>
    33ee:	33 e0       	ldi	r19, 0x03	; 3
    33f0:	01 c0       	rjmp	.+2      	; 0x33f4 <mulacc+0x38>
    33f2:	34 e0       	ldi	r19, 0x04	; 4
    33f4:	66 0f       	add	r22, r22
    33f6:	77 1f       	adc	r23, r23
    33f8:	88 1f       	adc	r24, r24
    33fa:	99 1f       	adc	r25, r25
    33fc:	31 50       	subi	r19, 0x01	; 1
    33fe:	d1 f7       	brne	.-12     	; 0x33f4 <mulacc+0x38>
    3400:	62 0f       	add	r22, r18
    3402:	71 1d       	adc	r23, r1
    3404:	81 1d       	adc	r24, r1
    3406:	91 1d       	adc	r25, r1
    3408:	08 95       	ret

0000340a <skip_spaces>:
    340a:	0f 93       	push	r16
    340c:	1f 93       	push	r17
    340e:	cf 93       	push	r28
    3410:	df 93       	push	r29
    3412:	8c 01       	movw	r16, r24
    3414:	c8 01       	movw	r24, r16
    3416:	f4 d3       	rcall	.+2024   	; 0x3c00 <fgetc>
    3418:	ec 01       	movw	r28, r24
    341a:	97 fd       	sbrc	r25, 7
    341c:	06 c0       	rjmp	.+12     	; 0x342a <skip_spaces+0x20>
    341e:	c0 d3       	rcall	.+1920   	; 0x3ba0 <isspace>
    3420:	89 2b       	or	r24, r25
    3422:	c1 f7       	brne	.-16     	; 0x3414 <skip_spaces+0xa>
    3424:	b8 01       	movw	r22, r16
    3426:	ce 01       	movw	r24, r28
    3428:	65 d4       	rcall	.+2250   	; 0x3cf4 <ungetc>
    342a:	ce 01       	movw	r24, r28
    342c:	df 91       	pop	r29
    342e:	cf 91       	pop	r28
    3430:	1f 91       	pop	r17
    3432:	0f 91       	pop	r16
    3434:	08 95       	ret

00003436 <conv_int>:
    3436:	8f 92       	push	r8
    3438:	9f 92       	push	r9
    343a:	af 92       	push	r10
    343c:	bf 92       	push	r11
    343e:	ef 92       	push	r14
    3440:	ff 92       	push	r15
    3442:	0f 93       	push	r16
    3444:	1f 93       	push	r17
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	8c 01       	movw	r16, r24
    344c:	d6 2f       	mov	r29, r22
    344e:	7a 01       	movw	r14, r20
    3450:	b2 2e       	mov	r11, r18
    3452:	d6 d3       	rcall	.+1964   	; 0x3c00 <fgetc>
    3454:	9c 01       	movw	r18, r24
    3456:	33 27       	eor	r19, r19
    3458:	2b 32       	cpi	r18, 0x2B	; 43
    345a:	31 05       	cpc	r19, r1
    345c:	31 f0       	breq	.+12     	; 0x346a <conv_int+0x34>
    345e:	2d 32       	cpi	r18, 0x2D	; 45
    3460:	31 05       	cpc	r19, r1
    3462:	59 f4       	brne	.+22     	; 0x347a <conv_int+0x44>
    3464:	8b 2d       	mov	r24, r11
    3466:	80 68       	ori	r24, 0x80	; 128
    3468:	b8 2e       	mov	r11, r24
    346a:	d1 50       	subi	r29, 0x01	; 1
    346c:	11 f4       	brne	.+4      	; 0x3472 <conv_int+0x3c>
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	61 c0       	rjmp	.+194    	; 0x3534 <conv_int+0xfe>
    3472:	c8 01       	movw	r24, r16
    3474:	c5 d3       	rcall	.+1930   	; 0x3c00 <fgetc>
    3476:	97 fd       	sbrc	r25, 7
    3478:	fa cf       	rjmp	.-12     	; 0x346e <conv_int+0x38>
    347a:	cb 2d       	mov	r28, r11
    347c:	cd 7f       	andi	r28, 0xFD	; 253
    347e:	2b 2d       	mov	r18, r11
    3480:	20 73       	andi	r18, 0x30	; 48
    3482:	f9 f4       	brne	.+62     	; 0x34c2 <conv_int+0x8c>
    3484:	80 33       	cpi	r24, 0x30	; 48
    3486:	e9 f4       	brne	.+58     	; 0x34c2 <conv_int+0x8c>
    3488:	aa 24       	eor	r10, r10
    348a:	aa 94       	dec	r10
    348c:	ad 0e       	add	r10, r29
    348e:	09 f4       	brne	.+2      	; 0x3492 <conv_int+0x5c>
    3490:	3e c0       	rjmp	.+124    	; 0x350e <conv_int+0xd8>
    3492:	c8 01       	movw	r24, r16
    3494:	b5 d3       	rcall	.+1898   	; 0x3c00 <fgetc>
    3496:	97 fd       	sbrc	r25, 7
    3498:	3a c0       	rjmp	.+116    	; 0x350e <conv_int+0xd8>
    349a:	9c 01       	movw	r18, r24
    349c:	2f 7d       	andi	r18, 0xDF	; 223
    349e:	33 27       	eor	r19, r19
    34a0:	28 35       	cpi	r18, 0x58	; 88
    34a2:	31 05       	cpc	r19, r1
    34a4:	41 f4       	brne	.+16     	; 0x34b6 <conv_int+0x80>
    34a6:	c2 64       	ori	r28, 0x42	; 66
    34a8:	d2 50       	subi	r29, 0x02	; 2
    34aa:	89 f1       	breq	.+98     	; 0x350e <conv_int+0xd8>
    34ac:	c8 01       	movw	r24, r16
    34ae:	a8 d3       	rcall	.+1872   	; 0x3c00 <fgetc>
    34b0:	97 ff       	sbrs	r25, 7
    34b2:	07 c0       	rjmp	.+14     	; 0x34c2 <conv_int+0x8c>
    34b4:	2c c0       	rjmp	.+88     	; 0x350e <conv_int+0xd8>
    34b6:	b6 fe       	sbrs	r11, 6
    34b8:	02 c0       	rjmp	.+4      	; 0x34be <conv_int+0x88>
    34ba:	c2 60       	ori	r28, 0x02	; 2
    34bc:	01 c0       	rjmp	.+2      	; 0x34c0 <conv_int+0x8a>
    34be:	c2 61       	ori	r28, 0x12	; 18
    34c0:	da 2d       	mov	r29, r10
    34c2:	81 2c       	mov	r8, r1
    34c4:	91 2c       	mov	r9, r1
    34c6:	54 01       	movw	r10, r8
    34c8:	20 ed       	ldi	r18, 0xD0	; 208
    34ca:	28 0f       	add	r18, r24
    34cc:	28 30       	cpi	r18, 0x08	; 8
    34ce:	78 f0       	brcs	.+30     	; 0x34ee <conv_int+0xb8>
    34d0:	c4 ff       	sbrs	r28, 4
    34d2:	03 c0       	rjmp	.+6      	; 0x34da <conv_int+0xa4>
    34d4:	b8 01       	movw	r22, r16
    34d6:	0e d4       	rcall	.+2076   	; 0x3cf4 <ungetc>
    34d8:	17 c0       	rjmp	.+46     	; 0x3508 <conv_int+0xd2>
    34da:	2a 30       	cpi	r18, 0x0A	; 10
    34dc:	40 f0       	brcs	.+16     	; 0x34ee <conv_int+0xb8>
    34de:	c6 ff       	sbrs	r28, 6
    34e0:	f9 cf       	rjmp	.-14     	; 0x34d4 <conv_int+0x9e>
    34e2:	2f 7d       	andi	r18, 0xDF	; 223
    34e4:	3f ee       	ldi	r19, 0xEF	; 239
    34e6:	32 0f       	add	r19, r18
    34e8:	36 30       	cpi	r19, 0x06	; 6
    34ea:	a0 f7       	brcc	.-24     	; 0x34d4 <conv_int+0x9e>
    34ec:	27 50       	subi	r18, 0x07	; 7
    34ee:	4c 2f       	mov	r20, r28
    34f0:	c5 01       	movw	r24, r10
    34f2:	b4 01       	movw	r22, r8
    34f4:	63 df       	rcall	.-314    	; 0x33bc <mulacc>
    34f6:	4b 01       	movw	r8, r22
    34f8:	5c 01       	movw	r10, r24
    34fa:	c2 60       	ori	r28, 0x02	; 2
    34fc:	d1 50       	subi	r29, 0x01	; 1
    34fe:	51 f0       	breq	.+20     	; 0x3514 <conv_int+0xde>
    3500:	c8 01       	movw	r24, r16
    3502:	7e d3       	rcall	.+1788   	; 0x3c00 <fgetc>
    3504:	97 ff       	sbrs	r25, 7
    3506:	e0 cf       	rjmp	.-64     	; 0x34c8 <conv_int+0x92>
    3508:	c1 fd       	sbrc	r28, 1
    350a:	04 c0       	rjmp	.+8      	; 0x3514 <conv_int+0xde>
    350c:	b0 cf       	rjmp	.-160    	; 0x346e <conv_int+0x38>
    350e:	81 2c       	mov	r8, r1
    3510:	91 2c       	mov	r9, r1
    3512:	54 01       	movw	r10, r8
    3514:	c7 ff       	sbrs	r28, 7
    3516:	08 c0       	rjmp	.+16     	; 0x3528 <conv_int+0xf2>
    3518:	b0 94       	com	r11
    351a:	a0 94       	com	r10
    351c:	90 94       	com	r9
    351e:	80 94       	com	r8
    3520:	81 1c       	adc	r8, r1
    3522:	91 1c       	adc	r9, r1
    3524:	a1 1c       	adc	r10, r1
    3526:	b1 1c       	adc	r11, r1
    3528:	2c 2f       	mov	r18, r28
    352a:	b5 01       	movw	r22, r10
    352c:	a4 01       	movw	r20, r8
    352e:	c7 01       	movw	r24, r14
    3530:	39 df       	rcall	.-398    	; 0x33a4 <putval>
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	df 91       	pop	r29
    3536:	cf 91       	pop	r28
    3538:	1f 91       	pop	r17
    353a:	0f 91       	pop	r16
    353c:	ff 90       	pop	r15
    353e:	ef 90       	pop	r14
    3540:	bf 90       	pop	r11
    3542:	af 90       	pop	r10
    3544:	9f 90       	pop	r9
    3546:	8f 90       	pop	r8
    3548:	08 95       	ret

0000354a <conv_brk>:
    354a:	5f 92       	push	r5
    354c:	6f 92       	push	r6
    354e:	7f 92       	push	r7
    3550:	8f 92       	push	r8
    3552:	9f 92       	push	r9
    3554:	af 92       	push	r10
    3556:	bf 92       	push	r11
    3558:	cf 92       	push	r12
    355a:	df 92       	push	r13
    355c:	ef 92       	push	r14
    355e:	ff 92       	push	r15
    3560:	0f 93       	push	r16
    3562:	1f 93       	push	r17
    3564:	cf 93       	push	r28
    3566:	df 93       	push	r29
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	a0 97       	sbiw	r28, 0x20	; 32
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	de bf       	out	0x3e, r29	; 62
    3572:	5c 01       	movw	r10, r24
    3574:	96 2e       	mov	r9, r22
    3576:	7a 01       	movw	r14, r20
    3578:	f9 01       	movw	r30, r18
    357a:	8e 01       	movw	r16, r28
    357c:	0f 5f       	subi	r16, 0xFF	; 255
    357e:	1f 4f       	sbci	r17, 0xFF	; 255
    3580:	68 01       	movw	r12, r16
    3582:	80 e2       	ldi	r24, 0x20	; 32
    3584:	d8 01       	movw	r26, r16
    3586:	1d 92       	st	X+, r1
    3588:	8a 95       	dec	r24
    358a:	e9 f7       	brne	.-6      	; 0x3586 <conv_brk+0x3c>
    358c:	d5 01       	movw	r26, r10
    358e:	13 96       	adiw	r26, 0x03	; 3
    3590:	8c 90       	ld	r8, X
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	61 2c       	mov	r6, r1
    3598:	71 2c       	mov	r7, r1
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	61 e0       	ldi	r22, 0x01	; 1
    359e:	70 e0       	ldi	r23, 0x00	; 0
    35a0:	83 fc       	sbrc	r8, 3
    35a2:	25 91       	lpm	r18, Z+
    35a4:	83 fe       	sbrs	r8, 3
    35a6:	21 91       	ld	r18, Z+
    35a8:	8f 01       	movw	r16, r30
    35aa:	52 2e       	mov	r5, r18
    35ac:	21 11       	cpse	r18, r1
    35ae:	03 c0       	rjmp	.+6      	; 0x35b6 <conv_brk+0x6c>
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	90 c0       	rjmp	.+288    	; 0x36d6 <conv_brk+0x18c>
    35b6:	2e 35       	cpi	r18, 0x5E	; 94
    35b8:	11 f4       	brne	.+4      	; 0x35be <conv_brk+0x74>
    35ba:	00 97       	sbiw	r24, 0x00	; 0
    35bc:	51 f1       	breq	.+84     	; 0x3612 <conv_brk+0xc8>
    35be:	43 2f       	mov	r20, r19
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	48 17       	cp	r20, r24
    35c4:	59 07       	cpc	r21, r25
    35c6:	3c f4       	brge	.+14     	; 0x35d6 <conv_brk+0x8c>
    35c8:	2d 35       	cpi	r18, 0x5D	; 93
    35ca:	59 f1       	breq	.+86     	; 0x3622 <conv_brk+0xd8>
    35cc:	2d 32       	cpi	r18, 0x2D	; 45
    35ce:	19 f4       	brne	.+6      	; 0x35d6 <conv_brk+0x8c>
    35d0:	77 20       	and	r7, r7
    35d2:	09 f1       	breq	.+66     	; 0x3616 <conv_brk+0xcc>
    35d4:	03 c0       	rjmp	.+6      	; 0x35dc <conv_brk+0x92>
    35d6:	77 20       	and	r7, r7
    35d8:	09 f4       	brne	.+2      	; 0x35dc <conv_brk+0x92>
    35da:	68 c0       	rjmp	.+208    	; 0x36ac <conv_brk+0x162>
    35dc:	45 2d       	mov	r20, r5
    35de:	46 95       	lsr	r20
    35e0:	46 95       	lsr	r20
    35e2:	46 95       	lsr	r20
    35e4:	d6 01       	movw	r26, r12
    35e6:	a4 0f       	add	r26, r20
    35e8:	b1 1d       	adc	r27, r1
    35ea:	45 2d       	mov	r20, r5
    35ec:	47 70       	andi	r20, 0x07	; 7
    35ee:	8b 01       	movw	r16, r22
    35f0:	02 c0       	rjmp	.+4      	; 0x35f6 <conv_brk+0xac>
    35f2:	00 0f       	add	r16, r16
    35f4:	11 1f       	adc	r17, r17
    35f6:	4a 95       	dec	r20
    35f8:	e2 f7       	brpl	.-8      	; 0x35f2 <conv_brk+0xa8>
    35fa:	a8 01       	movw	r20, r16
    35fc:	5c 91       	ld	r21, X
    35fe:	45 2b       	or	r20, r21
    3600:	4c 93       	st	X, r20
    3602:	65 14       	cp	r6, r5
    3604:	59 f0       	breq	.+22     	; 0x361c <conv_brk+0xd2>
    3606:	56 14       	cp	r5, r6
    3608:	10 f4       	brcc	.+4      	; 0x360e <conv_brk+0xc4>
    360a:	53 94       	inc	r5
    360c:	e7 cf       	rjmp	.-50     	; 0x35dc <conv_brk+0x92>
    360e:	5a 94       	dec	r5
    3610:	e5 cf       	rjmp	.-54     	; 0x35dc <conv_brk+0x92>
    3612:	31 e0       	ldi	r19, 0x01	; 1
    3614:	04 c0       	rjmp	.+8      	; 0x361e <conv_brk+0xd4>
    3616:	77 24       	eor	r7, r7
    3618:	73 94       	inc	r7
    361a:	01 c0       	rjmp	.+2      	; 0x361e <conv_brk+0xd4>
    361c:	71 2c       	mov	r7, r1
    361e:	01 96       	adiw	r24, 0x01	; 1
    3620:	bf cf       	rjmp	.-130    	; 0x35a0 <conv_brk+0x56>
    3622:	77 20       	and	r7, r7
    3624:	19 f0       	breq	.+6      	; 0x362c <conv_brk+0xe2>
    3626:	8e 81       	ldd	r24, Y+6	; 0x06
    3628:	80 62       	ori	r24, 0x20	; 32
    362a:	8e 83       	std	Y+6, r24	; 0x06
    362c:	31 11       	cpse	r19, r1
    362e:	03 c0       	rjmp	.+6      	; 0x3636 <conv_brk+0xec>
    3630:	88 24       	eor	r8, r8
    3632:	83 94       	inc	r8
    3634:	17 c0       	rjmp	.+46     	; 0x3664 <conv_brk+0x11a>
    3636:	f6 01       	movw	r30, r12
    3638:	9e 01       	movw	r18, r28
    363a:	2f 5d       	subi	r18, 0xDF	; 223
    363c:	3f 4f       	sbci	r19, 0xFF	; 255
    363e:	80 81       	ld	r24, Z
    3640:	80 95       	com	r24
    3642:	81 93       	st	Z+, r24
    3644:	2e 17       	cp	r18, r30
    3646:	3f 07       	cpc	r19, r31
    3648:	d1 f7       	brne	.-12     	; 0x363e <conv_brk+0xf4>
    364a:	f2 cf       	rjmp	.-28     	; 0x3630 <conv_brk+0xe6>
    364c:	e1 14       	cp	r14, r1
    364e:	f1 04       	cpc	r15, r1
    3650:	29 f0       	breq	.+10     	; 0x365c <conv_brk+0x112>
    3652:	d7 01       	movw	r26, r14
    3654:	8c 93       	st	X, r24
    3656:	f7 01       	movw	r30, r14
    3658:	31 96       	adiw	r30, 0x01	; 1
    365a:	7f 01       	movw	r14, r30
    365c:	9a 94       	dec	r9
    365e:	81 2c       	mov	r8, r1
    3660:	99 20       	and	r9, r9
    3662:	e9 f0       	breq	.+58     	; 0x369e <conv_brk+0x154>
    3664:	c5 01       	movw	r24, r10
    3666:	cc d2       	rcall	.+1432   	; 0x3c00 <fgetc>
    3668:	97 fd       	sbrc	r25, 7
    366a:	17 c0       	rjmp	.+46     	; 0x369a <conv_brk+0x150>
    366c:	fc 01       	movw	r30, r24
    366e:	ff 27       	eor	r31, r31
    3670:	23 e0       	ldi	r18, 0x03	; 3
    3672:	f5 95       	asr	r31
    3674:	e7 95       	ror	r30
    3676:	2a 95       	dec	r18
    3678:	e1 f7       	brne	.-8      	; 0x3672 <conv_brk+0x128>
    367a:	ec 0d       	add	r30, r12
    367c:	fd 1d       	adc	r31, r13
    367e:	20 81       	ld	r18, Z
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	ac 01       	movw	r20, r24
    3684:	47 70       	andi	r20, 0x07	; 7
    3686:	55 27       	eor	r21, r21
    3688:	02 c0       	rjmp	.+4      	; 0x368e <conv_brk+0x144>
    368a:	35 95       	asr	r19
    368c:	27 95       	ror	r18
    368e:	4a 95       	dec	r20
    3690:	e2 f7       	brpl	.-8      	; 0x368a <conv_brk+0x140>
    3692:	20 fd       	sbrc	r18, 0
    3694:	db cf       	rjmp	.-74     	; 0x364c <conv_brk+0x102>
    3696:	b5 01       	movw	r22, r10
    3698:	2d d3       	rcall	.+1626   	; 0x3cf4 <ungetc>
    369a:	81 10       	cpse	r8, r1
    369c:	89 cf       	rjmp	.-238    	; 0x35b0 <conv_brk+0x66>
    369e:	e1 14       	cp	r14, r1
    36a0:	f1 04       	cpc	r15, r1
    36a2:	11 f0       	breq	.+4      	; 0x36a8 <conv_brk+0x15e>
    36a4:	d7 01       	movw	r26, r14
    36a6:	1c 92       	st	X, r1
    36a8:	c8 01       	movw	r24, r16
    36aa:	15 c0       	rjmp	.+42     	; 0x36d6 <conv_brk+0x18c>
    36ac:	42 2f       	mov	r20, r18
    36ae:	46 95       	lsr	r20
    36b0:	46 95       	lsr	r20
    36b2:	46 95       	lsr	r20
    36b4:	d6 01       	movw	r26, r12
    36b6:	a4 0f       	add	r26, r20
    36b8:	b1 1d       	adc	r27, r1
    36ba:	42 2f       	mov	r20, r18
    36bc:	47 70       	andi	r20, 0x07	; 7
    36be:	8b 01       	movw	r16, r22
    36c0:	02 c0       	rjmp	.+4      	; 0x36c6 <conv_brk+0x17c>
    36c2:	00 0f       	add	r16, r16
    36c4:	11 1f       	adc	r17, r17
    36c6:	4a 95       	dec	r20
    36c8:	e2 f7       	brpl	.-8      	; 0x36c2 <conv_brk+0x178>
    36ca:	a8 01       	movw	r20, r16
    36cc:	5c 91       	ld	r21, X
    36ce:	45 2b       	or	r20, r21
    36d0:	4c 93       	st	X, r20
    36d2:	62 2e       	mov	r6, r18
    36d4:	a4 cf       	rjmp	.-184    	; 0x361e <conv_brk+0xd4>
    36d6:	a0 96       	adiw	r28, 0x20	; 32
    36d8:	cd bf       	out	0x3d, r28	; 61
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	1f 91       	pop	r17
    36e2:	0f 91       	pop	r16
    36e4:	ff 90       	pop	r15
    36e6:	ef 90       	pop	r14
    36e8:	df 90       	pop	r13
    36ea:	cf 90       	pop	r12
    36ec:	bf 90       	pop	r11
    36ee:	af 90       	pop	r10
    36f0:	9f 90       	pop	r9
    36f2:	8f 90       	pop	r8
    36f4:	7f 90       	pop	r7
    36f6:	6f 90       	pop	r6
    36f8:	5f 90       	pop	r5
    36fa:	08 95       	ret

000036fc <vfscanf>:
    36fc:	5f 92       	push	r5
    36fe:	6f 92       	push	r6
    3700:	7f 92       	push	r7
    3702:	8f 92       	push	r8
    3704:	9f 92       	push	r9
    3706:	af 92       	push	r10
    3708:	bf 92       	push	r11
    370a:	cf 92       	push	r12
    370c:	df 92       	push	r13
    370e:	ef 92       	push	r14
    3710:	ff 92       	push	r15
    3712:	0f 93       	push	r16
    3714:	1f 93       	push	r17
    3716:	cf 93       	push	r28
    3718:	df 93       	push	r29
    371a:	6c 01       	movw	r12, r24
    371c:	eb 01       	movw	r28, r22
    371e:	5a 01       	movw	r10, r20
    3720:	fc 01       	movw	r30, r24
    3722:	16 82       	std	Z+6, r1	; 0x06
    3724:	17 82       	std	Z+7, r1	; 0x07
    3726:	51 2c       	mov	r5, r1
    3728:	f6 01       	movw	r30, r12
    372a:	e3 80       	ldd	r14, Z+3	; 0x03
    372c:	fe 01       	movw	r30, r28
    372e:	e3 fc       	sbrc	r14, 3
    3730:	85 91       	lpm	r24, Z+
    3732:	e3 fe       	sbrs	r14, 3
    3734:	81 91       	ld	r24, Z+
    3736:	18 2f       	mov	r17, r24
    3738:	ef 01       	movw	r28, r30
    373a:	88 23       	and	r24, r24
    373c:	09 f4       	brne	.+2      	; 0x3740 <vfscanf+0x44>
    373e:	e0 c0       	rjmp	.+448    	; 0x3900 <vfscanf+0x204>
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	2e d2       	rcall	.+1116   	; 0x3ba0 <isspace>
    3744:	89 2b       	or	r24, r25
    3746:	19 f0       	breq	.+6      	; 0x374e <vfscanf+0x52>
    3748:	c6 01       	movw	r24, r12
    374a:	5f de       	rcall	.-834    	; 0x340a <skip_spaces>
    374c:	ed cf       	rjmp	.-38     	; 0x3728 <vfscanf+0x2c>
    374e:	15 32       	cpi	r17, 0x25	; 37
    3750:	41 f4       	brne	.+16     	; 0x3762 <vfscanf+0x66>
    3752:	fe 01       	movw	r30, r28
    3754:	e3 fc       	sbrc	r14, 3
    3756:	15 91       	lpm	r17, Z+
    3758:	e3 fe       	sbrs	r14, 3
    375a:	11 91       	ld	r17, Z+
    375c:	ef 01       	movw	r28, r30
    375e:	15 32       	cpi	r17, 0x25	; 37
    3760:	71 f4       	brne	.+28     	; 0x377e <vfscanf+0x82>
    3762:	c6 01       	movw	r24, r12
    3764:	4d d2       	rcall	.+1178   	; 0x3c00 <fgetc>
    3766:	97 fd       	sbrc	r25, 7
    3768:	c9 c0       	rjmp	.+402    	; 0x38fc <vfscanf+0x200>
    376a:	41 2f       	mov	r20, r17
    376c:	50 e0       	ldi	r21, 0x00	; 0
    376e:	9c 01       	movw	r18, r24
    3770:	33 27       	eor	r19, r19
    3772:	24 17       	cp	r18, r20
    3774:	35 07       	cpc	r19, r21
    3776:	c1 f2       	breq	.-80     	; 0x3728 <vfscanf+0x2c>
    3778:	b6 01       	movw	r22, r12
    377a:	bc d2       	rcall	.+1400   	; 0x3cf4 <ungetc>
    377c:	c1 c0       	rjmp	.+386    	; 0x3900 <vfscanf+0x204>
    377e:	1a 32       	cpi	r17, 0x2A	; 42
    3780:	39 f4       	brne	.+14     	; 0x3790 <vfscanf+0x94>
    3782:	e3 fc       	sbrc	r14, 3
    3784:	15 91       	lpm	r17, Z+
    3786:	e3 fe       	sbrs	r14, 3
    3788:	11 91       	ld	r17, Z+
    378a:	ef 01       	movw	r28, r30
    378c:	01 e0       	ldi	r16, 0x01	; 1
    378e:	01 c0       	rjmp	.+2      	; 0x3792 <vfscanf+0x96>
    3790:	00 e0       	ldi	r16, 0x00	; 0
    3792:	f1 2c       	mov	r15, r1
    3794:	20 ed       	ldi	r18, 0xD0	; 208
    3796:	21 0f       	add	r18, r17
    3798:	2a 30       	cpi	r18, 0x0A	; 10
    379a:	78 f4       	brcc	.+30     	; 0x37ba <vfscanf+0xbe>
    379c:	02 60       	ori	r16, 0x02	; 2
    379e:	6f 2d       	mov	r22, r15
    37a0:	70 e0       	ldi	r23, 0x00	; 0
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	40 e2       	ldi	r20, 0x20	; 32
    37a8:	09 de       	rcall	.-1006   	; 0x33bc <mulacc>
    37aa:	f6 2e       	mov	r15, r22
    37ac:	fe 01       	movw	r30, r28
    37ae:	e3 fc       	sbrc	r14, 3
    37b0:	15 91       	lpm	r17, Z+
    37b2:	e3 fe       	sbrs	r14, 3
    37b4:	11 91       	ld	r17, Z+
    37b6:	ef 01       	movw	r28, r30
    37b8:	ed cf       	rjmp	.-38     	; 0x3794 <vfscanf+0x98>
    37ba:	01 ff       	sbrs	r16, 1
    37bc:	03 c0       	rjmp	.+6      	; 0x37c4 <vfscanf+0xc8>
    37be:	f1 10       	cpse	r15, r1
    37c0:	03 c0       	rjmp	.+6      	; 0x37c8 <vfscanf+0xcc>
    37c2:	9e c0       	rjmp	.+316    	; 0x3900 <vfscanf+0x204>
    37c4:	ff 24       	eor	r15, r15
    37c6:	fa 94       	dec	r15
    37c8:	18 36       	cpi	r17, 0x68	; 104
    37ca:	19 f0       	breq	.+6      	; 0x37d2 <vfscanf+0xd6>
    37cc:	1c 36       	cpi	r17, 0x6C	; 108
    37ce:	51 f0       	breq	.+20     	; 0x37e4 <vfscanf+0xe8>
    37d0:	10 c0       	rjmp	.+32     	; 0x37f2 <vfscanf+0xf6>
    37d2:	fe 01       	movw	r30, r28
    37d4:	e3 fc       	sbrc	r14, 3
    37d6:	15 91       	lpm	r17, Z+
    37d8:	e3 fe       	sbrs	r14, 3
    37da:	11 91       	ld	r17, Z+
    37dc:	ef 01       	movw	r28, r30
    37de:	18 36       	cpi	r17, 0x68	; 104
    37e0:	41 f4       	brne	.+16     	; 0x37f2 <vfscanf+0xf6>
    37e2:	08 60       	ori	r16, 0x08	; 8
    37e4:	04 60       	ori	r16, 0x04	; 4
    37e6:	fe 01       	movw	r30, r28
    37e8:	e3 fc       	sbrc	r14, 3
    37ea:	15 91       	lpm	r17, Z+
    37ec:	e3 fe       	sbrs	r14, 3
    37ee:	11 91       	ld	r17, Z+
    37f0:	ef 01       	movw	r28, r30
    37f2:	11 23       	and	r17, r17
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <vfscanf+0xfc>
    37f6:	84 c0       	rjmp	.+264    	; 0x3900 <vfscanf+0x204>
    37f8:	61 2f       	mov	r22, r17
    37fa:	70 e0       	ldi	r23, 0x00	; 0
    37fc:	8e e7       	ldi	r24, 0x7E	; 126
    37fe:	92 e0       	ldi	r25, 0x02	; 2
    3800:	d7 d1       	rcall	.+942    	; 0x3bb0 <strchr_P>
    3802:	89 2b       	or	r24, r25
    3804:	09 f4       	brne	.+2      	; 0x3808 <vfscanf+0x10c>
    3806:	7c c0       	rjmp	.+248    	; 0x3900 <vfscanf+0x204>
    3808:	00 fd       	sbrc	r16, 0
    380a:	07 c0       	rjmp	.+14     	; 0x381a <vfscanf+0x11e>
    380c:	f5 01       	movw	r30, r10
    380e:	80 80       	ld	r8, Z
    3810:	91 80       	ldd	r9, Z+1	; 0x01
    3812:	c5 01       	movw	r24, r10
    3814:	02 96       	adiw	r24, 0x02	; 2
    3816:	5c 01       	movw	r10, r24
    3818:	02 c0       	rjmp	.+4      	; 0x381e <vfscanf+0x122>
    381a:	81 2c       	mov	r8, r1
    381c:	91 2c       	mov	r9, r1
    381e:	1e 36       	cpi	r17, 0x6E	; 110
    3820:	49 f4       	brne	.+18     	; 0x3834 <vfscanf+0x138>
    3822:	f6 01       	movw	r30, r12
    3824:	46 81       	ldd	r20, Z+6	; 0x06
    3826:	57 81       	ldd	r21, Z+7	; 0x07
    3828:	60 e0       	ldi	r22, 0x00	; 0
    382a:	70 e0       	ldi	r23, 0x00	; 0
    382c:	20 2f       	mov	r18, r16
    382e:	c4 01       	movw	r24, r8
    3830:	b9 dd       	rcall	.-1166   	; 0x33a4 <putval>
    3832:	7a cf       	rjmp	.-268    	; 0x3728 <vfscanf+0x2c>
    3834:	13 36       	cpi	r17, 0x63	; 99
    3836:	a1 f4       	brne	.+40     	; 0x3860 <vfscanf+0x164>
    3838:	01 fd       	sbrc	r16, 1
    383a:	02 c0       	rjmp	.+4      	; 0x3840 <vfscanf+0x144>
    383c:	ff 24       	eor	r15, r15
    383e:	f3 94       	inc	r15
    3840:	c6 01       	movw	r24, r12
    3842:	de d1       	rcall	.+956    	; 0x3c00 <fgetc>
    3844:	97 fd       	sbrc	r25, 7
    3846:	5a c0       	rjmp	.+180    	; 0x38fc <vfscanf+0x200>
    3848:	81 14       	cp	r8, r1
    384a:	91 04       	cpc	r9, r1
    384c:	29 f0       	breq	.+10     	; 0x3858 <vfscanf+0x15c>
    384e:	f4 01       	movw	r30, r8
    3850:	80 83       	st	Z, r24
    3852:	c4 01       	movw	r24, r8
    3854:	01 96       	adiw	r24, 0x01	; 1
    3856:	4c 01       	movw	r8, r24
    3858:	fa 94       	dec	r15
    385a:	f1 10       	cpse	r15, r1
    385c:	f1 cf       	rjmp	.-30     	; 0x3840 <vfscanf+0x144>
    385e:	4a c0       	rjmp	.+148    	; 0x38f4 <vfscanf+0x1f8>
    3860:	1b 35       	cpi	r17, 0x5B	; 91
    3862:	51 f4       	brne	.+20     	; 0x3878 <vfscanf+0x17c>
    3864:	9e 01       	movw	r18, r28
    3866:	a4 01       	movw	r20, r8
    3868:	6f 2d       	mov	r22, r15
    386a:	c6 01       	movw	r24, r12
    386c:	6e de       	rcall	.-804    	; 0x354a <conv_brk>
    386e:	ec 01       	movw	r28, r24
    3870:	89 2b       	or	r24, r25
    3872:	09 f0       	breq	.+2      	; 0x3876 <vfscanf+0x17a>
    3874:	3f c0       	rjmp	.+126    	; 0x38f4 <vfscanf+0x1f8>
    3876:	39 c0       	rjmp	.+114    	; 0x38ea <vfscanf+0x1ee>
    3878:	c6 01       	movw	r24, r12
    387a:	c7 dd       	rcall	.-1138   	; 0x340a <skip_spaces>
    387c:	97 fd       	sbrc	r25, 7
    387e:	3e c0       	rjmp	.+124    	; 0x38fc <vfscanf+0x200>
    3880:	1f 36       	cpi	r17, 0x6F	; 111
    3882:	49 f1       	breq	.+82     	; 0x38d6 <vfscanf+0x1da>
    3884:	28 f4       	brcc	.+10     	; 0x3890 <vfscanf+0x194>
    3886:	14 36       	cpi	r17, 0x64	; 100
    3888:	21 f1       	breq	.+72     	; 0x38d2 <vfscanf+0x1d6>
    388a:	19 36       	cpi	r17, 0x69	; 105
    388c:	39 f1       	breq	.+78     	; 0x38dc <vfscanf+0x1e0>
    388e:	25 c0       	rjmp	.+74     	; 0x38da <vfscanf+0x1de>
    3890:	13 37       	cpi	r17, 0x73	; 115
    3892:	71 f0       	breq	.+28     	; 0x38b0 <vfscanf+0x1b4>
    3894:	15 37       	cpi	r17, 0x75	; 117
    3896:	e9 f0       	breq	.+58     	; 0x38d2 <vfscanf+0x1d6>
    3898:	20 c0       	rjmp	.+64     	; 0x38da <vfscanf+0x1de>
    389a:	81 14       	cp	r8, r1
    389c:	91 04       	cpc	r9, r1
    389e:	29 f0       	breq	.+10     	; 0x38aa <vfscanf+0x1ae>
    38a0:	f4 01       	movw	r30, r8
    38a2:	60 82       	st	Z, r6
    38a4:	c4 01       	movw	r24, r8
    38a6:	01 96       	adiw	r24, 0x01	; 1
    38a8:	4c 01       	movw	r8, r24
    38aa:	fa 94       	dec	r15
    38ac:	ff 20       	and	r15, r15
    38ae:	59 f0       	breq	.+22     	; 0x38c6 <vfscanf+0x1ca>
    38b0:	c6 01       	movw	r24, r12
    38b2:	a6 d1       	rcall	.+844    	; 0x3c00 <fgetc>
    38b4:	3c 01       	movw	r6, r24
    38b6:	97 fd       	sbrc	r25, 7
    38b8:	06 c0       	rjmp	.+12     	; 0x38c6 <vfscanf+0x1ca>
    38ba:	72 d1       	rcall	.+740    	; 0x3ba0 <isspace>
    38bc:	89 2b       	or	r24, r25
    38be:	69 f3       	breq	.-38     	; 0x389a <vfscanf+0x19e>
    38c0:	b6 01       	movw	r22, r12
    38c2:	c3 01       	movw	r24, r6
    38c4:	17 d2       	rcall	.+1070   	; 0x3cf4 <ungetc>
    38c6:	81 14       	cp	r8, r1
    38c8:	91 04       	cpc	r9, r1
    38ca:	a1 f0       	breq	.+40     	; 0x38f4 <vfscanf+0x1f8>
    38cc:	f4 01       	movw	r30, r8
    38ce:	10 82       	st	Z, r1
    38d0:	11 c0       	rjmp	.+34     	; 0x38f4 <vfscanf+0x1f8>
    38d2:	00 62       	ori	r16, 0x20	; 32
    38d4:	03 c0       	rjmp	.+6      	; 0x38dc <vfscanf+0x1e0>
    38d6:	00 61       	ori	r16, 0x10	; 16
    38d8:	01 c0       	rjmp	.+2      	; 0x38dc <vfscanf+0x1e0>
    38da:	00 64       	ori	r16, 0x40	; 64
    38dc:	20 2f       	mov	r18, r16
    38de:	a4 01       	movw	r20, r8
    38e0:	6f 2d       	mov	r22, r15
    38e2:	c6 01       	movw	r24, r12
    38e4:	a8 dd       	rcall	.-1200   	; 0x3436 <conv_int>
    38e6:	81 11       	cpse	r24, r1
    38e8:	05 c0       	rjmp	.+10     	; 0x38f4 <vfscanf+0x1f8>
    38ea:	f6 01       	movw	r30, r12
    38ec:	83 81       	ldd	r24, Z+3	; 0x03
    38ee:	80 73       	andi	r24, 0x30	; 48
    38f0:	29 f4       	brne	.+10     	; 0x38fc <vfscanf+0x200>
    38f2:	06 c0       	rjmp	.+12     	; 0x3900 <vfscanf+0x204>
    38f4:	00 fd       	sbrc	r16, 0
    38f6:	18 cf       	rjmp	.-464    	; 0x3728 <vfscanf+0x2c>
    38f8:	53 94       	inc	r5
    38fa:	16 cf       	rjmp	.-468    	; 0x3728 <vfscanf+0x2c>
    38fc:	55 20       	and	r5, r5
    38fe:	19 f0       	breq	.+6      	; 0x3906 <vfscanf+0x20a>
    3900:	85 2d       	mov	r24, r5
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	02 c0       	rjmp	.+4      	; 0x390a <vfscanf+0x20e>
    3906:	8f ef       	ldi	r24, 0xFF	; 255
    3908:	9f ef       	ldi	r25, 0xFF	; 255
    390a:	df 91       	pop	r29
    390c:	cf 91       	pop	r28
    390e:	1f 91       	pop	r17
    3910:	0f 91       	pop	r16
    3912:	ff 90       	pop	r15
    3914:	ef 90       	pop	r14
    3916:	df 90       	pop	r13
    3918:	cf 90       	pop	r12
    391a:	bf 90       	pop	r11
    391c:	af 90       	pop	r10
    391e:	9f 90       	pop	r9
    3920:	8f 90       	pop	r8
    3922:	7f 90       	pop	r7
    3924:	6f 90       	pop	r6
    3926:	5f 90       	pop	r5
    3928:	08 95       	ret

0000392a <calloc>:
    392a:	0f 93       	push	r16
    392c:	1f 93       	push	r17
    392e:	cf 93       	push	r28
    3930:	df 93       	push	r29
    3932:	86 9f       	mul	r24, r22
    3934:	80 01       	movw	r16, r0
    3936:	87 9f       	mul	r24, r23
    3938:	10 0d       	add	r17, r0
    393a:	96 9f       	mul	r25, r22
    393c:	10 0d       	add	r17, r0
    393e:	11 24       	eor	r1, r1
    3940:	c8 01       	movw	r24, r16
    3942:	0d d0       	rcall	.+26     	; 0x395e <malloc>
    3944:	ec 01       	movw	r28, r24
    3946:	00 97       	sbiw	r24, 0x00	; 0
    3948:	21 f0       	breq	.+8      	; 0x3952 <calloc+0x28>
    394a:	a8 01       	movw	r20, r16
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	70 e0       	ldi	r23, 0x00	; 0
    3950:	45 d1       	rcall	.+650    	; 0x3bdc <memset>
    3952:	ce 01       	movw	r24, r28
    3954:	df 91       	pop	r29
    3956:	cf 91       	pop	r28
    3958:	1f 91       	pop	r17
    395a:	0f 91       	pop	r16
    395c:	08 95       	ret

0000395e <malloc>:
    395e:	0f 93       	push	r16
    3960:	1f 93       	push	r17
    3962:	cf 93       	push	r28
    3964:	df 93       	push	r29
    3966:	82 30       	cpi	r24, 0x02	; 2
    3968:	91 05       	cpc	r25, r1
    396a:	10 f4       	brcc	.+4      	; 0x3970 <malloc+0x12>
    396c:	82 e0       	ldi	r24, 0x02	; 2
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	e0 91 8e 21 	lds	r30, 0x218E	; 0x80218e <__flp>
    3974:	f0 91 8f 21 	lds	r31, 0x218F	; 0x80218f <__flp+0x1>
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	a0 e0       	ldi	r26, 0x00	; 0
    397e:	b0 e0       	ldi	r27, 0x00	; 0
    3980:	30 97       	sbiw	r30, 0x00	; 0
    3982:	19 f1       	breq	.+70     	; 0x39ca <malloc+0x6c>
    3984:	40 81       	ld	r20, Z
    3986:	51 81       	ldd	r21, Z+1	; 0x01
    3988:	02 81       	ldd	r16, Z+2	; 0x02
    398a:	13 81       	ldd	r17, Z+3	; 0x03
    398c:	48 17       	cp	r20, r24
    398e:	59 07       	cpc	r21, r25
    3990:	c8 f0       	brcs	.+50     	; 0x39c4 <malloc+0x66>
    3992:	84 17       	cp	r24, r20
    3994:	95 07       	cpc	r25, r21
    3996:	69 f4       	brne	.+26     	; 0x39b2 <malloc+0x54>
    3998:	10 97       	sbiw	r26, 0x00	; 0
    399a:	31 f0       	breq	.+12     	; 0x39a8 <malloc+0x4a>
    399c:	12 96       	adiw	r26, 0x02	; 2
    399e:	0c 93       	st	X, r16
    39a0:	12 97       	sbiw	r26, 0x02	; 2
    39a2:	13 96       	adiw	r26, 0x03	; 3
    39a4:	1c 93       	st	X, r17
    39a6:	27 c0       	rjmp	.+78     	; 0x39f6 <malloc+0x98>
    39a8:	00 93 8e 21 	sts	0x218E, r16	; 0x80218e <__flp>
    39ac:	10 93 8f 21 	sts	0x218F, r17	; 0x80218f <__flp+0x1>
    39b0:	22 c0       	rjmp	.+68     	; 0x39f6 <malloc+0x98>
    39b2:	21 15       	cp	r18, r1
    39b4:	31 05       	cpc	r19, r1
    39b6:	19 f0       	breq	.+6      	; 0x39be <malloc+0x60>
    39b8:	42 17       	cp	r20, r18
    39ba:	53 07       	cpc	r21, r19
    39bc:	18 f4       	brcc	.+6      	; 0x39c4 <malloc+0x66>
    39be:	9a 01       	movw	r18, r20
    39c0:	bd 01       	movw	r22, r26
    39c2:	ef 01       	movw	r28, r30
    39c4:	df 01       	movw	r26, r30
    39c6:	f8 01       	movw	r30, r16
    39c8:	db cf       	rjmp	.-74     	; 0x3980 <malloc+0x22>
    39ca:	21 15       	cp	r18, r1
    39cc:	31 05       	cpc	r19, r1
    39ce:	f9 f0       	breq	.+62     	; 0x3a0e <malloc+0xb0>
    39d0:	28 1b       	sub	r18, r24
    39d2:	39 0b       	sbc	r19, r25
    39d4:	24 30       	cpi	r18, 0x04	; 4
    39d6:	31 05       	cpc	r19, r1
    39d8:	80 f4       	brcc	.+32     	; 0x39fa <malloc+0x9c>
    39da:	8a 81       	ldd	r24, Y+2	; 0x02
    39dc:	9b 81       	ldd	r25, Y+3	; 0x03
    39de:	61 15       	cp	r22, r1
    39e0:	71 05       	cpc	r23, r1
    39e2:	21 f0       	breq	.+8      	; 0x39ec <malloc+0x8e>
    39e4:	fb 01       	movw	r30, r22
    39e6:	82 83       	std	Z+2, r24	; 0x02
    39e8:	93 83       	std	Z+3, r25	; 0x03
    39ea:	04 c0       	rjmp	.+8      	; 0x39f4 <malloc+0x96>
    39ec:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <__flp>
    39f0:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <__flp+0x1>
    39f4:	fe 01       	movw	r30, r28
    39f6:	32 96       	adiw	r30, 0x02	; 2
    39f8:	44 c0       	rjmp	.+136    	; 0x3a82 <malloc+0x124>
    39fa:	fe 01       	movw	r30, r28
    39fc:	e2 0f       	add	r30, r18
    39fe:	f3 1f       	adc	r31, r19
    3a00:	81 93       	st	Z+, r24
    3a02:	91 93       	st	Z+, r25
    3a04:	22 50       	subi	r18, 0x02	; 2
    3a06:	31 09       	sbc	r19, r1
    3a08:	28 83       	st	Y, r18
    3a0a:	39 83       	std	Y+1, r19	; 0x01
    3a0c:	3a c0       	rjmp	.+116    	; 0x3a82 <malloc+0x124>
    3a0e:	20 91 8c 21 	lds	r18, 0x218C	; 0x80218c <__brkval>
    3a12:	30 91 8d 21 	lds	r19, 0x218D	; 0x80218d <__brkval+0x1>
    3a16:	23 2b       	or	r18, r19
    3a18:	41 f4       	brne	.+16     	; 0x3a2a <malloc+0xcc>
    3a1a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3a1e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3a22:	20 93 8c 21 	sts	0x218C, r18	; 0x80218c <__brkval>
    3a26:	30 93 8d 21 	sts	0x218D, r19	; 0x80218d <__brkval+0x1>
    3a2a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    3a2e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3a32:	21 15       	cp	r18, r1
    3a34:	31 05       	cpc	r19, r1
    3a36:	41 f4       	brne	.+16     	; 0x3a48 <malloc+0xea>
    3a38:	2d b7       	in	r18, 0x3d	; 61
    3a3a:	3e b7       	in	r19, 0x3e	; 62
    3a3c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    3a40:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    3a44:	24 1b       	sub	r18, r20
    3a46:	35 0b       	sbc	r19, r21
    3a48:	e0 91 8c 21 	lds	r30, 0x218C	; 0x80218c <__brkval>
    3a4c:	f0 91 8d 21 	lds	r31, 0x218D	; 0x80218d <__brkval+0x1>
    3a50:	e2 17       	cp	r30, r18
    3a52:	f3 07       	cpc	r31, r19
    3a54:	a0 f4       	brcc	.+40     	; 0x3a7e <malloc+0x120>
    3a56:	2e 1b       	sub	r18, r30
    3a58:	3f 0b       	sbc	r19, r31
    3a5a:	28 17       	cp	r18, r24
    3a5c:	39 07       	cpc	r19, r25
    3a5e:	78 f0       	brcs	.+30     	; 0x3a7e <malloc+0x120>
    3a60:	ac 01       	movw	r20, r24
    3a62:	4e 5f       	subi	r20, 0xFE	; 254
    3a64:	5f 4f       	sbci	r21, 0xFF	; 255
    3a66:	24 17       	cp	r18, r20
    3a68:	35 07       	cpc	r19, r21
    3a6a:	48 f0       	brcs	.+18     	; 0x3a7e <malloc+0x120>
    3a6c:	4e 0f       	add	r20, r30
    3a6e:	5f 1f       	adc	r21, r31
    3a70:	40 93 8c 21 	sts	0x218C, r20	; 0x80218c <__brkval>
    3a74:	50 93 8d 21 	sts	0x218D, r21	; 0x80218d <__brkval+0x1>
    3a78:	81 93       	st	Z+, r24
    3a7a:	91 93       	st	Z+, r25
    3a7c:	02 c0       	rjmp	.+4      	; 0x3a82 <malloc+0x124>
    3a7e:	e0 e0       	ldi	r30, 0x00	; 0
    3a80:	f0 e0       	ldi	r31, 0x00	; 0
    3a82:	cf 01       	movw	r24, r30
    3a84:	df 91       	pop	r29
    3a86:	cf 91       	pop	r28
    3a88:	1f 91       	pop	r17
    3a8a:	0f 91       	pop	r16
    3a8c:	08 95       	ret

00003a8e <free>:
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	00 97       	sbiw	r24, 0x00	; 0
    3a94:	09 f4       	brne	.+2      	; 0x3a98 <free+0xa>
    3a96:	81 c0       	rjmp	.+258    	; 0x3b9a <free+0x10c>
    3a98:	fc 01       	movw	r30, r24
    3a9a:	32 97       	sbiw	r30, 0x02	; 2
    3a9c:	12 82       	std	Z+2, r1	; 0x02
    3a9e:	13 82       	std	Z+3, r1	; 0x03
    3aa0:	a0 91 8e 21 	lds	r26, 0x218E	; 0x80218e <__flp>
    3aa4:	b0 91 8f 21 	lds	r27, 0x218F	; 0x80218f <__flp+0x1>
    3aa8:	10 97       	sbiw	r26, 0x00	; 0
    3aaa:	81 f4       	brne	.+32     	; 0x3acc <free+0x3e>
    3aac:	20 81       	ld	r18, Z
    3aae:	31 81       	ldd	r19, Z+1	; 0x01
    3ab0:	82 0f       	add	r24, r18
    3ab2:	93 1f       	adc	r25, r19
    3ab4:	20 91 8c 21 	lds	r18, 0x218C	; 0x80218c <__brkval>
    3ab8:	30 91 8d 21 	lds	r19, 0x218D	; 0x80218d <__brkval+0x1>
    3abc:	28 17       	cp	r18, r24
    3abe:	39 07       	cpc	r19, r25
    3ac0:	51 f5       	brne	.+84     	; 0x3b16 <free+0x88>
    3ac2:	e0 93 8c 21 	sts	0x218C, r30	; 0x80218c <__brkval>
    3ac6:	f0 93 8d 21 	sts	0x218D, r31	; 0x80218d <__brkval+0x1>
    3aca:	67 c0       	rjmp	.+206    	; 0x3b9a <free+0x10c>
    3acc:	ed 01       	movw	r28, r26
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	ce 17       	cp	r28, r30
    3ad4:	df 07       	cpc	r29, r31
    3ad6:	40 f4       	brcc	.+16     	; 0x3ae8 <free+0x5a>
    3ad8:	4a 81       	ldd	r20, Y+2	; 0x02
    3ada:	5b 81       	ldd	r21, Y+3	; 0x03
    3adc:	9e 01       	movw	r18, r28
    3ade:	41 15       	cp	r20, r1
    3ae0:	51 05       	cpc	r21, r1
    3ae2:	f1 f0       	breq	.+60     	; 0x3b20 <free+0x92>
    3ae4:	ea 01       	movw	r28, r20
    3ae6:	f5 cf       	rjmp	.-22     	; 0x3ad2 <free+0x44>
    3ae8:	c2 83       	std	Z+2, r28	; 0x02
    3aea:	d3 83       	std	Z+3, r29	; 0x03
    3aec:	40 81       	ld	r20, Z
    3aee:	51 81       	ldd	r21, Z+1	; 0x01
    3af0:	84 0f       	add	r24, r20
    3af2:	95 1f       	adc	r25, r21
    3af4:	c8 17       	cp	r28, r24
    3af6:	d9 07       	cpc	r29, r25
    3af8:	59 f4       	brne	.+22     	; 0x3b10 <free+0x82>
    3afa:	88 81       	ld	r24, Y
    3afc:	99 81       	ldd	r25, Y+1	; 0x01
    3afe:	84 0f       	add	r24, r20
    3b00:	95 1f       	adc	r25, r21
    3b02:	02 96       	adiw	r24, 0x02	; 2
    3b04:	80 83       	st	Z, r24
    3b06:	91 83       	std	Z+1, r25	; 0x01
    3b08:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b0c:	82 83       	std	Z+2, r24	; 0x02
    3b0e:	93 83       	std	Z+3, r25	; 0x03
    3b10:	21 15       	cp	r18, r1
    3b12:	31 05       	cpc	r19, r1
    3b14:	29 f4       	brne	.+10     	; 0x3b20 <free+0x92>
    3b16:	e0 93 8e 21 	sts	0x218E, r30	; 0x80218e <__flp>
    3b1a:	f0 93 8f 21 	sts	0x218F, r31	; 0x80218f <__flp+0x1>
    3b1e:	3d c0       	rjmp	.+122    	; 0x3b9a <free+0x10c>
    3b20:	e9 01       	movw	r28, r18
    3b22:	ea 83       	std	Y+2, r30	; 0x02
    3b24:	fb 83       	std	Y+3, r31	; 0x03
    3b26:	49 91       	ld	r20, Y+
    3b28:	59 91       	ld	r21, Y+
    3b2a:	c4 0f       	add	r28, r20
    3b2c:	d5 1f       	adc	r29, r21
    3b2e:	ec 17       	cp	r30, r28
    3b30:	fd 07       	cpc	r31, r29
    3b32:	61 f4       	brne	.+24     	; 0x3b4c <free+0xbe>
    3b34:	80 81       	ld	r24, Z
    3b36:	91 81       	ldd	r25, Z+1	; 0x01
    3b38:	84 0f       	add	r24, r20
    3b3a:	95 1f       	adc	r25, r21
    3b3c:	02 96       	adiw	r24, 0x02	; 2
    3b3e:	e9 01       	movw	r28, r18
    3b40:	88 83       	st	Y, r24
    3b42:	99 83       	std	Y+1, r25	; 0x01
    3b44:	82 81       	ldd	r24, Z+2	; 0x02
    3b46:	93 81       	ldd	r25, Z+3	; 0x03
    3b48:	8a 83       	std	Y+2, r24	; 0x02
    3b4a:	9b 83       	std	Y+3, r25	; 0x03
    3b4c:	e0 e0       	ldi	r30, 0x00	; 0
    3b4e:	f0 e0       	ldi	r31, 0x00	; 0
    3b50:	12 96       	adiw	r26, 0x02	; 2
    3b52:	8d 91       	ld	r24, X+
    3b54:	9c 91       	ld	r25, X
    3b56:	13 97       	sbiw	r26, 0x03	; 3
    3b58:	00 97       	sbiw	r24, 0x00	; 0
    3b5a:	19 f0       	breq	.+6      	; 0x3b62 <free+0xd4>
    3b5c:	fd 01       	movw	r30, r26
    3b5e:	dc 01       	movw	r26, r24
    3b60:	f7 cf       	rjmp	.-18     	; 0x3b50 <free+0xc2>
    3b62:	8d 91       	ld	r24, X+
    3b64:	9c 91       	ld	r25, X
    3b66:	11 97       	sbiw	r26, 0x01	; 1
    3b68:	9d 01       	movw	r18, r26
    3b6a:	2e 5f       	subi	r18, 0xFE	; 254
    3b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b6e:	82 0f       	add	r24, r18
    3b70:	93 1f       	adc	r25, r19
    3b72:	20 91 8c 21 	lds	r18, 0x218C	; 0x80218c <__brkval>
    3b76:	30 91 8d 21 	lds	r19, 0x218D	; 0x80218d <__brkval+0x1>
    3b7a:	28 17       	cp	r18, r24
    3b7c:	39 07       	cpc	r19, r25
    3b7e:	69 f4       	brne	.+26     	; 0x3b9a <free+0x10c>
    3b80:	30 97       	sbiw	r30, 0x00	; 0
    3b82:	29 f4       	brne	.+10     	; 0x3b8e <free+0x100>
    3b84:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <__flp>
    3b88:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <__flp+0x1>
    3b8c:	02 c0       	rjmp	.+4      	; 0x3b92 <free+0x104>
    3b8e:	12 82       	std	Z+2, r1	; 0x02
    3b90:	13 82       	std	Z+3, r1	; 0x03
    3b92:	a0 93 8c 21 	sts	0x218C, r26	; 0x80218c <__brkval>
    3b96:	b0 93 8d 21 	sts	0x218D, r27	; 0x80218d <__brkval+0x1>
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	08 95       	ret

00003ba0 <isspace>:
    3ba0:	91 11       	cpse	r25, r1
    3ba2:	1f c1       	rjmp	.+574    	; 0x3de2 <__ctype_isfalse>
    3ba4:	80 32       	cpi	r24, 0x20	; 32
    3ba6:	19 f0       	breq	.+6      	; 0x3bae <isspace+0xe>
    3ba8:	89 50       	subi	r24, 0x09	; 9
    3baa:	85 50       	subi	r24, 0x05	; 5
    3bac:	d0 f7       	brcc	.-12     	; 0x3ba2 <isspace+0x2>
    3bae:	08 95       	ret

00003bb0 <strchr_P>:
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	05 90       	lpm	r0, Z+
    3bb4:	06 16       	cp	r0, r22
    3bb6:	21 f0       	breq	.+8      	; 0x3bc0 <strchr_P+0x10>
    3bb8:	00 20       	and	r0, r0
    3bba:	d9 f7       	brne	.-10     	; 0x3bb2 <strchr_P+0x2>
    3bbc:	c0 01       	movw	r24, r0
    3bbe:	08 95       	ret
    3bc0:	31 97       	sbiw	r30, 0x01	; 1
    3bc2:	cf 01       	movw	r24, r30
    3bc4:	08 95       	ret

00003bc6 <strnlen_P>:
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	05 90       	lpm	r0, Z+
    3bca:	61 50       	subi	r22, 0x01	; 1
    3bcc:	70 40       	sbci	r23, 0x00	; 0
    3bce:	01 10       	cpse	r0, r1
    3bd0:	d8 f7       	brcc	.-10     	; 0x3bc8 <strnlen_P+0x2>
    3bd2:	80 95       	com	r24
    3bd4:	90 95       	com	r25
    3bd6:	8e 0f       	add	r24, r30
    3bd8:	9f 1f       	adc	r25, r31
    3bda:	08 95       	ret

00003bdc <memset>:
    3bdc:	dc 01       	movw	r26, r24
    3bde:	01 c0       	rjmp	.+2      	; 0x3be2 <memset+0x6>
    3be0:	6d 93       	st	X+, r22
    3be2:	41 50       	subi	r20, 0x01	; 1
    3be4:	50 40       	sbci	r21, 0x00	; 0
    3be6:	e0 f7       	brcc	.-8      	; 0x3be0 <memset+0x4>
    3be8:	08 95       	ret

00003bea <strnlen>:
    3bea:	fc 01       	movw	r30, r24
    3bec:	61 50       	subi	r22, 0x01	; 1
    3bee:	70 40       	sbci	r23, 0x00	; 0
    3bf0:	01 90       	ld	r0, Z+
    3bf2:	01 10       	cpse	r0, r1
    3bf4:	d8 f7       	brcc	.-10     	; 0x3bec <strnlen+0x2>
    3bf6:	80 95       	com	r24
    3bf8:	90 95       	com	r25
    3bfa:	8e 0f       	add	r24, r30
    3bfc:	9f 1f       	adc	r25, r31
    3bfe:	08 95       	ret

00003c00 <fgetc>:
    3c00:	cf 93       	push	r28
    3c02:	df 93       	push	r29
    3c04:	ec 01       	movw	r28, r24
    3c06:	2b 81       	ldd	r18, Y+3	; 0x03
    3c08:	20 ff       	sbrs	r18, 0
    3c0a:	33 c0       	rjmp	.+102    	; 0x3c72 <fgetc+0x72>
    3c0c:	26 ff       	sbrs	r18, 6
    3c0e:	0a c0       	rjmp	.+20     	; 0x3c24 <fgetc+0x24>
    3c10:	2f 7b       	andi	r18, 0xBF	; 191
    3c12:	2b 83       	std	Y+3, r18	; 0x03
    3c14:	8e 81       	ldd	r24, Y+6	; 0x06
    3c16:	9f 81       	ldd	r25, Y+7	; 0x07
    3c18:	01 96       	adiw	r24, 0x01	; 1
    3c1a:	8e 83       	std	Y+6, r24	; 0x06
    3c1c:	9f 83       	std	Y+7, r25	; 0x07
    3c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	29 c0       	rjmp	.+82     	; 0x3c76 <fgetc+0x76>
    3c24:	22 ff       	sbrs	r18, 2
    3c26:	0f c0       	rjmp	.+30     	; 0x3c46 <fgetc+0x46>
    3c28:	e8 81       	ld	r30, Y
    3c2a:	f9 81       	ldd	r31, Y+1	; 0x01
    3c2c:	80 81       	ld	r24, Z
    3c2e:	08 2e       	mov	r0, r24
    3c30:	00 0c       	add	r0, r0
    3c32:	99 0b       	sbc	r25, r25
    3c34:	00 97       	sbiw	r24, 0x00	; 0
    3c36:	19 f4       	brne	.+6      	; 0x3c3e <fgetc+0x3e>
    3c38:	20 62       	ori	r18, 0x20	; 32
    3c3a:	2b 83       	std	Y+3, r18	; 0x03
    3c3c:	1a c0       	rjmp	.+52     	; 0x3c72 <fgetc+0x72>
    3c3e:	31 96       	adiw	r30, 0x01	; 1
    3c40:	e8 83       	st	Y, r30
    3c42:	f9 83       	std	Y+1, r31	; 0x01
    3c44:	0e c0       	rjmp	.+28     	; 0x3c62 <fgetc+0x62>
    3c46:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c48:	fb 85       	ldd	r31, Y+11	; 0x0b
    3c4a:	19 95       	eicall
    3c4c:	97 ff       	sbrs	r25, 7
    3c4e:	09 c0       	rjmp	.+18     	; 0x3c62 <fgetc+0x62>
    3c50:	2b 81       	ldd	r18, Y+3	; 0x03
    3c52:	01 96       	adiw	r24, 0x01	; 1
    3c54:	11 f0       	breq	.+4      	; 0x3c5a <fgetc+0x5a>
    3c56:	80 e2       	ldi	r24, 0x20	; 32
    3c58:	01 c0       	rjmp	.+2      	; 0x3c5c <fgetc+0x5c>
    3c5a:	80 e1       	ldi	r24, 0x10	; 16
    3c5c:	82 2b       	or	r24, r18
    3c5e:	8b 83       	std	Y+3, r24	; 0x03
    3c60:	08 c0       	rjmp	.+16     	; 0x3c72 <fgetc+0x72>
    3c62:	2e 81       	ldd	r18, Y+6	; 0x06
    3c64:	3f 81       	ldd	r19, Y+7	; 0x07
    3c66:	2f 5f       	subi	r18, 0xFF	; 255
    3c68:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6a:	2e 83       	std	Y+6, r18	; 0x06
    3c6c:	3f 83       	std	Y+7, r19	; 0x07
    3c6e:	99 27       	eor	r25, r25
    3c70:	02 c0       	rjmp	.+4      	; 0x3c76 <fgetc+0x76>
    3c72:	8f ef       	ldi	r24, 0xFF	; 255
    3c74:	9f ef       	ldi	r25, 0xFF	; 255
    3c76:	df 91       	pop	r29
    3c78:	cf 91       	pop	r28
    3c7a:	08 95       	ret

00003c7c <fputc>:
    3c7c:	0f 93       	push	r16
    3c7e:	1f 93       	push	r17
    3c80:	cf 93       	push	r28
    3c82:	df 93       	push	r29
    3c84:	fb 01       	movw	r30, r22
    3c86:	23 81       	ldd	r18, Z+3	; 0x03
    3c88:	21 fd       	sbrc	r18, 1
    3c8a:	03 c0       	rjmp	.+6      	; 0x3c92 <fputc+0x16>
    3c8c:	8f ef       	ldi	r24, 0xFF	; 255
    3c8e:	9f ef       	ldi	r25, 0xFF	; 255
    3c90:	2c c0       	rjmp	.+88     	; 0x3cea <fputc+0x6e>
    3c92:	22 ff       	sbrs	r18, 2
    3c94:	16 c0       	rjmp	.+44     	; 0x3cc2 <fputc+0x46>
    3c96:	46 81       	ldd	r20, Z+6	; 0x06
    3c98:	57 81       	ldd	r21, Z+7	; 0x07
    3c9a:	24 81       	ldd	r18, Z+4	; 0x04
    3c9c:	35 81       	ldd	r19, Z+5	; 0x05
    3c9e:	42 17       	cp	r20, r18
    3ca0:	53 07       	cpc	r21, r19
    3ca2:	44 f4       	brge	.+16     	; 0x3cb4 <fputc+0x38>
    3ca4:	a0 81       	ld	r26, Z
    3ca6:	b1 81       	ldd	r27, Z+1	; 0x01
    3ca8:	9d 01       	movw	r18, r26
    3caa:	2f 5f       	subi	r18, 0xFF	; 255
    3cac:	3f 4f       	sbci	r19, 0xFF	; 255
    3cae:	20 83       	st	Z, r18
    3cb0:	31 83       	std	Z+1, r19	; 0x01
    3cb2:	8c 93       	st	X, r24
    3cb4:	26 81       	ldd	r18, Z+6	; 0x06
    3cb6:	37 81       	ldd	r19, Z+7	; 0x07
    3cb8:	2f 5f       	subi	r18, 0xFF	; 255
    3cba:	3f 4f       	sbci	r19, 0xFF	; 255
    3cbc:	26 83       	std	Z+6, r18	; 0x06
    3cbe:	37 83       	std	Z+7, r19	; 0x07
    3cc0:	14 c0       	rjmp	.+40     	; 0x3cea <fputc+0x6e>
    3cc2:	8b 01       	movw	r16, r22
    3cc4:	ec 01       	movw	r28, r24
    3cc6:	fb 01       	movw	r30, r22
    3cc8:	00 84       	ldd	r0, Z+8	; 0x08
    3cca:	f1 85       	ldd	r31, Z+9	; 0x09
    3ccc:	e0 2d       	mov	r30, r0
    3cce:	19 95       	eicall
    3cd0:	89 2b       	or	r24, r25
    3cd2:	e1 f6       	brne	.-72     	; 0x3c8c <fputc+0x10>
    3cd4:	d8 01       	movw	r26, r16
    3cd6:	16 96       	adiw	r26, 0x06	; 6
    3cd8:	8d 91       	ld	r24, X+
    3cda:	9c 91       	ld	r25, X
    3cdc:	17 97       	sbiw	r26, 0x07	; 7
    3cde:	01 96       	adiw	r24, 0x01	; 1
    3ce0:	16 96       	adiw	r26, 0x06	; 6
    3ce2:	8d 93       	st	X+, r24
    3ce4:	9c 93       	st	X, r25
    3ce6:	17 97       	sbiw	r26, 0x07	; 7
    3ce8:	ce 01       	movw	r24, r28
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	08 95       	ret

00003cf4 <ungetc>:
    3cf4:	fb 01       	movw	r30, r22
    3cf6:	23 81       	ldd	r18, Z+3	; 0x03
    3cf8:	20 ff       	sbrs	r18, 0
    3cfa:	12 c0       	rjmp	.+36     	; 0x3d20 <ungetc+0x2c>
    3cfc:	26 fd       	sbrc	r18, 6
    3cfe:	10 c0       	rjmp	.+32     	; 0x3d20 <ungetc+0x2c>
    3d00:	8f 3f       	cpi	r24, 0xFF	; 255
    3d02:	3f ef       	ldi	r19, 0xFF	; 255
    3d04:	93 07       	cpc	r25, r19
    3d06:	61 f0       	breq	.+24     	; 0x3d20 <ungetc+0x2c>
    3d08:	82 83       	std	Z+2, r24	; 0x02
    3d0a:	2f 7d       	andi	r18, 0xDF	; 223
    3d0c:	20 64       	ori	r18, 0x40	; 64
    3d0e:	23 83       	std	Z+3, r18	; 0x03
    3d10:	26 81       	ldd	r18, Z+6	; 0x06
    3d12:	37 81       	ldd	r19, Z+7	; 0x07
    3d14:	21 50       	subi	r18, 0x01	; 1
    3d16:	31 09       	sbc	r19, r1
    3d18:	26 83       	std	Z+6, r18	; 0x06
    3d1a:	37 83       	std	Z+7, r19	; 0x07
    3d1c:	99 27       	eor	r25, r25
    3d1e:	08 95       	ret
    3d20:	8f ef       	ldi	r24, 0xFF	; 255
    3d22:	9f ef       	ldi	r25, 0xFF	; 255
    3d24:	08 95       	ret

00003d26 <__ultoa_invert>:
    3d26:	fa 01       	movw	r30, r20
    3d28:	aa 27       	eor	r26, r26
    3d2a:	28 30       	cpi	r18, 0x08	; 8
    3d2c:	51 f1       	breq	.+84     	; 0x3d82 <__ultoa_invert+0x5c>
    3d2e:	20 31       	cpi	r18, 0x10	; 16
    3d30:	81 f1       	breq	.+96     	; 0x3d92 <__ultoa_invert+0x6c>
    3d32:	e8 94       	clt
    3d34:	6f 93       	push	r22
    3d36:	6e 7f       	andi	r22, 0xFE	; 254
    3d38:	6e 5f       	subi	r22, 0xFE	; 254
    3d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d40:	af 4f       	sbci	r26, 0xFF	; 255
    3d42:	b1 e0       	ldi	r27, 0x01	; 1
    3d44:	3e d0       	rcall	.+124    	; 0x3dc2 <__ultoa_invert+0x9c>
    3d46:	b4 e0       	ldi	r27, 0x04	; 4
    3d48:	3c d0       	rcall	.+120    	; 0x3dc2 <__ultoa_invert+0x9c>
    3d4a:	67 0f       	add	r22, r23
    3d4c:	78 1f       	adc	r23, r24
    3d4e:	89 1f       	adc	r24, r25
    3d50:	9a 1f       	adc	r25, r26
    3d52:	a1 1d       	adc	r26, r1
    3d54:	68 0f       	add	r22, r24
    3d56:	79 1f       	adc	r23, r25
    3d58:	8a 1f       	adc	r24, r26
    3d5a:	91 1d       	adc	r25, r1
    3d5c:	a1 1d       	adc	r26, r1
    3d5e:	6a 0f       	add	r22, r26
    3d60:	71 1d       	adc	r23, r1
    3d62:	81 1d       	adc	r24, r1
    3d64:	91 1d       	adc	r25, r1
    3d66:	a1 1d       	adc	r26, r1
    3d68:	20 d0       	rcall	.+64     	; 0x3daa <__ultoa_invert+0x84>
    3d6a:	09 f4       	brne	.+2      	; 0x3d6e <__ultoa_invert+0x48>
    3d6c:	68 94       	set
    3d6e:	3f 91       	pop	r19
    3d70:	2a e0       	ldi	r18, 0x0A	; 10
    3d72:	26 9f       	mul	r18, r22
    3d74:	11 24       	eor	r1, r1
    3d76:	30 19       	sub	r19, r0
    3d78:	30 5d       	subi	r19, 0xD0	; 208
    3d7a:	31 93       	st	Z+, r19
    3d7c:	de f6       	brtc	.-74     	; 0x3d34 <__ultoa_invert+0xe>
    3d7e:	cf 01       	movw	r24, r30
    3d80:	08 95       	ret
    3d82:	46 2f       	mov	r20, r22
    3d84:	47 70       	andi	r20, 0x07	; 7
    3d86:	40 5d       	subi	r20, 0xD0	; 208
    3d88:	41 93       	st	Z+, r20
    3d8a:	b3 e0       	ldi	r27, 0x03	; 3
    3d8c:	0f d0       	rcall	.+30     	; 0x3dac <__ultoa_invert+0x86>
    3d8e:	c9 f7       	brne	.-14     	; 0x3d82 <__ultoa_invert+0x5c>
    3d90:	f6 cf       	rjmp	.-20     	; 0x3d7e <__ultoa_invert+0x58>
    3d92:	46 2f       	mov	r20, r22
    3d94:	4f 70       	andi	r20, 0x0F	; 15
    3d96:	40 5d       	subi	r20, 0xD0	; 208
    3d98:	4a 33       	cpi	r20, 0x3A	; 58
    3d9a:	18 f0       	brcs	.+6      	; 0x3da2 <__ultoa_invert+0x7c>
    3d9c:	49 5d       	subi	r20, 0xD9	; 217
    3d9e:	31 fd       	sbrc	r19, 1
    3da0:	40 52       	subi	r20, 0x20	; 32
    3da2:	41 93       	st	Z+, r20
    3da4:	02 d0       	rcall	.+4      	; 0x3daa <__ultoa_invert+0x84>
    3da6:	a9 f7       	brne	.-22     	; 0x3d92 <__ultoa_invert+0x6c>
    3da8:	ea cf       	rjmp	.-44     	; 0x3d7e <__ultoa_invert+0x58>
    3daa:	b4 e0       	ldi	r27, 0x04	; 4
    3dac:	a6 95       	lsr	r26
    3dae:	97 95       	ror	r25
    3db0:	87 95       	ror	r24
    3db2:	77 95       	ror	r23
    3db4:	67 95       	ror	r22
    3db6:	ba 95       	dec	r27
    3db8:	c9 f7       	brne	.-14     	; 0x3dac <__ultoa_invert+0x86>
    3dba:	00 97       	sbiw	r24, 0x00	; 0
    3dbc:	61 05       	cpc	r22, r1
    3dbe:	71 05       	cpc	r23, r1
    3dc0:	08 95       	ret
    3dc2:	9b 01       	movw	r18, r22
    3dc4:	ac 01       	movw	r20, r24
    3dc6:	0a 2e       	mov	r0, r26
    3dc8:	06 94       	lsr	r0
    3dca:	57 95       	ror	r21
    3dcc:	47 95       	ror	r20
    3dce:	37 95       	ror	r19
    3dd0:	27 95       	ror	r18
    3dd2:	ba 95       	dec	r27
    3dd4:	c9 f7       	brne	.-14     	; 0x3dc8 <__ultoa_invert+0xa2>
    3dd6:	62 0f       	add	r22, r18
    3dd8:	73 1f       	adc	r23, r19
    3dda:	84 1f       	adc	r24, r20
    3ddc:	95 1f       	adc	r25, r21
    3dde:	a0 1d       	adc	r26, r0
    3de0:	08 95       	ret

00003de2 <__ctype_isfalse>:
    3de2:	99 27       	eor	r25, r25
    3de4:	88 27       	eor	r24, r24

00003de6 <__ctype_istrue>:
    3de6:	08 95       	ret

00003de8 <_exit>:
    3de8:	f8 94       	cli

00003dea <__stop_program>:
    3dea:	ff cf       	rjmp	.-2      	; 0x3dea <__stop_program>
